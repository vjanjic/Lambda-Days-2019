@book{intellij,
  title={{IntelliJ IDEA in Action}},
  author={Fields, D.K. and Saunders, S. and Belyaev, E.},
  isbn={9781932394443},
  lccn={2007275370},
  series={In Action},
  year={2006},
  publisher={Manning}
}

@misc{refactorerl,
  title = {Utilization of RefactorErl during Development and Maintenance},
  author = {Tóth, M. and Bozó, I. and Horváth, Z.},
  howpublished = {Tutorial at the 17th Erlang User Conference 2012, Stockholm, Sweden, May 2012}
}

@misc{transformationsystem,
  title = {Pattern Transformation System, D4.4.},
  author = {Brown, C.},
  howpublished = {Deliverable for the EU Framework 7 ParaPhrase project},
  year = {2015},
  month = {march},
  url = {http://paraphrase-enlarged.elte.hu/downloads/D4-4.pdf}
}

@inproceedings{pdp2014,
  author    = {Christopher Brown and
               Vladimir Janjic and
               Kevin Hammond and
               Holger Sch{\"{o}}ner and
               Kamran Idrees and
               Colin W. Glass},
  title     = {{Agricultural Reform: More Efficient Farming Using Advanced Parallel
               Refactoring Tools}},
  booktitle = {Proc. PDP 2014},
  pages     = {36--43},
  year      = {2014},
  url       = {http://dx.doi.org/10.1109/PDP.2014.94},
  doi       = {10.1109/PDP.2014.94},
  timestamp = {Tue, 03 Feb 2015 17:12:51 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/pdp/BrownJHSIG14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{SkelSurvey,
 author = {Gonz\'{a}lez-V{\'e}lez, Horacio and Leyton, Mario},
 title = {{A Survey of Algorithmic Skeleton Frameworks: High-level Structured Parallel Programming Enablers}},
 journal = {Softw. Pract. Exper.},
 issue_date = {November 2010},
 volume = {40},
 number = {12},
 month = nov,
 year = {2010},
 issn = {0038-0644},
 pages = {1135--1160},
 numpages = {26},
 url = {http://dx.doi.org/10.1002/spe.v40:12},
 doi = {10.1002/spe.v40:12},
 acmid = {1890757},
 publisher = {John Wiley \& Sons, Inc.},
 address = {New York, NY, USA},
 keywords = {algorithmic skeletons, concurrent programming structures, parallel computing, parallel constructs, software patterns, structured parallelism},
} 

@inproceedings{Bozo,
 author = {Boz\'{o}, Istv\'{a}n and Ford\'{o}s, Viktoria and Horvath, Zolt\'{a}n and T\'{o}th, Melinda and Horp\'{a}csi, D\'{a}niel and Kozsik, Tam\'{a}s and K\"{o}szegi, Judit and Barwell, Adam and Brown, Christopher and Hammond, Kevin},
 title = {{Discovering Parallel Pattern Candidates in Erlang}},
 booktitle = {Proceedings of the Thirteenth ACM SIGPLAN Workshop on Erlang},
 series = {Erlang '14},
 year = {2014},
 isbn = {978-1-4503-3038-1},
 location = {Gothenburg, Sweden},
 pages = {13--23},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2633448.2633453},
 doi = {10.1145/2633448.2633453},
 acmid = {2633453},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {concurrency, erlang, parallelism, paraphrase, patterns, refactoring, skeletons},
} 


@inproceedings{brownpepm,
 author = {Brown, Christopher and Thompson, Simon},
 title = {{Clone Detection and Elimination for Haskell}},
 booktitle = {Proceedings of the 2010 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
 series = {PEPM '10},
 year = {2010},
 isbn = {978-1-60558-727-1},
 location = {Madrid, Spain},
 pages = {111--120},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1706356.1706378},
 doi = {10.1145/1706356.1706378},
 acmid = {1706378},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {duplicated code, generalisation, hare, haskell, program analysis, program transformation, refactoring},
} 

@inproceedings{parco2015,
 author = {Vladimir Janjic and Christopher Brown and Kevin Hammond},
 title = {{Lapedo: Hybrid Skeletons for Programming Heterogeneous Multicore Machines in Erlang}},
 booktitle = {Parallel Computing: On the Road to Exascale},
 year = {2016},
 isbn = {978-1-61499-621-7},
 location = {Madrid, Spain},
 pages = {185--195},
 numpages = {10},
 doi = {10.3233/978-1-61499-621-7-185},
 publisher = {IOS Press},
}

@inproceedings{thompsonsultana,
author = {Nik Sultana and Simon Thompson},
title = {{M}echanical {V}erification of {R}efactorings},
month = {January},
year = {2008},
pages = {182-196},
keywords = {determinacy analysis, Craig interpolants},
note = {},
doi = {},
url = {http://www.cs.kent.ac.uk/pubs/2008/2635},
    publication_type = {inproceedings},
    submission_id = {24359_1196361019},
    booktitle = {Workshop on Partial Evaluation and Program Manipulation},
    organization = {ACM SIGPLAN},
    refereed = {yes},
}

@inproceedings{Dig,
 author = {Dig, Danny and Marrero, John and Ernst, Michael D.},
 title = {{Refactoring Sequential Java Code for Concurrency via Concurrent Libraries}},
 booktitle = {Proceedings of the 31st International Conference on Software Engineering},
 series = {ICSE '09},
 year = {2009},
 isbn = {978-1-4244-3453-4},
 pages = {397--407},
 numpages = {11},
 url = {http://dx.doi.org/10.1109/ICSE.2009.5070539},
 doi = {10.1109/ICSE.2009.5070539},
 acmid = {1555054},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 



@article{cole:manifesto:02,
  author = {Cole, Murray},
  title = {{Bringing Skeletons out of the Closet: A Pragmatic Manifesto for Skeletal Parallel Programming}},
  journal = {Parallel Comput.},
  issue_date = {2004},
  volume = {30},
  number = {3},
  month = mar,
  year = {2004},
  issn = {0167-8191},
  pages = {389--406},
  numpages = {18},
  publisher = {Elsevier Science Publishers B. V.},
  address = {Amsterdam, The Netherlands, The Netherlands},
}
 
@book{Wilt:2013:CUDA,
  author = 	 {Nicholas Wilt},
  title = 	 {The {CUDA} Handbook},
  publisher = 	 {Addison Wesley},
  year = 	 {2013},
}

@book{Mushi:2011:OpenCL,
  author =       {Aaftab Munshi and et al.},
  title =        {OpenCL Programming Guide},
  publisher =    {Addison Wesley},
  year =         2011
}

@inproceedings{Li:2008:TSR,
  author = {Li, Huiqing and Thompson, Simon},
  title = {{Tool Support for Refactoring Functional Programs}},
  booktitle = {Proc. of the 2\textsuperscript{nd} Workshop on Refactoring Tools},
  series = {WRT '08},
  year = {2008},
  pages = {2:1--2:4},
  articleno = {2},
  numpages = {4},
  publisher = {ACM},
} 

@inproceedings{navarro2009analytical, 
  author={Navarro, A. and Asenjo, R. and Tabik, S. and Cascaval, C.}, 
  booktitle={Parallel Architectures and Compilation Techniques, 2009. PACT '09. 18th International Conference on}, 
  title={Analytical Modeling of Pipeline Parallelism}, 
  year={2009}, 
  month={Sept}, 
  pages={281-290}, 
  ISSN={1089-795X}
}

@phdthesis{opdyke,
  author = {Opdyke, William F.},
  title = {{Refactoring Object-Oriented Frameworks}},
  year = {1992},
  publisher = {University of Illinois at Urbana-Champaign},
}

@inproceedings{allen2004introduction,
  author = {Michael P. Allen},
  title = {Introduction to Molecular Dynamics Simulation},
  booktitle = {Computational Soft Matter: From Synthetic Polymers to Proteins},
  year = {2004},
  volume = 23,
  pages = {1--28}
}

@inproceedings{agrawal2005optimizing,
 author = {Agrawal, Sitij and Thies, William and Amarasinghe, Saman},
 title = {Optimizing Stream Programs Using Linear State Space Analysis},
 booktitle = {Proceedings of the 2005 International Conference on Compilers, Architectures and Synthesis for Embedded Systems},
 series = {CASES '05},
 year = {2005},
 isbn = {1-59593-149-X},
 location = {San Francisco, California, USA},
 pages = {126--136},
 numpages = {11},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{aldinuc:stream-data:98,
    author = {M. Aldinucci and M. Coppola and M. Danelutto},
    title = {Rewriting skeleton programs: How to evaluate the data-parallel stream-parallel tradeoff},
    booktitle = {Proc. EURO-PAR 2011},
    year = {1998},
    pages = {44--58},
}

@incollection{AldinucciDKMT11}
  year={2011},
  isbn={978-3-642-23396-8},
  booktitle={Euro-Par 2011 Parallel Processing},
  volume={6853},
  series={Lecture Notes in Computer Science},
  editor={Jeannot, Emmanuel and Namyst, Raymond and Roman, Jean},
  doi={10.1007/978-3-642-23397-5_17},
  title={Accelerating Code on Multi-cores with FastFlow},
  publisher={Springer Berlin Heidelberg},
  author={Aldinucci, Marco and Danelutto, Marco and Kilpatrick, Peter and Meneghin, Massimiliano and Torquati, Massimo},
  pages={170-181},
}

@inproceedings{FAN:PPA:01,
    author = {Marco Aldinucci and Sergei Gorlatch and S. Gorlatch and Susanna Pelagatti and Christian Lengauer and S. Pelagatti},
    title = {Towards Parallel Programming by Transformation: The FAN Skeleton Framework},
    booktitle = {Parallel Algorithms and Applications},
    year = {2001},
    volume = 16,
    number = {2--3},
    pages = {87--121}
}

@inproceedings{pdp, 
  author={Brown, C. and et al.}, 
  booktitle={PDP 2014}, 
  title={{Agricultural Reform: More Efficient Farming Using Advanced Parallel Refactoring Tools}}, 
  year={2014}, 
  month={Feb}, 
  pages={36-43}, 
}

@article{hlpp,
 year={2013},
 journal={Intnl. Journal of Parallel Programming},
 title={{Cost-Directed Refactoring for Parallel Erlang Programs}},
 publisher={Springer US},
 author={Brown, Christopher and et al.},
 pages={1-19},
}

@ARTICLE{mc, 
author={Browne, C.B. and Powley, E. and Whitehouse, D. and Lucas, S.M. and Cowling, P.I. and Rohlfshagen, P. and Tavener, S. and Perez, D. and Samothrakis, S. and Colton, S.}, 
journal={Computational Intelligence and AI in Games, IEEE Transactions on}, 
title={A Survey of Monte Carlo Tree Search Methods}, 
year={2012}, 
month={March}, 
volume={4}, 
number={1}, 
pages={1-43}, 
ISSN={1943-068X}
}

@incollection{aco,
year={2000},
booktitle={PPSN VI},
volume={1917},
series={Lecture Notes in Computer Science},
title={{Ant Colony Optimization for the Total Weighted Tardiness Problem}},
author={den Besten, Matthijs and Stützle, Thomas and Dorigo, Marco},
pages={611-620},
}

@article{darlington77,
 author = {Burstall, R. M. and Darlington, John},
 title = {{A Transformation System for Developing Recursive Programs}},
 journal = {J. ACM},
 issue_date = {Jan. 1977},
 volume = {24},
 number = {1},
 year = {1977},
 pages = {44--67},
 numpages = {24},
} 

@inproceedings{chaslot2006montep, 
author={Shih-Chieh Huang and Coulom, R. and Shun-Shii Lin}, 
booktitle={Technologies and Applications of Artificial Intelligence (TAAI), 2010 International Conference on}, 
title={Time Management for Monte-Carlo Tree Search Applied to the Game of Go}, 
year={2010}, 
month={Nov}, 
pages={462-466}, 
doi={10.1109/TAAI.2010.78},
}

@phdthesis{cole-th,
 author = {Cole, Murray I.},
 title = {Algorithmic Skeletons: A Structured Approach to the Management of Parallel Computation},
 year = {1988},
 note = {AAID-85022},
} 

@inproceedings{couetoux2011continuous,
 author = {Cou\"{e}toux, Adrien and Hoock, Jean-Baptiste and Sokolovska, Nataliya and Teytaud, Olivier and Bonnard, Nicolas},
 title = {Continuous Upper Confidence Trees},
 booktitle = {Proceedings of the 5th International Conference on Learning and Intelligent Optimization},
 series = {LION'05},
 year = {2011},
 isbn = {978-3-642-25565-6},
 location = {Rome, Italy},
 pages = {433--445},
 numpages = {13},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
} 

@inproceedings{coulom2007efficient,
 author = {Coulom, R{\'e}mi},
 title = {Efficient Selectivity and Backup Operators in Monte-Carlo Tree Search},
 booktitle = {Proceedings of the 5th International Conference on Computers and Games},
 series = {CG'06},
 year = {2007},
 isbn = {3-540-75537-3, 978-3-540-75537-1},
 location = {Turin, Italy},
 pages = {72--83},
 numpages = {12},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
}

@article{gordon2006exploiting,
 author = {Gordon, Michael I. and Thies, William and Amarasinghe, Saman},
 title = {Exploiting Coarse-grained Task, Data, and Pipeline Parallelism in Stream Programs},
 journal = {SIGOPS Oper. Syst. Rev.},
 issue_date = {December 2006},
 volume = {40},
 number = {5},
 month = oct,
 year = {2006},
 issn = {0163-5980},
 pages = {151--162},
 numpages = {12},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{cec,
  author = {John McCall and Mehdi Goli and Vladimir Janjic and Kevin Hammond},
  title = {{Using Machine Learning to Derive Mappings for Heterogeneous Parallel Computations}},
  booktitle = {Proc. of IEEE Congress on Evol. Comp.},
  year = {2013}
}

@incollection{fmcoover,
year={2013},
booktitle={Formal Methods for Components and Objects},
volume={7542},
series={Lecture Notes in Computer Science},
title={{The ParaPhrase Project: Parallel Patterns for Adaptive Heterogeneous Multicore Systems}},
author={Hammond, Kevin and et al.},
pages={218-236}
}

@inproceedings{hormati2009flextream,
 author = {Hormati, Amir H. and Choi, Yoonseo and Kudlur, Manjunath and Rabbah, Rodric and Mudge, Trevor and Mahlke, Scott},
 title = {Flextream: Adaptive Compilation of Streaming Applications for Heterogeneous Architectures},
 booktitle = {Proceedings of the 2009 18th International Conference on Parallel Architectures and Compilation Techniques},
 series = {PACT '09},
 year = {2009},
 isbn = {978-0-7695-3771-9},
 pages = {214--223},
 numpages = {10},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@article{kwok1999static,
 author = {Kwok, Yu-Kwong and Ahmad, Ishfaq},
 title = {Static Scheduling Algorithms for Allocating Directed Task Graphs to Multiprocessors},
 journal = {ACM Comput. Surv.},
 issue_date = {Dec. 1999},
 volume = {31},
 number = {4},
 month = dec,
 year = {1999},
 issn = {0360-0300},
 pages = {406--471},
 numpages = {66},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article{distributed1984dynamic,
 author = {Ramamritham, K. and Stankovic, J. A.},
 title = {Dynamic Task Scheduling in Hard Real-Time Distributed Systems},
 journal = {IEEE Softw.},
 issue_date = {July 1984},
 volume = {1},
 number = {3},
 month = jul,
 year = {1984},
 issn = {0740-7459},
 pages = {65--75},
 numpages = {11},
 publisher = {IEEE Computer Society Press},
 address = {Los Alamitos, CA, USA},
}

@inproceedings{saraswat2007x10,
 author = {Saraswat, Vijay A. and Sarkar, Vivek and von Praun, Christoph},
 title = {X10: Concurrent Programming for Modern Architectures},
 booktitle = {Proceedings of the 12th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
 series = {PPoPP '07},
 year = {2007},
 isbn = {978-1-59593-602-8},
 location = {San Jose, California, USA},
 pages = {271--271},
 numpages = {1},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{SkillicornC95,
 author = {Skillicorn, D. B. and Cai, W.},
 title = {A Cost Calculus for Parallel Functional Programming},
 journal = {J. Parallel Distrib. Comput.},
 issue_date = {July 1995},
 volume = {28},
 number = {1},
 month = jul,
 year = {1995},
 issn = {0743-7315},
 pages = {65--83},
 numpages = {19},
 publisher = {Academic Press, Inc.},
 address = {Orlando, FL, USA},
} 

@article{subhlok1993exploiting,
 author = {Subhlok, Jaspal and Stichnoth, James M. and O'Hallaron, David R. and Gross, Thomas},
 title = {Exploiting Task and Data Parallelism on a Multicomputer},
 journal = {SIGPLAN Not.},
 issue_date = {July 1993},
 volume = {28},
 number = {7},
 month = jul,
 year = {1993},
 issn = {0362-1340},
 pages = {13--22},
 numpages = {10},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{udupa2009software,
  author = {A. Udupla and R. Govindarjan and M. J. Thazhuthaveetil},
  title = {Software Pipelined Execution of Stream Programs on GPUs},
  booktitle = {International Symposium on Code Generation and Optimization},
  year = {2009},
  pages = {200--209}
}

@inproceedings{wang2010partitioning,
 author = {Wang, Zheng and O'Boyle, Michael F.P.},
 title = {Partitioning Streaming Parallelism for Multi-cores: A Machine Learning Based Approach},
 booktitle = {Proceedings of the 19th International Conference on Parallel Architectures and Compilation Techniques},
 series = {PACT '10},
 year = {2010},
 isbn = {978-1-4503-0178-7},
 location = {Vienna, Austria},
 pages = {307--318},
 numpages = {12},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@misc{bindings,
  title = {{OpenCL 1.2 C++ Bindings Specification}},
  author = {Benedict R. Gaster and Lee Hows}
}

@article{Gonzalez-Velez:2010:SAS,
 author = {Gonz\'{a}lez-V{\'e}lez, Horacio and Leyton, Mario},
 title = {{A Survey of Algorithmic Skeleton Frameworks: High-level Structured Parallel Programming Enablers}},
 journal = {Softw. Pract. Exper.},
 issue_date = {2010},
 volume = {40},
 number = {12},
 year = {2010},
 pages = {1135--1160},
 numpages = {26},
} 

@inproceedings{Tung:2012:ILM, 
author={Le Duc Tung and et al.}, 
booktitle={RIVF}, 
title={{An Intermediate Library for Multi-GPUs Computing Skeletons}}, 
year={2012}, 
pages={1-6}, 
}

@inproceedings{Groot:2007:ATL,
 author = {Groot, Sven and van der Spek, Harmen L. A. and Bakker, Erwin M. and Wijshoff, Harry A. G.},
 title = {{The Automatic Transformation of Linked List Data Structures}},
 booktitle = {Proc. of PACT},
 year = {2007},
}

@inproceedings{Chakravarty:2001:NND,
 author = {Chakravarty, Manuel M. T. and Keller, Gabriele and Lechtchinsky, Roman and Pfannenstiel, W.},
 title = {{Nepal - Nested Data Parallelism in Haskell}},
 booktitle = {Proc. of Euro-Par},
 year = {2001},
 pages = {524--534},
 numpages = {11},
}

 @inproceedings{Singh:2010:DDP,
 author = {Singh, Satnam},
 title = {{Declarative Data-parallel Programming with the Accelerator System}},
 booktitle = {Proc. of DAMP},
 year = {2010},
 pages = {1--2},
 numpages = {2},
} 

 @inproceedings{Larsen:2011:SOA:1926354.1926360,
 author = {Larsen, Bradford},
 title = {Simple Optimizations for an Applicative Array Language for Graphics Processors},
 booktitle = {Proceedings of the Sixth Workshop on Declarative Aspects of Multicore Programming},
 series = {DAMP '11},
 year = {2011},
 isbn = {978-1-4503-0486-3},
 location = {Austin, Texas, USA},
 pages = {25--34},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1926354.1926360},
 doi = {10.1145/1926354.1926360},
 acmid = {1926360},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {array programming, cuda, gpgpu},
} 

@inproceedings{Guo:2011:BGP,
 author = {Guo, Jing and Thiyagalingam, Jeyarajan and Scholz, Sven-Bodo},
 title = {{Breaking the GPU Programming Barrier with the Auto-parallelising SAC Compiler}},
 booktitle = {Proc. of DAMP},
 year = {2011},
 pages = {15--24},
 numpages = {10},
} 

@inproceedings{Chakravarty:2011:AHA,
 author = {Chakravarty, Manuel M.T. and et al.},
 title = {{Accelerating Haskell Array Codes with Multicore GPUs}},
 booktitle = {Proc. of DAMP},
 year = {2011},
 pages = {3--14},
 numpages = {12},
} 

@misc{erlangopencl,
  author = {Tony Rogvall},
  title = {{OpenCL Binding for Erlang}},
  howpublished = {\url{https://github.com/tonyrog/cl}},
  note = {Accessed: 10-07-2014}
}

@article{McDonell:2013:OPF,
 author = {McDonell, Trevor L. and et al.},
 title = {{Optimising Purely Functional GPU Programs}},
 journal = {SIGPLAN Not.},
 issue_date = {2013},
 volume = {48},
 number = {9},
 year = {2013},
 pages = {49--60},
 numpages = {12},
}

@inproceedings{Claessen:2012:EAC,
 author = {Claessen, Koen and Sheeran, Mary and Svensson, Bo Joel},
 title = {{Expressive Array Constructs in an Embedded GPU Kernel Programming Language}},
 booktitle = {Proc. of DAMP},
 year = {2012},
 isbn = {978-1-4503-1117-5},
 pages = {21--30},
 numpages = {10},
}  

@ARTICLE{Lee:2011:IDS, 
author={Hyouk Joong Lee and et al.}, 
journal={Micro, IEEE}, 
title={{Implementing Domain-Specific Languages for Heterogeneous Parallel Computing}}, 
year={2011}, 
volume={31}, 
number={5}, 
pages={42-53}, 
}

@incollection{Grossman:2011:DPG,
year={2011},
booktitle={Languages and Compilers for Parallel Computing},
volume={6548},
series={Lecture Notes in Computer Science},
doi={10.1007/978-3-642-19595-2_16},
title={{CnC-CUDA: Declarative Programming for GPUs}},
publisher={Springer Berlin Heidelberg},
author={Grossman, Max and Simion Sbîrlea, Alina and Budimlić, Zoran and Sarkar, Vivek},
pages={230-245},
}@String{JSC =    "Journal of Symbolic Computation"}
@String{S-V =    "Springer"}



@techreport{Markatos91,
 author = {Markatos, E. P. and LeBlanc, T. J.},
 title = {Load Balancing vs. Locality Management in Shared-Memory Multiprocessors},
 year = {1991},
 source = {http://www.ncstrl.org:8900/ncstrl/servlet/search?formname=detail\&id=oai%3Ancstrlh%3Arochester_cs%3Ancstrl.rochester_cs%2F%2FTR399},
 publisher = {University of Rochester},
 address = {Rochester, NY, USA},
} 

@INPROCEEDINGS{Brecht93,
    author = {Timothy Brecht},
    title = {On the importance of parallel application placement in NUMA multiprocessors},
    booktitle = {In SEDMS IV. Symposium on Experiences with Distributed and Multiprocessor Systems},
    year = {1993},
    pages = {1--18}
}

@incollection{Klug11,
year={2011},
isbn={978-3-642-19447-4},
booktitle={Transactions on High-Performance Embedded Architectures and Compilers III},
volume={6590},
series={Lecture Notes in Computer Science},
editor={Stenstrom, Per},
doi={10.1007/978-3-642-19448-1_12},
title={autopin Automated Optimization of Thread-to-Core Pinning on Multicore Systems},
url={http://dx.doi.org/10.1007/978-3-642-19448-1_12},
publisher={Springer Berlin Heidelberg},
keywords={Multicore; CMP; automatic performance optimization; hardware performance counters; CPU binding; thread placement},
author={Klug, Tobias and Ott, Michael and Weidendorfer, Josef and Trinitis, Carsten},
pages={219-235}
}

@article{Broquedis10,
  author        = "F.Broquedis and N. Furmento and B. Goglin and P.-A. Wacrenier and R. Namyst",
  title         = "ForestGOMP: An Efficient {O}pen{MP} Environment for {NUMA} Architectures",
  journal       = "International Journal Parallel Programming",
  year          = "2010",
  volume		= "38",
  pages         = "418-439"
}

@inproceedings{Thibault07,
  author        = "S. Thibault and R. Namyst and P.A. Wacrenier",
  title         = "Building portable thread schedulers for hierarchical multi-processors: the {B}ubble{S}ched {F}ramework",
  booktitle     = "Euro-Par. ACM",
  address	= "Rennes, France",
  year          = "2007"
}

@INPROCEEDINGS{Blumofe94,
    author = "R. Blumofe and C. Leiserson",
    title = {{Scheduling multithreaded computations by work stealing}},
    booktitle = {Proc. SFCS'94},
    year = 1994,
    pages = {356--368}
}

@inproceedings{Olivier11,
  author        = "S.L. Olivier and A.K. Porterfield and K.B. Wheeler",
  title         = "Scheduling Task Parallelism on Multi-Socket Multicore Systems",
  booktitle     = "ROSS'11",
  address	= "Tuscon, Arizona, USA",
  year          = "2011",
  pages			= "49--56"
}




@article{edenTV,
  author    = {Jost Berthold and
               Rita Loogen},
  title     = {{The Impact of Dynamic Channels on Functional Topology Skeletons}},
  journal   = {Parallel Processing Letters},
  volume    = {18},
  number    = {1},
  year      = {2008},
  pages     = {101-115},
  ee        = {http://dx.doi.org/10.1142/S0129626408003259},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@article{threadscope,
 author = {Wheeler, Kyle B. and Thain, Douglas},
 title = {Visualizing {M}assively {M}ultithreaded {A}pplications with {T}hread{S}cope},
 journal = {Concurr. Comput. : Pract. Exper.},
 issue_date = {January 2010},
 volume = {22},
 number = {1},
 month = jan,
 year = {2010},
 issn = {1532-0626},
 pages = {45--67},
 numpages = {23},
 url = {http://dx.doi.org/10.1002/cpe.v22:1},
 doi = {10.1002/cpe.v22:1},
 acmid = {1673015},
 publisher = {John Wiley and Sons Ltd.},
 address = {Chichester, UK},
 keywords = {multithreading, structure, visualization},
}

@ARTICLE{CharterFRights:2000,
  author       = {{Council of the European Communities}},
  title        = {Charter of Fundamental Rights of the {European Union}},
  year         = {2000},
  journal      = {Official Journal of the European Communities},
  volume       = {364},
  number       = {3},
  note         = {\url{http://www.europarl.europa.eu/charter/pdf/text_en.pdf}
                  (Last Accessed: 28/2/2009)},
  month        = {Dec},
}

@MISC{EUREGDIS:2007,
  author       = {{Commission of the European Communities}},
  title        = {{Communication from the Commission to the European Parliament, The
                  	Council and The European Economic and Social Committee on scientific
                  	information in the digital age: access, dissemination and preservation}},
  howpublished = {COM(2007) 56 final},
  year         = {2007},
  address      = {Brussels},
  month        = feb,
  note         = {\url{http://ec.europa.eu/research/science-society/document_library/pdf_06/communication-022007_en.pdf} (Last Accessed: 2/3/2009)},
}

@TECHREPORT{eurab:054,
  author       = {{EURAB}},
  title        = {Increasing the Attractiveness of Science, Engineering \& Technology Careers},
  year         = {2002},
  month        = nov,
  institution  = {European Research Advisory Board},
  address      = {\url{http://ec.europa.eu/research/eurab/pdf/recommendations1.pdf}},
  note         = {(Last Accessed: 28/12/2010)},
  number       = {02.054},
  type         = {Recommendation},
}

@MISC{Council:1981,
  author       = {{Council of Europe}},
  title        = {Convention for the Protection of Individuals with regard to Automatic Processing of Personal Data},
  year         = {1981},
  howpublished = {\url{http://conventions.coe.int/Treaty/en/Treaties/Html/108.htm}},
  note         = {Strasbourg, 28.I.1981},
}

@ARTICLE{European:1995,
  author       = {{European Parliament and the Council of the European Union}},
  title        = {{Directive 95/46/EC of the European Parliament and of the Council
                  of 24 October 1995 on the protection of individuals with regard to the processing
                  of personal data and on the free movement of such data} },
  year         = {1995},
  journal      = {Official Journal of the European Communities},
  number       = {281},
  pages        = {31--50},
  month        = {Nov},
}




@UNPUBLISHED{EclipseWeb,
  author       = {Eclipse Foundation},
  year         = {2009},
  title        = {{E}clipse - an {O}pen {D}evelopment {P}latform},
  note         = {\texttt{http://www.eclipse.org}},
}

@ARTICLE{parascope,
  author       = {Kennedy, K. and McKinley, K. S. and Tseng, C. W.},
  title        = {Interactive Parallel Programming using the ParaScope Editor},
  journal      = {IEEE Trans. Parallel Distrib. Syst.},
  volume       = {2},
  issue        = {3},
  month        = {July},
  year         = {1991},
  issn         = {1045-9219},
  pages        = {329--341},
  numpages     = {13},
  publisher    = {IEEE Press},
  address      = {Piscataway, NJ, USA},
  keywords     = {FORTRAN, Index TermsParaScope Editor, ParaScopeproject, efficient parallel programs, exploratory programming style, general user editing, hybrid text, integrated collection, intelligent interactive editor, interactive programming, modified program, parallel Fortran programs, parallel programming, powerful interactive program transformations, scientific programmers, structureediting facility, text editing},
}

@INPROCEEDINGS{reentrancy,
  author       = {Wloka, Jan and Sridharan, Manu and Tip, Frank},
  title        = {Refactoring for reentrancy},
  booktitle    = {ESEC/FSE '09},
  year         = {2009},
  isbn         = {978-1-60558-001-2},
  address      = {Amsterdam},
  pages        = {173--182},
  numpages     = {10},
  url          = {http://doi.acm.org/10.1145/1595696.1595723},
  doi          = {http://doi.acm.org/10.1145/1595696.1595723},
  acmid        = {1595723},
  publisher    = {ACM},
}



@INCOLLECTION{aldinucci10a,
  author       = {Aldinucci, Marco and Danelutto, Marco and Kilpatrick, Peter},
  title        = {Autonomic management of multiple non-functional concerns in behavioural skeletons},
  booktitle    = {Grids, {P2P} and Services Computing},
  publisher    = {Springer-Verlag},
  isbn         = {978-1-4419-6794-7},
  pages        = {89--103},
  doi          = {10.1007/978-1-4419-6794-7_8},
  editor       = {Desprez, Frederic and Getov, Vladimir and Priol, Thierry and Yahyapour, Ramin},
  year         = {2010},
}

@UNPUBLISHED{program,
  author       = {{P}acSoft {G}roup},
  title        = {Programatica: Integrating Programming, Properties and Validation},
  year         = {2005},
  note         = {www.cse.ogi.edu/PacSoft/projects//},
}

@inproceedings{DBLP:conf/ccgrid/JanjicH10,
  author    = {Vladimir Janjic and
               Kevin Hammond},
  title     = {Granularity-Aware Work-Stealing for Computationally-Uniform
               Grids},
  booktitle     = {10th IEEE/ACM International Conference on Cluster, Cloud
               and Grid Computing, CCGrid 2010, 17-20 May 2010, Melbourne,
               Victoria, Australia},
  publisher = {IEEE},
  year      = {2010},
  pages     = {123-134},
  ee        = {http://dx.doi.org/10.1109/CCGRID.2010.49},
  crossref  = {DBLP:conf/ccgrid/2010},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/popl/JostHLH10,
  author    = {Steffen Jost and
               Kevin Hammond and
               Hans-Wolfgang Loidl and
               Martin Hofmann},
  title     = {Static determination of quantitative resource usage for
               higher-order programs},
  editor    = {Manuel V. Hermenegildo and
               Jens Palsberg},
  booktitle     = {Proceedings of the 37th ACM SIGPLAN-SIGACT Symposium on
               Principles of Programming Languages, POPL 2010, Madrid,
               Spain, January 17-23, 2010},
  publisher = {ACM},
  year      = {2010},
  pages     = {223-236},
  ee        = {http://doi.acm.org/10.1145/1706299.1706327},
  crossref  = {DBLP:conf/popl/2010},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/icfp/BradyH10-,
  author    = {Edwin Brady and
               Kevin Hammond},
  title     = {Scrapping your inefficient engine: using partial evaluation
               to improve domain-specific language implementation},
  editor    = {Paul Hudak and
               Stephanie Weirich},
  booktitle     = {Proceeding of the 15th ACM SIGPLAN international conference
               on Functional programming, ICFP 2010, Baltimore, Maryland,
               USA, September 27-29, 2010},
  publisher = {ACM},
  year      = {2010},
  isbn      = {978-1-60558-794-3},
  pages     = {297-308},
  ee        = {http://doi.acm.org/10.1145/1863543.1863587},
  crossref  = {DBLP:conf/icfp/2010},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/popl/ZainHBTMA09,
  author    = {Abdallah Al Zain and
               Kevin Hammond and
               Jost Berthold and
               Philip W. Trinder and
               Greg Michaelson and
               Mustafa Aswad},
  title     = {Low-pain, high-gain multicore programming in Haskell: coordinating
               irregular symbolic computations on multicore architectures},
  editor    = {Leaf Petersen and
               Manuel M. T. Chakravarty},
  booktitle     = {Proceedings of the POPL 2009 Workshop on Declarative Aspects
               of Multicore Programming, DAMP 2009, Savannah, GA, USA,
               January 20, 2009},
  publisher = {ACM},
  year      = {2009},
  isbn      = {978-1-60558-417-1},
  pages     = {25-36},
  ee        = {http://doi.acm.org/10.1145/1481839.1481843},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/ispa/ZainTHKLB08,
  author    = {Abdallah Al Zain and
               Philip W. Trinder and
               Kevin Hammond and
               Alexander Konovalov and
               Steve Linton and
               Jost Berthold},
  title     = {Parallelism without Pain: Orchestrating Computational Algebra
               Components into a High-Performance Parallel System},
  booktitle     = {IEEE International Symposium on Parallel and Distributed
               Processing with Applications, ISPA 2008, Sydney, NSW, Australia,
               December 10-12, 2008},
  publisher = {IEEE},
  year      = {2008},
  pages     = {99-112},
  ee        = {http://dx.doi.org/10.1109/ISPA.2008.19},
  crossref  = {DBLP:conf/ispa/2008},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/europar/HammondZCPT07,
  author    = {Kevin Hammond and
               Abdallah Al Zain and
               Gene Cooperman and
               Dana Petcu and
               Philip W. Trinder},
  title     = {SymGrid: A Framework for Symbolic Computation on the Grid},
  editor    = {Anne-Marie Kermarrec and
               Luc Boug{\'e} and
               Thierry Priol},
  booktitle     = {Euro-Par 2007, Parallel Processing, 13th International Euro-Par
               Conference, Rennes, France, August 28-31, 2007, Proceedings},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {4641},
  year      = {2007},
  isbn      = {978-3-540-74465-8},
  pages     = {457-466},
  ee        = {http://dx.doi.org/10.1007/978-3-540-74466-5_49},
  crossref  = {DBLP:conf/europar/2007},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@INPROCEEDINGS{SizedTime,
  author       = {A.J. Reb\'{o}n~Portillo and K. Hammond and H.-W. Loidl and P. Vasconcelos},
  title        = {A Sized Time System for a Parallel Functional Language },
  booktitle    = {IFL~'02},
  address      = {Madrid},
  publisher    = {Springer-Verlag},
  series       = {LNCS},
  volume       = {2670},
  pages        = {232--248},
  year         = {2003},
}

@INPROCEEDINGS{SizedTimeRecursion,
  title        = {{Inferring Costs for Recursive, Polymorphic and Higher-Order Functional Programs}},
  author       = {P.B. Vasconcelos and K. Hammond},
  booktitle    = {IFL~'03},
  publisher    = {LNCS},
  pages        = {86--101},
  volume       = {3145},
  address      = {Edinburgh},
  year         = {2004},
}

@INPROCEEDINGS{Hume-Lebanon,
  author       = {K. Hammond},
  title        = {{Hume: a Bounded Time Concurrent Language}},
  booktitle    = {ICECS '2K},
  publisher    = {IEEE Press},
  address      = {Kaslik},
  month        = dec,
  year         = {2000},
  pages        = {407--411},
}

@INPROCEEDINGS{Hume-GPCE,
  author       = {K. Hammond and G.J. Michaelson},
  title        = {{Hume: a Domain-Specific Language for Real-Time Embedded Systems}},
  booktitle    = {GPCE~'03},
  address      = {Erfurt, Germany},
  publisher    = {Springer-Verlag},
  series       = {LNCS},
  volume       = {2830},
  year         = {2003},
}

@inproceedings{DBLP:conf/icfp/BradyH10,
  author    = {Edwin Brady and
               Kevin Hammond},
  title     = {Scrapping your inefficient engine: using partial evaluation
               to improve domain-specific language implementation},
  editor    = {Paul Hudak and
               Stephanie Weirich},
  booktitle     = {Proceeding of the 15th ACM SIGPLAN international conference
               on Functional programming, ICFP 2010, Baltimore, Maryland,
               USA, September 27-29, 2010},
  publisher = {ACM},
  year      = {2010},
  isbn      = {978-1-60558-794-3},
  pages     = {297-308},
  ee        = {http://doi.acm.org/10.1145/1863543.1863587},
  crossref  = {DBLP:conf/icfp/2010},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@article{DBLP:journals/fuin/BradyH10,
  author    = {Edwin Brady and
               Kevin Hammond},
  title     = {Correct-by-Construction Concurrency: Using Dependent Types
               to Verify Implementations of Effectful Resource Usage Protocols},
  journal   = {Fundam. Inform.},
  volume    = {102},
  number    = {2},
  year      = {2010},
  pages     = {145-176},
  ee        = {http://dx.doi.org/10.3233/FI-2010-303},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/gpce/BradyH06,
  author    = {Edwin Brady and
               Kevin Hammond},
  title     = {A verified staged interpreter is a verified compiler},
  editor    = {Stan Jarzabek and
               Douglas C. Schmidt and
               Todd L. Veldhuizen},
  booktitle     = {Generative Programming and Component Engineering, 5th International
               Conference, GPCE 2006, Portland, Oregon, USA, October 22-26,
               2006, Proceedings},
  publisher = {ACM},
  year      = {2006},
  isbn      = {1-59593-237-2},
  pages     = {111-120},
  ee        = {http://doi.acm.org/10.1145/1173706.1173724},
  crossref  = {DBLP:conf/gpce/2006},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/fm/JostLHSH09,
  author    = {Steffen Jost and
               Hans-Wolfgang Loidl and
               Kevin Hammond and
               Norman Scaife and
               Martin Hofmann},
  title     = {"Carbon Credits" for Resource-Bounded Computations Using
               Amortised Analysis},
  editor    = {Ana Cavalcanti and
               Dennis Dams},
  booktitle     = {FM 2009: Formal Methods, Second World Congress, Eindhoven,
               The Netherlands, November 2-6, 2009. Proceedings},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {5850},
  year      = {2009},
  isbn      = {978-3-642-05088-6},
  pages     = {354-369},
  ee        = {http://dx.doi.org/10.1007/978-3-642-05089-3_23},
  crossref  = {DBLP:conf/fm/2009},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{splst11,
  title = {{RefactorErl - Source Code Analysis and Refactoring in Erlang}},
  author = {Bozo, I. and Horpocsi, D. and Horvoth, Z. and Kitlei, R. and Koszegi, J. and Tejfel. M. and Toth, M},
  booktitle = {Proceedings of the 12th Symposium on Programming Languages and Software Tools, ISBN 978-9949-23-178-2},
  address = {Tallin, Estonia},
  pages = {138--148},
  year = {2011},
  month = {October}
}


@inproceedings{Wrangler,
 author = {Li, Huiqing and Thompson, Simon and Orosz, Gy\"{o}rgy and T\'{o}th, Melinda},
 title = {{Refactoring with Wrangler, Updated: Data and Process Refactorings, and Integration with Eclipse}},
 booktitle = {Proceedings of the 7th ACM SIGPLAN Workshop on ERLANG},
 series = {ERLANG '08},
 year = {2008},
 isbn = {978-1-60558-065-4},
 location = {Victoria, BC, Canada},
 pages = {61--72},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1411273.1411283},
 doi = {10.1145/1411273.1411283},
 acmid = {1411283},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {eclipse, erlang, erlide, process, record, refactoring, slicing, tuple, wrangler},
} 


@INPROCEEDINGS{HaRe,
  author       = {Christopher Brown and Huiqing Li and Simon Thompson},
  title        = {{An Expression Processor: A Case Study in Refactoring Haskell Programs}},
  month        = {May},
  year         = {2010},
  pages        = {15},
  keywords     = {refactoring, verification, Isabelle, program extraction, proof},
  url          = {http://www.cs.kent.ac.uk/pubs/2010/3009},
  booktitle    = {Eleventh Symposium on Trends in Functional Programming},
  editor       = {Rex Page},
  refereed     = {preliminary refereeing},
}

@INPROCEEDINGS{paraform,
 author 	= {Brown, C. and Loidl, H. and Hammond, K},
 title		= {Paraforming: Forming Haskell Programs using Novel Refactoring Techniques},
 booktitle	= {Twelth Symposium on Trends in Functional Programming},
 address	= {Madrid, Spain},
 year		= {2011},
 series = {LNCS~7193},
 month	= {May},
 }

% -----------------------------------------------------------------------------
% Loidl references

@inproceedings{LJFOPARA09,
  author = 	 {Loidl, H-W. and Jost, S.},
  title = 	 {{Improvements to a Resource Analysis for Hume}},
  booktitle = {{FOPARA~'09: Intl. Workshop on Foundational and Practical Aspects of Resource Analysis}},
  publisher = {Springer},
  OPTaddress   = {Heidelberg},
  series    = {LNCS~6324},
  year      = {2009},
  address  = {Eindhoven, the Netherlands},
  month     = nov,
  keywords =     {Resource analysis, Hume},
  url =          {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/FOPARA09.pdf},
  abstract = "
The core of our resource analysis for the embedded systems language Hume is
a resource-generic, type-based inference engine that employs the concept
of amortised costs to statically infer resource bounds.
In this paper we present extensions and improvements of this resource analysis
in several ways. 
We develop and assess a call count analysis for higher-order programs, as a specific
instance of our inference engine.
We address usability aspects in general and in particular discuss an improved presentation of the 
inferred resource bounds together with the possibility of interactively
tuning these bounds.
Finally, we demonstrate improvements in the performance of our analysis.
"
}

@Article{strategies,
  author = 	 {Philip W. Trinder and Kevin Hammond and Hans-Wolfgang Loidl and Simon L. {Peyton Jones}},
  title = 	 {Algorithm + {S}trategy = {P}arallelism},
  journal = 	 {{J. of Functional Programming}},
  year = 	 {1998},
  volume = 	 {8},
  number = 	 {1},
  month = 	 jan,
  pages = 	 {23--60}
}

@Article{JSC10,
  author = 	 {S. Linton and K. Hammond and A. Konovalov and C. Brown and P.W. Trinder and H.-W. Loidl and P. Horn and D. Roozemond},
  title = 	 {{Easy Composition of Symbolic Computation Software using SCSCP: A New Lingua Franca for Symbolic Computation}},
  journal = 	 JSC,
  month = jan,
  year = 	 2012,
  OPTnote = 	 {Submitted},
  doi = {10.1016/j.jsc.2011.12.019},
  url = {http://dx.doi.org/10.1016/j.jsc.2011.12.019},
  annote = 	 {Extended version of the ISSAC10 paper on SCSCP},
  keywords =     {OpenMath, SCSCP, interface, coordination, parallelism, SymGrid-Par},
  abstract = "We present the results of the first four years of the European research project SCIEnce --- Symbolic
Computation Infrastructure in Europe (http://www.symbolic-computation.org), which aims to
provide key infrastructure for symbolic computation research. A primary outcome of the project
is that we have developed a new way of combining computer algebra systems using the Symbolic
Computation Software Composability Protocol (SCSCP), in which both protocol messages and
data are encoded in the OpenMath format. We describe the SCSCP middleware and APIs,
outline implementations for various Computer Algebra Systems (CAS), and show how SCSCP-
compliant components may be combined to solve scientific problems that cannot be solved within
a single CAS, or may be organised into a system for distributed parallel computations."
}

@InProceedings{ZHT*07,
  author = 	 {A. Al Zain and K. Hammond and P. Trinder and S. Linton and H-W. Loidl and M. Costanti},
  title = 	 {{SymGrid-Par: Designing a Framework for Executing Computational Algebra Systems on Computational Grids}},
  booktitle =	 {{ICCS07: International Conference on Computational Science}},
  pages =	 {617--624},
  year =	 2007,
  series =	 {LNCS~4488},
  publisher =    S-V,
  address =	 {Beijing, China},
  month =	 may,
  keywords =     {parallel applications, symbolic computation},
  url        = {http://dx.doi.org/10.1007/978-3-540-72586-2_90},
  myurl = {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/papp2007.pdf},
  abstract = "
  SymGrid-Par is a new framework for executing large computer
  algebra problems on computational Grids. We present the design of
  SymGrid-Par, which supports multiple computer algebra
  packages, and hence provides the novel possibility of composing a
  system using components from different packages.
  Orchestration of the components on the Grid is provided by a
  Grid-enabled parallel Haskell (GpH).  We present a prototype
  implementation of a core component of SymGrid-Par, together with promising 
  measurements of two programs on a modest Grid to demonstrate the
  feasibility of our approach."
}

@InProceedings{IFL10,
  author = 	 {C. Brown and H-W. Loidl and J. Berthold and K. Hammond},
  title = 	 {{Improving your CASH flow: The Computer Algebra SHell (Extended Abstract)}},
  booktitle =	 {{IFL'10 ---  Intl.\ Workshop on the Implementation of Functional Languages}},
  year = 	 2010,
  month = 	 sep,
  isbn = {978-3-642-24275-5},
  series = {LNCS~6647},
  OPTlocation = {Alphen aan den Rijn, The Netherlands},
  pages = {169--184},
  numpages = {16},
  url = {http://dl.acm.org/citation.cfm?id=2050135.2050146},
  OPTnote = 	 {Draft Proceedings},
  keywords =     {parallel applications, symbolic computation},
  myurl =          {http://www.cs.st-andrews.ac.uk/~hwloidl/SCIEnce/SymGrid-Par/ifl2010.pdf},
  abstract =     "
Some important challenges in the field of symbolic computation ---and functional programming--- are the transparent access to complex, 
mathematical software, the exchange of data between independent systems with specialised tasks and the exploitation of modern 
parallel hardware. One attempt to solve this problem is SymGrid-Par, a system for exploiting parallel hardware in the context of computer algebra. 
Specifically, SymGrid-Par provides an easy-to-use platform for parallel computation that connects several underlying computer algebra systems, communicating
through a standardised protocol for symbolic computation. 

In this paper we describe a new component of SymGrid-Par known as CaSH: the Computer Algebra SHell. CaSH is a system that
allows direct access to SymGrid-Par via GHCi. CaSH thus allows Haskell programmers to exploit high-performance parallel computations using a system designated
for solving problems in computer algebra; whilst still maintaining the purity and express-ability offered by the Haskell environment. We demonstrate access to both sequential and parallel services of SymGrid-Par.
For the latter we use parallel skeletons, implemented in the Haskell dialect of Eden; these skeletons are called from CaSH but exploit a computational algebra system known as
GAP to offload the mathematical complexity."
}

@InProceedings{HLB05,
  author =	 {M. Hofmann and H-W. Loidl and L. Beringer},
  title = 	 {{Certification of Quantitative Properties of Programs}},
  booktitle = 	 {{Logical Aspects of Secure Computer Systems}},
  publisher = 	 {IOS Press},
  year = 	 2005,
  note =	 {Marktoberdorf Summer School, Aug 2-13, 2005},
  keywords =     {PCC},
  url =          {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/mdorf.pdf},
}

@Article{AspinallBHLM:TCS2007,
  author = 	 {D. Aspinall and L. Beringer and M. Hofmann and H-W. Loidl and A. Momigliano},
  title = 	 {{A Program Logic for Resources}},
  journal = 	 {{Theoretical Computer Science}},
  year = 	 2007,
  volume =	 389,
  number =	 3,
  pages =	 {411--445},
  month =	 dec,
  keywords =     {PCC},
  doi = {http://dx.doi.org/10.1016/j.tcs.2007.09.003},
  url = {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/TCS.pdf},
  abstract = "
  We introduce a reasoning infrastructure for proving statements on
  resource consumption in a fragment of the Java Virtual
  Machine Language (JVML). The infrastructure is based on a small hierarchy
  of program logics, with increasing levels of abstraction: 
  at the top there is a type system for a high-level
  language that encodes resource consumption. 
  The infrastructure is designed to be used in 
  a proof-carrying code (PCC) scenario, where mobile programs
  can be equipped with formal evidence that they
  have predictable resource behaviour.
  
  This article presents the core logic in our infrastructure, a
  VDM-style program logic for partial correctness, which can make
  statements about resource consumption in a general form.
  We establish some important results for this logic, including
  soundness and completeness with respect to a resource-aware
  operational semantics for the JVML.  We also present a second
  logic built on top of the core logic, which is used to express
  termination; it is also shown to be sound and complete.  The entire
  infrastructure has been formalised in Isabelle/HOL, both to enhance
  confidence in the meta-theoretical results, and to provide a
  prototype implementation for PCC.  We give examples to show the
  usefulness of this approach, including proofs of resource bounds on
  code resulting from compiling high-level functional programs.
"
}

@InProceedings{DSM02,
  author = 	 {Loidl, H-W.},
  title = 	 {{The Virtual Shared Memory Performance of a Parallel Graph Reducer}},
  booktitle =  {{CCGrid/DSM 2002 --- Intl.\  Symp.\  on Cluster Computing and the Grid}},
  OPTeditor =     {Bal, H. and L{\"o}hr, K-P. and Reinefeld, A.},
  address =    {Berlin, Germany, May~21--24},
  OPTmonth =      may,
  year = 	 2002,
  publisher =  {IEEE Press},
  pages =      {311--318},
  OPTnote =	 {{Organised with CCGrid 2002 --- International Symposium on Cluster Computing and the Grid}},
  keywords =     {GpH, parallel Haskell},
  url =        {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/dsm02.ps.gz},
}

@InProceedings{SFP01-GUM,
 title={{Load Balancing in a Parallel Graph Reducer}},
 author={Loidl, H-W.},
 pages={63--74},
 booktitle =    {{SFP'01 --- Scottish Functional Programming Workshop}},
 series={Trends in Functional Programming},
 volume={3},
 editor={Hammond, K. and Curtis, S.},
 publisher = {Intellect},
 address={Bristol, UK},
 OPTaddress =  {Univ of Stirling, Scotland},
 year={2001},
 keywords =     {GpH, parallel Haskell, GUM},
 url={http://www.macs.hw.ac.uk/~dsg/gph/papers/drafts/sfp01-gum.ps.gz},
}

@InBook{LTHZB08,
  author =	 {H-W. Loidl and P.W. Trinder and K. Hammond, A.D. {Al Zain} and C. Baker-Finch},
  OPTeditor =	 {Michael Alexander and Bill Gardner},
  title = 	 {{Process Algebra for Parallel and Distributed Processing: Algebraic Languages in Specification-Based Software Development}},
  chapter = 	 {{Semi-Explicit Parallel Programming in a Purely Functional Style: GpH}},
  publisher = 	 {Chapman and Hall},
  year = 	 2008,
  keywords =     {GpH, parallel Haskell},
  abstract = "
Declarative programming languages can play an important role in the process
of designing and implementing parallel systems. They bridge the gap between
a high-level  specification, with proven properties of  the overall system,
and the execution  of the system on real  hardware.  Efficiently exploiting
parallelism  on a wide  range of  architectures is  a challenging  task and
should  in our  view be  handled  by a  sophisticated runtime  environment.
Based on  this design philosophy  we have developed and  formalised Glasgow
parallel Haskell (GpH), and implemented  it as a conservative extension of
the Glasgow Haskell Compiler.

%The latter can  be as
%diverse as  a computational Grid composed of  high-performance clusters and
% multi-core machines.   

The high-level nature of declarative languages eases the task of mapping an
algebraic specification down to  executable code.  In fact, the operational
components   of   the   specification   can  already   be   considered   an
implementation, with the associated  properties acting as assertions to the
code. Based on a formal model  of the declarative language, the validity of
these properties can be established by manual proof, which works on a level
of detail  similar to the  specification language itself.  Many operational
aspects, usually  complicating a  proof of an  implementation, do  not come
into   the  picture   at   this  level.    Most  importantly,   unnecessary
sequentialisation of the code is avoided.

However, the goal of implicit  parallelism has proven an elusive one. Often
the automatically  generated threads are too fine-grained  to be efficient.
In  other  cases the  data-dependencies  between  expressions prohibit  the
generation  of a  sufficient amount  of  parallelism.  Thus,  we employ  an
approach of semi-explicit parallelism, where only potential parallelism has
to be annotated in a program, and all aspects of coordination are delegated
to the runtime environment.  A corresponding formal model, in the form of a
structured  operational  semantics,  handling  pools  of  realised  and  of
potential parallelism,  is used  to establish the  correctness of  the code
employing  semi-explicit parallelism.   The runtime  environment  itself is
capable of synchronising parallel threads, using automatic blocking on data
under evaluation,  and by simulating virtual shared  memory across networks
of machines.  Being  embedded into the optimised runtime  environment for a
sequential  language,  we  achieve  efficient  execution  of  a  high-level
language, close  to the  original specification language,  while minimising
the  programmer effort  in parallelising  the  code and  being scalable  to
large-scale applications that can be executed on heterogeneous networks and
computational Grids.
"}

@InProceedings{LMJB09,
  author = 	 {H-W. Loidl and K. MacKenzie and S. Jost and L. Beringer},
  title = 	 {{A Proof-carrying-code Infrastructure for Resources}},
  booktitle =	 {{LADC'09 --- Latin-American Symposium on Dependable Computing}},
  year =	 2009,
  address =	 {Jo�o Pessoa, Brazil, Sep 1--4},
  keywords =     {PCC},
  url =          {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/PCC.pdf},
  abstract = "
  This paper tackles the issue of increasing dependability
  of distributed systems in the presence of mobile code.
  To this end we present a complete Proof-carrying-code (PCC) infrastructure for
  independent and automatic certification of resource bounds of mobile JVM programs.
  This includes a certifying compiler for a high-level language, which
  produces a certificate of bounded heap consumption, and independent
  certificate validation, realised via proof-checking, on the code-consumer
  side. Thus, we are now in a position to automatically infer linear upper bounds on
  the heap consumption of a strict, first-order functional language, generate a
  certificate encoding a formal proof of such bounded heap consumption and
  independently validate this certificate at the consumer side by checking the
  certificate. This prevents mobile code from exhausting resources on the local machine."
}

@Article{HOSC03,
  author = 	 {Loidl, H-W. and {Rubio Diez}, F.  and Scaife, N.R. and  Hammond, K. and Klusik, U. and  Loogen, R. and  Michaelson, G.J. and  Horiguchi, S.  and {Pena Mari}, R. and Priebe, S.M. and  {Rebon Portillo}, A.J.  and Trinder, P.W.},
  title = 	 {{Comparing Parallel Functional Languages: Programming and Performance}},
  journal = 	 {Higher-order and Symbolic Computation},
  year = 	 2003,
  volume =	 16,
  number =	 3,
  keywords =     {GpH, parallel Haskell, parallel applications},
  url =  {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/HOSC03.ps.gz},
}

%%% %$%cindex Our JFP survey paper

@Article{TLP01,
  author = 	 {Trinder, P.W. and Loidl, H-W. and Pointon, R.F.},
  title = 	 {{Parallel and Distributed Haskells}},
  journal = 	 {J.\ of Functional Programming},
  year = 	 2002,
  month =      jul,
  volume =     12,
  number =     {4\&5},
  pages =      {469--510},
  keywords =     {GpH, parallel Haskell, GdH, distributed Haskell},
  abstractURL = {http://www.dcs.glasgow.ac.uk/jfp/bibliography/References/trinderlp2002:469.html},
  url = {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/jfp01.ps.gz},
}

@InProceedings{JHLH09,
  author = 	 {S. Jost and H-W. Loidl and K. Hammond and N. Scaife and M. Hofmann},
  title = 	 {{``Carbon Credits'' for Resource-bounded Computations using Amortised Analysis}},
  booktitle =	 {{FM09 --- 16th International Symposium on  Formal Methods}},
  series =       {LNCS~5850},
  pages     =    {354--369},
  publisher =    S-V,
  year =	 2009,
  address =	 {Eindhoven, The Netherlands,  November 2--6},
  keywords =     {Resource analysis, Hume},
  url =          {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/AnalysisPaper.pdf},
  ALTurl =       {http://springerlink.com/content/617r14163768p85p/fulltext.pdf},
  abstract = "
Bounding resource usage is important for a number of areas, notably
real-time embedded systems and safety-critical systems. 
In this paper, we present a fully automatic static type-based analysis
for inferring upper bounds on resource usage for
programs involving general algebraic datatypes and full recursion.
Our method can easily be used to bound any countable resource,
without needing to revisit proofs.
We apply the analysis to the important metrics of worst-case
execution time, stack- and heap-space usage. Our results from
several realistic embedded control applications 
demonstrate good matches between our inferred bounds and
measured worst-case costs for heap and stack usage. For time usage
we infer good bounds for one application.  Where we obtain
less tight bounds, this is due to the use of software floating-point libraries.
"
}

% -----------------------------------------------------------------------------

@article{HudakMirani04,
	Acknowledgement = {Nelson H. F. Beebe, University of Utah, Department of Mathematics, 110 LCB, 155 S 1400 E RM 233, Salt Lake City, UT 84112-0090, USA, Tel: +1 801 581 5254, FAX: +1 801 581 4148, e-mail: \path|beebe@math.utah.edu|, \path|beebe@acm.org|, \path|beebe@computer.org| (Internet), URL: \path|http://www.math.utah.edu/{\~}beebe/|},
	Author = {Mirani, Rajiv and Hudak, Paul},
	Bibdate = {Thu Nov 4 08:07:30 MST 2004},
	Bibsource = {http://www.acm.org/pubs/contents/journals/toplas/},
	Coden = {ATPSDT},
	Issn = {0164-0925},
	Journal = {ACM TOPLAS},
	Number = {4},
	Optmonth = jul,
	Pages = {609--651},
	Title = {First-class monadic schedules},
	Volume = {26},
	Year = {2004}}


@article{huda86j
    ,key={hudak}
    ,author={Hudak, P.}
    ,title={Para-functional programming}
    ,journal={IEEE Computer}
    ,volume=19
    ,number=8
    ,month=Aug
    ,year=1986
    ,pages={60-71}
    } 



@inproceedings{X10,
 author = {Philippe Charles and Christian Grothoff and Vijay Saraswat and Christopher Donawa and Allan Kielstra and Kemal Ebcioglu and Christoph von Praun and Vivek Sarkar},
 title = {X10: an object-oriented approach to non-uniform cluster computing},
 booktitle = {Proceedings of OOPSLA '05},
 OPTbooktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference on Object oriented programming, systems, languages, and applications},
 year = {2005},
 isbn = {1-59593-031-0},
 pages = {519--538},
 location = {San Diego, CA, USA},
 doi = {http://doi.acm.org/10.1145/1094811.1094852},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

%%%%%%%% JB references
% Eden Standard Reference, contributions by JB
@ARTICLE{Eden,
  author  =  {R. Loogen and Y. Ortega-Mall\'{e}n and R. {Pe\~{n}a-Mar\'{\i}}},
  title   =  {{Parallel Functional Programming in Eden}},
  journal =  {{Journal of Functional Programming}}, 
  xtitle  =  {{, Special Issue on
              Functional Approaches to High-Performance Parallel Programming}},
  year    =  {2005},
  volume  =  {15},
  number  =  {3},
  pages   =  {431-475},
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% JB authorship:
@InProceedings{TFP11HIPERFIT,
  author = 	 {Jost Berthold and Andrzej Filinski and Fritz Henglein 
                  and {Ken Friis} Larsen and Mogens Steffensen 
                  and Brian Vinter},
  title = 	 {{Functional High Performance Financial IT 
                  -- The HIPERFIT Research Center in Copenhagen}},
  OPTbooktitle = {Trends in Functional Programming (TFP'11) - 12th 
                 International Symposium, Madrid, Spain, May 16-18, 2011,
                 Revised Selected Papers},
  booktitle = {Trends in Functional Programming (TFP'11) --
               Revised Selected Papers},
  OPTbooktitle = {TFP'11},
  OPTlocation =  {Madrid, Spain},
  OPTpages = 	 {},
  year = 	 {2011},
  editor = 	 {{Pe\~{n}a-Mar\'{i}}, Ricardo and Page, Rex},
  OPTnumber = 	 {},
  OPTvolume = 	 {},
  series = 	 {Springer LNCS 7193},
  OPTaddress = 	 {Berlin/Heidelberg},
  OPTpublisher = {Springer},
}

@inproceedings{IFL10Serial,
  author    = {Jost Berthold},
  title     = {{Orthogonal Serialisation for Haskell}},
  note      = {},
  editor    = {Hage, Jurriaan and Marco Morazan},
  OPTbooktitle = {IFL 2010},
  booktitle = {IFL'10, 22nd Symposium on Implementation and Application of Functional Languages},
  pages     = {38--53},
  year      = {2011},
  OPTvolume    = {6647},
  OPTseries    = {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 6647},
  OPTaddress   = {Berlin/Heidelberg},
}
@inproceedings{Eden:Flops10WP,
  author    = {Mischa Dieterle and Jost Berthold and Rita Loogen},
  title     = {{A Skeleton for Distributed Work Pools in Eden}},
  editor    = {Matthias Blume and
               Naoki Kobayashi and
               Germ{\'a}n Vidal},
  OPTbooktitle = {FLOPS 2010},
  booktitle = {FLOPS'10, 10th Fuji International Symposium on 
               Functional and Logic Programming.},
  location  = {Sendai, Japan},
  OPTaddress   = {Berlin/Heidelberg},
  OPTmonth     = {April},
  OPTpublisher = {Springer},
  OPTseries    = {LNCS},
  OPTvolume    = {6009},
  series =  {Springer LNCS 6009},
  pages     = {337-353},
  year      = {2010},
}
@InProceedings{Eden:EUROPAR09GMR,
  author = 	 {Jost Berthold and Mischa Dieterle and Rita Loogen},
  title = 	 {{Implementing Parallel Google Map-Reduce in Eden}},
  OPTbooktitle = {Euro-Par 2009},
  booktitle = {Euro-Par 2009, Parallel Processing},
  pages = 	 {990-1002},
  year = 	 {2009},
  editor = 	 {H. Sips and D. Epema and {H.X.} Lin},
  OPTnumber = 	 {},
  OPTvolume = 	 {5704},
  OPTseries = 	 {LNCS},
  OPTpublisher = {Springer},
  series = 	 {Springer LNCS 5704},
  OPTaddress =   {Heidelberg},
  location = 	 {Delft, Netherlands},
}
@InProceedings{TFP09MCore,
  author = 	 { Aswad,, Mustafa and Trinder,, Phil and {Al Zain},, A. D. and Michaelson,, Greg and Berthold,, Jost },
  title = 	 {{Low Pain vs. No Pain Multicore Haskells}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {Trends in Functional Programming,  10th 
                 International Symposium, Kom\'arno, Slovakia, 2009,
                 Revised Selected Papers (TFP'09)},
  pages = 	 {49--64},
  year = 	 {2010},
  editor = 	 {Zolt\'an Horv\'ath and Vikt\'oria Zs\'ok and Peter Achten and Pieter Koopman},
  location =     {Kom\'arno, Slovakia},
  publisher = {Intellect},
  address = {Exeter},
}
@PhdThesis{JB2008PhD,
  author = 	 {Jost Berthold},
  title = 	 {{Explicit and implicit parallel functional programming: 
                   Concepts and implementation}},
  school = 	 {Philipps-Universit\"at Marburg, Germany},
  year = 	 {2008},
  month = 	 {June},
  note = 	 {\url{http://archiv.ub.uni-marburg.de/diss/z2008/0547/}},
}
% PADL08, Work pools
@InProceedings{Eden:PADL08WP,
  author =       {Jost Berthold and Mischa Dieterle and Rita Loogen and Steffen Priebe},
  title =        {{Hierarchical Master-Worker Skeletons}},
  booktitle =    {PADL'08 --- Practical Aspects of Declarative Languages},
  OPTbooktitle =    {PADL'08},
  editor =       {Paul Hudak and David Warren},
  year =         {2008},
  location =      {San Francisco, USA},
  pages =    {133--152},
  OPTseries =   {LNCS},
  OPTvolume =   {4902},
  OPTpublisher =    {Springer},
  series =   {Springer LNCS 4902},
  OPTaddress =      {Heidelberg},
  note =     {}
}
@InProceedings{ADPNA09MCore,
  author = {Jost Berthold and Simon Marlow 
            and Kevin Hammond and A.D. {Al Zain}},
  title =  {{Comparing and Optimising Parallel Haskell 
            Implementations for Multicore Machines}},
  booktitle = {3rd Int. Workshop on Advanced Distributed 
               and Parallel Network Applications (ADPNA'09)},
  year = {2009},
  editor =  {{Tomoya Enokido et al.}},
  location =  {Vienna, Austria},
  publisher = {IEEE},
  address = {New York},
  note = {(previously presented at IFL'08)},
}
@InProceedings{Eden:IFL06Edi,
  author = 	 {Jost Berthold and Rita Loogen},
  title     = {{Parallel Coordination Made Explicit in a Functional Setting}},
  OPTbooktitle = {IFL'06},
  booktitle = {{IFL'06, 18th Symposium on Implementation and Application of 
                Functional Languages}},
  pages = 	 {73--90},
  year = 	 {2007},
  editor    = {Zolt\'an Horv\'ath and Vikt\'oria Zs\'ok},
  OPTvolume = 	 {4449},
  OPTseries = 	 {LNCS},
  OPTpublisher = {Springer},
  series = 	 {Springer LNCS 4449},
  OPTaddress = 	 {Heidelberg},
  OPTlocation = {Budapest, Hungary},
  note = 	 {(\textbf{awarded best paper} of IFL'06)},
}
@InProceedings{Eden:EUROPAR03,
  author =   {Jost Berthold and Ulrike Klusik and Rita Loogen and Steffen Priebe and Nils Weskamp},
  title =    {{High-level Process Control in Eden}},
  booktitle =    {EuroPar 2003 -- Parallel Processing},
  year =     {2003},
  editor =   {H. Kosch and L. B\"osz\"orm\'enyi 
              and H. Hellwagner},
  OPTvolume =   {2790},
  OPTseries =   {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 2790},
  OPTaddress =  {Heidelberg},
  location = {Klagenfurt, Austria},
}

@InProceedings{BZL08,
  author = 	 {J. Berthold and A. {Al Zain} and H-W. Loidl},
  title = 	 {{Scheduling Light-weight Parallelism in ArTCoP}},
  booktitle =	 {{PADL08: Tenth Intl. Symp. on Practical Aspects of Declarative Languages}},
  year =	 2008,
  address =	 {San Francisco, USA},
  month =	 jan,
  keywords =     {GpH, parallel Haskell},
  url = {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/PADL08.pdf},
  abstract = "
  We present the design and prototype implementation of the scheduling 
  component in ArTCoP (architecture transparent control
  of parallelism), a novel run-time environment (RTE) 
  for parallel execution of high-level languages.
  A key feature of ArTCoP is its support for deep process and memory
  hierarchies, shown in the scheduler by supporting light-weight threads.
  To realise a system with easily exchangeable components, the system
  defines a micro-kernel, providing basic infrastructure, such as 
  garbage collection. All complex RTE operations, including the handling of parallelism,
  are implemented at a separate system level.
  By choosing Concurrent Haskell as high-level system language,
  we obtain a prototype in the form of an executable specification
  that is easier to maintain and more flexible than conventional RTEs.
  We demonstrate the flexibility of this approach
  by presenting implementations of a scheduler for light-weight
  threads in ArTCoP, based on GHC Version 6.6."
}

%%%%%%%% end JB references

@inproceedings{Eden:PADL10Remote,
   author = {Dieterle, Mischa and Horstmeyer, Thomas and Loogen, Rita},
   title = {Skeleton Composition Using Remote Data},
   booktitle = {Practical Aspects of Declarative Languages},
   OPTbooktitle ={{PADL'10}},
   OPTvolume =   {5937},
   OPTseries =   {LNCS},
   OPTpublisher = {Springer},
   series = {Springer LNCS 5937},
   OPTaddress =  {Heidelberg},
   editor = {Carro, Manuel and {Pe\~{n}a-Mar\'{i}}, Ricardo},
   OPTpages = {73-87},
   year = {2010}
}

@book{gammabook,
Author = {Erich Gamma and Richard Helm and Ralph Johnson and John Vlissides},
Publisher = {Addison Wesley},
Title = {Design Patterns : Elements of Reusable Object-Oriented Software},
Year = {1995}}

@book{parallelpatternbook,
 author = {Mattson, Timothy and Sanders, Beverly and Massingill, Berna},
 title = {Patterns for parallel programming},
 year = {2004},
 isbn = {0321228111},
 edition = {First},
 publisher = {Addison-Wesley Professional},
}

@INPROCEEDINGS{marcod:parco:01,
     author = {Danelutto, Marco},
     editor = {Joubert, G. R. and Murli, A. and Peters, F. J. and Vanneschi, Marco},
      title = {On skeletons and design patterns},
  booktitle = {Parallel Computing: Advances and Current Issues (Proc. of Intl. {ParCo} 2001, Naples, Italy)},
       year = {2002},
      pages = {425--432},
  publisher = {Imperial College Press},
date-added={2008-05-11 18:17:38 +0200},
date-modified={2008-05-11 18:18:11 +0200},
}

@techreport{Asanovic:EECS-2006-183,
    Author = {Asanovic, Krste and Bodik, Ras and Catanzaro, Bryan Christopher and Gebis, Joseph James and Husbands, Parry and Keutzer, Kurt and Patterson, David A. and Plishker, William Lester and Shalf, John and Williams, Samuel Webb and Yelick, Katherine A.},
    Title = {The Landscape of Parallel Computing Research: A View from Berkeley},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2006},
    Month = {Dec},
    URL = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-183.html},
    Number = {UCB/EECS-2006-183},
}





@article{muskel:SCPE:07,
        Author = {Marco Aldinucci and Marco Danelutto and Patrizio Dazzi},
        Date-Added = {2007-06-26 01:27:03 +0200},
        Date-Modified = {2009-01-16 23:49:42 +0100},
        Journal = {Scalable Computing: Practice and Experience},
        Month = dec,
        Number = {4},
        Pages = {325--341},
        Title = {Muskel: an expandable skeleton environment},
        OptUrl = {http://www.di.unipi.it/~aldinuc/papers/2007_SCPE_muskel.pdf},
        Volume = {8},
        Year = {2007},
        Bdsk-OptUrl-1 = {http://www.scpe.org/vols/vol08/no4/SCPE_8_4_01.pdf},
        Bdsk-OptUrl-2 = {http://www.di.unipi.it/~aldinuc/papers/2007_SCPE_muskel.pdf}}

@article{Da03JSA,
        Author = {Marco Danelutto},
        Journal = {Journal of Systems Architecture},
        Keywords = {WP3},
        Month = nov,
        Number = {10-11},
        Pages = {399--419},
        Title = {{HPC} the easy way: new technologies for high performance applications deployment},
        OptUrl = {http://www.di.unipi.it/~marcod},
        Volume = {49},
        Year = {2003},
        Bdsk-OptUrl-1 = {http://www.di.unipi.it/~marcod}}

@InProceedings{Clean,
  author = 	 {N�cker, E.G.J.M.H. and Smetsers,  J.E.W. and {van
                  Eekelen}, M.C.J.D.  and  Plasmeijer, M.J.},
  title = 	 {{Concurrent Clean}},
  booktitle = 	 {{PARLE'91 --- Parallel Architectures and Languages Europe}},
  number =	 505,
  series =	 {LNCS},
  year =	 1991,
  publisher =	 {Springer},
  location =	 {Veldhoven, The Netherlands},
  address =      {Berlin/Heidelberg},
  month =	 {June},
  pages =	 {202--219},
  annote =	 {Gives an overview of the language Concurrent Clean (version 0.7) as well
     as of its implementation.}, 
  url =          {ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/noce91-concurrentclean.ps.gz},
  abstractURL =  {ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/noce91-concurrentclean.abs},
  abstract =     "Concurrent Clean is an experimental, lazy, higher-order parallel functional
programming language based on term graph rewriting. An important difference
with other languages is that in Clean graphs are manipulated and not terms.
This can be used by the programmer to control communication and sharing of
computation. Cyclic structures can be defined. Concurrent Clean furthermore
allows to control the (parallel) order of evaluation to make efficient
evaluation possible. With help of sequential annotations the default lazy
evaluation can be locally changed into eager evaluation. The language
enables the definition of partially strict data structures which make a
whole new class of algorithms feasible in a functional language. A powerful
and fast strictness analyser is incorporated in the system. The quality of
the code generated by the Clean compiler has been greatly improved such that
it is one of the best code generators for a lazy functional language. Two
very powerful parallel annotations enable the programmer to define
concurrent functional programs with arbitrary process topologies. Concurrent
Clean is set up in such a way that the efficiency achieved for the
sequential case can largely be maintained for a parallel implementation on
loosely coupled parallel machine architectures."
}

@article{mapreduce,
  author = "Daniele Buono and Marco Danelutto and Silvia Lametti", 
  title = "{Map, reduce and mapreduce, the skeleton way}", 
  journal =  "Procedia Computer Science", 
  volume = 1,
  number = 1, 
  month = may,
  year = 2010,
  pages = "2089--2097", 
  note = "ISSN 1877-0509, DOI: 10.1016/j.procs.2010.04.234"
}

@Misc{ChienTalk,
  title =    {{Parallelism Drives Computing}},
  author =   {Andrew Chien},
  organization = {Intel Research},
  month =    2007,
  year =     jun,
  howpublished = {Talk given at Manycore Computing Workshop},
  documentURL =  {http://science.officeisp.net/ManycoreComputingWorkshop07/Presentations/Andrew%20Chien.pdf}
}

@Misc{FranAllenTalk,
  author =   {Frances E. Allen},
  title =    {{Compiling for Performance --- A Personal Tour}},
  howpublished = {Turing Award Lecture},
  month =    jun,
  year =     2007,
  documentURL =  {http://awards.acm.org/turing/addl_info/vstream/2006/turingaward2006.mov},
}

@Article{Chapel,
  author =   {Bradford L. Chamberlain and David Callahan and Hans P. Zima},
  title =    {{Parallel Programmability and the Chapel Language}},
  journal =      {International Journal of High Performance Computing Applications},
  year =     2007,
  volume =   21,
  number =   3,
  pages =    {291--312},
  month =    aug,
  annote =   {std reference for Chapel},
  documentURL =  {http://www.highproductivity.org/IJHPCA-HPPLM.html}
}

@InProceedings{EarlyChapel,
  author =   {David Callahan and Bradford L. Chamberlain and Hans P. Zima},
  title =    {{The Cascade High Productivity Language}},
  booktitle =    {9th International Workshop on High-Level Parallel Programming Models and Supportive Environments (HIPS 2004)},
  pages =    {52--60},
  year =     2004,
  month =    apr,
  publisher =    {IEEE Computer Society},
  documentURL =  {http://chapel.cs.washington.edu/hips04.html}
}


@InProceedings{CCH08,
  author =   {A. Casas and M. Carro and M. Hermenegildo},
  title =    {{Towards a High-Level Implementation of Execution Primitives for Non-restricted, Independent And-parallelism}},
  booktitle =    {{International Symposium on Practical Aspects of Declarative Languages (PADL'08)}},
  editor =       {David S. Warren and Paul Hudak},
  pages =    {230--247},
  year =     2008,
  OPTvolume =   4902,
  series =   {LNCS 4902},
  address =      {San Francisco (CA), USA},
  month =    jan,
  OPTpublisher =    {Springer-Verlag},
  OPTdocumentURL =  {http://www.clip.dia.fi.upm.es/papers/andprolog-new-padl2008.pdf},
}


@Book{TannenbaumOS,
  author =   {A.S. Tanenbaum},
  title =    {{Modern Operating Systems}},
  publisher =    {Prentice Hall},
  edition =      {Third},
  year =     2008,
  note =     {ISBN 0136006639}
}


@Book{Mach,
  author =   {Eric Sheinbrood},
  title =    {{The Design of the Mach Operating System}},
  publisher =    {Prentice Hall},
  year =     1993,
  OPTnote =     {ISBN 0132045958}
}

@InBook{MapReduceChapter,
  author =   {Jeffrey Dean and Sanjay Ghemawat},
  editor =   {Andy Oram and Greg Wilson},
  title =    {{Beautiful Code}},
  chapter =      {{Distributed Programming with MapReduce}},
  publisher =    {O'Reilly},
  year =     2007,
  note =     {ISBN 0596510047},
  url =          {http://www.oreilly.com/catalog/9780596510046/toc.html},
  abstract = "This chapter describes the design and implementation of mapreduce, a programming system for large-scale data processing problems. MapReduce was developed as a way of simplifying the development of large-scale computations at Google. MapReduce programs are automatically parallelized and executed on a large cluster of commodity machines. The runtime system takes care of the details of partitioning the input data, scheduling the program's execution across a set of machines, handling machine failures, and managing the required intermachine communication. This allows programmers without any experience with parallel and distributed systems to easily utilize the resources of a large distributed system.
Suppose that you have 20 billion documents, and you want to generate a count of how often each unique word occurs in the documents. With an average document size of 20 KB, just reading through the 400 terabytes of data on one machine will take roughly four months. Assuming we were willing to wait that long and that we had a machine with sufficient memory, the code would be relatively simple. (all the examples in this chapter are pseudocode) shows a possible algorithm."
}

@Book{Caliban,
  author =   {Kelly, P.H.J.},
  title =    {{Functional Programming for Loosely-Coupled Multiprocessors}},
  publisher =    {{MIT Press}},
  year =     {1989},
  series =   {Research Monographs in Parallel and Distributed Computing},
  annote =   {parallel functional, Caliban}
}

@PhdThesis{PhD_Taylor,
  author =   {Taylor, F.S.},
  title =    {{Parallel Functional Programming by Partitioning}},
  school =   {Department of Computing},
  year =     1997,
  address =  {Imperial College, London},
  url =          {http://www.lieder.demon.co.uk/thesis/thesis.ps.gz},
  abstract =     "Caliban  is a  declarative  language  which addresses  the  area of  static
distributed memory  parallel computing. It  is an annotation  language that
allows the  programmer to partition  a functional program and  data amongst
the computational  resources av ailable.  It is integrated into  the source
language so that the full power of the host language can be used to express
the partitioning of the program.  Partial evaluation is used to determine a
complete version of the  annotation at compile time. Program transformation
is then  used to make the  parallelism explicit. This  thesis describes the
Caliban  language  and  its  pilot  implementation. It  then  continues  by
presenting     extensions     and     improvements     to     the     basic
language. Implementation techniques for the improved language are discussed
in relation to  an implementation on the Fujitsu  AP1000 distributed memory
multiprocessor computer.  Two application  case studies together  with some
performance results  are presented. Finally, there is  a critical appraisal
of the language and its approach. Caliban has good support for general data
and computation partitioning. It also  aids software reuse with its ability
to abstract  common computational structures into higher  order forms which
are concretised  at compile time  by partial evaluation. However,  there do
remain  some open  issues relating  to evaluation  order  control. Finally,
Caliban  can be  implemented  reasonably efficiently  on standard  parallel
hardware."
}

@TechReport{TreadMarks,
  author =   {Amza, C. and Cox, A.L. and  Dwarkadas, S. and  Keleher, P. and  Lu, H. and  Rajamony, R. and  Yu, W. and  Zwaenepoel, W.},
  title =    {{TreadMarks: Shared Memory Computing on Networks of Workstations}},
  institution =  {Dept.\  of Computer Science},
  year =     1995,
  address =  {Rice Univ.},
  documentURL =  {http://www.cs.rice.edu/~willy/papers/computer95.ps.gz},
}

@Article{StarDust,
  author =   {Cabillic, G. and  Puaut, I.},
  title =    {{Stardust: an Environment for Parallel Programming on Networks of Heterogeneous Workstations}},
  journal =      {J.\ of Parallel and Distributed Computing},
  year =     1997,
  volume =   40,
  number =   1,
  month =    jan,
  documentURL =  {http://www.irisa.fr/solidor/doc/ps97/stardust-jpdc.ps.gz}
}

@PhdThesis{Hamster,
  author =   {Martin Schulz},
  title =    {{Shared Memory Programming on NUMA-based Clusters using a General and Open Hybrid Hardware / Software Approach}},
  school =   {Technical University Munich},
  year =     2001,
  month =    jul,
  documentURL =  {http://www.lrr.in.tum.de/archiv/smile/2001-07-ms-phd.pdf},
}

@TechReport{Millipede,
  author =   {Ayal Itzkovitz and Assaf Schuster},
  title =    {{Distributed Shared Memory: Bridging the Granularity Gap}},
  institution =  {Technion, Israel Institute of Technology},
  year =     1998,
  number =   {CS-0953},
  month =    dec,
  documentURL =  {http://dsl.cs.technion.ac.il/projects/millipede/papers/hot.ps}
}


@InProceedings{Filaments94,
  author =   {Vincent W. Freeh and David K. Lowenthal and Gregory R. Andrews},
  title =    {{Distributed Filaments: Efficient Fine-Grain Parallelism on a Cluster of Workstations}},
  booktitle =    {{Symposium on Operating Systems Design and Implementation}},
  pages =    {201--212},
  year =     1994,
  address =  {Monterey, CA},
  month =    nov,
  documentURL =  {http://www.cs.uga.edu/~dkl/research/papers/df.ps},
}

@phdthesis{goldstein-phd97,
  title = {Lazy Threads Compiler and Runtime Structures for
     Fine-Grained Parallel Programming},
  url = {http://www.cs.cmu.edu/~seth/papers/goldstein-phd97.pdf},
  author = {Goldstein, Seth Copen},
  school = {University of California--Berkeley},
  year = {1997},
  address = {Berkeley, CA},
  keywords = {Lazy Threads,Parallel Computing,Split-C,Threaded
     Abstract Machine (TAM)}
}
@article{goldstein96-jpdc,
  author = {Goldstein, Seth Copen and Schauser, Klaus Erik and Culler,
     David E.},
  title = {Lazy threads: implementing a fast parallel call},
  journal = {Journal of Parallel and Distributed Computing},
  volume = {37},
  number = {1},
  year = {1996},
  pages = {5--20},
  publisher = {Academic Press, Inc.},
  address = {Orlando, FL, USA},
  keywords = {Lazy Threads, Parallel Computing},
  url = {http://www.cs.cmu.edu/~seth/papers/goldstein96-jpdc.pdf},
  abstract = {In this paper, we describe lazy threads, a new approach
     for implementing multithreaded execution models on conventional
     machines. We show how they can implement a parallel call at
     nearly the efficiency of a sequential call. The central idea is
     to specialize the representation of a parallel call so that it
     can execute as a parallel-ready sequential call. This allows
     excess parallelism to degrade into sequential calls with the
     attendant efficient stack management and direct transfer of
     control and data, yet a call that truly needs to execute in
     parallel, gets its own thread of control. The efficiency of lazy
     threads is achieved through a careful attention to storage
     management and a code generation strategy that allows us to
     represent potential parallel work with no overhead.}
}

@InProceedings{KHM89,
  author =   {Kranz, D.A. and {Halstead Jr.}, R.H. and Mohr, E.},
  title =    {{Mul-T: A High-Performance Parallel Lisp}},
  booktitle =    {{PLDI'91 --- Programming Languages Design and
                   Implementation}},
  volume =   {24(7)},
  OPTnumber =    7,
  series =   {SIGPLAN Notices},
  year =     1989,
  address =  {Portland (OR)},
  month  = {June},
  pages =    {81--90},
  annote =   {one of first mentions of lazy futures; uses mostly
                  load-based inlining while developing Mul-T},
  abstract =     "Mul-T is a parallel Lisp system, based on Multilisp's
                 {\tt future} construct, that has been developed to run
                 on an Encore Multimax processor. Mul-T is an extended
                 version of the Yale T system and uses the T system's
                 ORBIT compiler to achieve ``production quality''
                 performance on stock hardware --- about 100 times
                 faster than Multilisp. Mul-T shows that futures can be
                 implemented cheaply enough to be useful in a
                 production-quality system. Mul-T is fully operational,
                 including a user interface that supports managing
                 groups of parallel tasks.",
  keywords =     "Lisp, Futures",
}

@inproceedings{MKH90,
  author =    {Mohr, E. and Kranz, D.A. and {Halstead Jr.}, R.H.},
  title =     {{Lazy Task Creation: A Technique for Increasing the
                Granularity of Parallel Programs}},
  booktitle = {{LFP'90 --- Conference on Lisp and Functional Programming}},
  address =   {Nice, France, June 27--29},
  year =      {1990},
  pages =     {185--197},
  descr =     {plfun,psben,psenv},
  url =       {ftp://crl.dec.com/pub/DEC/CRL/tech-reports/90.7.ps.Z},
  abstract =  "Many parallel algorithms are naturally expressed at a fine level of
granularity, often finer than a MIMD parallel system can exploit
efficiently. Most builders of parallel systems have looked to either the
programmer or a parallelizing compiler to increase the granularity of such
algorithms. In this paper we explore a third approach to the granularity
problem by analyzing two strategies for combining parallel tasks dynamically
at run-time. We reject the simpler load-based inlining method, where tasks are
combined based on dynamic load level, in favor of the safer and more robust
lazy task creation method, where tasks are created only retroactively as
processing resources become available.

These strategies grew out of work on Mul-T, an efficient parallel
implementation of Scheme, but could be used with other languages as well. We
describe our Mul-T implementations of lazy task creation for two contrasting
machines, and present performance statistics which show the method's
effectiveness. Lazy task creation allows efficient execution of naturally
expressed algorithms of a substantially finer grain than possible with
previous parallel Lisp systems.
",
}

@article{MKH91,
  author =    {Mohr, E. and Kranz, D.A. and {Halstead Jr.}, R.H.},
  title =     {{Lazy Task Creation: A Technique for Increasing the
                Granularity of Parallel Programs}},
  journal =   {{IEEE Transactions on Parallel and Distributed Systems}},
  volume =    {2},
  number =    {3},
  pages =     {264--280},
  month =     {July},
  year =      {1991},
  descr =     {plfun,psben,psenv},
  keywords =  {parallel programming languages, load balancing, program partitioning, process migration, parallel Lisp, task management},
  url =       {ftp://cag.lcs.mit.edu/pub/papers/futures.ps.Z},
  abstract =  "Many parallel algorithms are naturally expressed at a fine level of
granularity, often finer than a MIMD parallel system can exploit
efficiently. Most builders of parallel systems have looked to either the
programmer or a parallelizing compiler to increase the granularity of such
algorithms. In this paper we explore a third approach to the granularity
problem by analyzing two strategies for combining parallel tasks
dynamically at run-time. We reject the simpler load-based inlining method,
where tasks are combined based on dynamic load level, in favor of the safer
and more robustlazy task creation method, where tasks are created only
retroactively as processing resources become available. These strategies
grew out of work on Mul-T [15], an efficient parallel implementation of
Scheme, but could be used with other languages as well. We describe our
Mul-T implementations of lazy task creation for two contrasting machines,
and present performance statistics which show the method's
effectiveness. Lazy task creation allows efficient execution of naturally
expressed algorithms of a substantially finer grain than possible with
previous parallel Lisp systems."
}


@Article{Hals85,
  author =       {{Halstead, Jr.}, R.H.},
  title =        {{Multilisp: A Language for Concurrent Symbolic
                 Computation}},
  journal =      toplas,
  volume =       {7},
  number =       {4},
  month =        oct,
  year =         {1985},
  pages =        {501--538},
  abstract =     "Multilisp is a version of the Lisp dialect Scheme
                 extended with constructs for parallel execution. Like
                 Scheme, Multilisp is oriented toward symbolic
                 computation. Unlike some parallel programming
                 languages, Multilisp incorporates constructs for
                 causing side effects and for explicitly introducing
                 parallelism. The potential complexity of dealing with
                 side effects in a parallel context is mitigated by the
                 nature of the parallelism constructs and by support for
                 abstract data types: a recommended Multilisp
                 programming style is presented which, if followed,
                 should lead to highly parallel, easily understandable
                 programs. Multilisp is being implemented on the 32
                 processor {\em Concert\/} multiprocessor; however, it
                 is ultimately intended for use on larger
                 multiprocessors. The current implementation, called
                 {\em Concert Multilisp\/}, is complete enough to run
                 the Multilisp compiler itself and has been run on
                 Concert prototypes including up to eight processors.
                 Concert Multilisp uses novel techniques for task
                 scheduling and garbage collection. The task scheduler
                 helps control excessive resource utilization by means
                 of an unfair scheduling policy; the garbage collector
                 uses a multiprocessor algorithm based on the
                 incremental garbage collector of Baker.",
  keywords =     "Lisp, Futures",
}


@Article{NESLCACM,
  author =   {Guy E. Blelloch},
  title =    {{Programming Parallel Algorithms}},
  journal =      {{Communications of the ACM}},
  year =     1996,
  volume =   39,
  number =   3,
  month =    mar,
  documentURL =  {http://www.cs.cmu.edu/~scandal/cacm.html}
}

@Article{HaCo02,
  author =   {Yasushi Hayashi and Murray Cole},
  title =    {{Static Performance Prediction of Skeletal Programs}},
  journal =      {Parallel Algorithms and Applications},
  year =     2002,
  volume =   17,
  number =   1,
  pages =    {59--84},
  documentURL =  {http://homepages.inf.ed.ac.uk/mic/Pubs/paa-paper.pdf},
}

@Article{BSP,
  author =   {Valiant, L.G.},
  title =    {{A Bridging Model for Parallel Computation}},
  journal =      {{Communications of the ACM}},
  year =     1990,
  volume =   33,
  number =   8,
  pages =    {103--111},
  month =    aug,
  annote =   {std reference for BSP}
}

@TechReport{SkCa93,
  author =   {Skillicorn, D.B. and Cai, W.},
  title =    {{A Cost Calculus for Parallel Functional Programming}},
  institution =  {Queens University},
  year =     {1993},
  number =   {ISSN-0836-0227-93-348},
  address =  {Kingston, Canada},
  url =          {ftp://ftp.qucis.queensu.ca/pub/skill/costcalculusII.ps.Z}
}

@InProceedings{Rang95,
  author =   {Rangaswami, R.},
  title =    {{HOPP --- A Higher-order Parallel Programming Model}},
  booktitle =    {Algorithms and Parallel VLSI Architectures},
  editor =   {Moonen, M. and Cathoor, F.},
  year =     1995,
  publisher =    {Elsevier Science},
  keywords =     {Parallelisation Techniques, Functional Programming, Bird-Meertens Formalism, Higher-Order Functions, Compile-time Analysis, D-M MIMD Machines.},
  url =  {http://www.dcs.ed.ac.uk/home/ror/PAPERS/palgarc.ps.gz},
  abstract =     "The   efficient programming of    parallel computers is   still a difficult
task. This paper focuses on  studying methods for expressing parallelism in
programs without   making   the  programmer   explicitly  responsible   for
parallelism. Parallel programming using a set of useful implicitly-parallel
constructs is  considered. These constructs are   borrowed from FP  and the
Bird-Meertens  approach.  Programs   are  analysed  statically,  using   an
analytical cost model which  selects a cost-effective implementation for  a
chosen architecture. A  brief overview of  the model  is presented  and its
operation is demonstrated with the aid of two case studies."
}

@InProceedings{JCSS97,
  author =       {Jay, C.B. and Cole, M.I. and Sekanina, M. and Steckler, P.},
  title =        {{A Monadic Calculus for Parallel Costing of a Functional
                   Language of Arrays}},
  booktitle =    {{EuroPar97 --- Parallel Processing}},
  OPTeditor =       {C. Lengauer and M. Griebl and S. Gorlatch},
  volume =       {1300},
  series =       LNCS,
  year =         {1997},
  publisher =    S-V,
  month =        {August},
  pages =        {650--661},
}

% already in dfg.bib
@Article{SkTa98-Duplicate, 
  author =   {Skillicorn, D.B. and Talia, D.},
  title =    {{Models and Languages for Parallel Computation}},
  journal =      {ACM Computing Surveys},
  year =     1998,
  month =    {June},
  url =          {http://www.cs.queensu.ca/home/skill/models.ps},
  abstract =     "We  survey many  parallel programming  models  and languages.   We use  six
criteria  to  assess  their  suitability for  realistic  portable  parallel
programming, arguing that an ideal  model should be easy to program, should
have     a     software      development     methodology,     should     be
architecture-independent,   should  be  easy   to  understand,   should  be
efficiently  implementable, and should  provide accurate  information about
the cost  of programs.  We consider programming  models in  six categories,
depending on  the level of abstraction  they provide.  Those  that are very
abstract conceal even  the use of parallelism from  the software. They make
software  easy  to  build and  port,  but  efficiency  is usually  hard  to
achieve. At the other end of the spectrum, low-level models make all of the
messy issues  of parallel  programming explicit (how  many threads,  how to
place   them,  how   to  express   communication,  and   how   to  schedule
communication), so  that software is hard  to build and  not very portable,
but is usually  efficient.  Most recent models are near  the center of this
spectrum,  exploring   the  best  trade-offs   between  expressiveness  and
efficiency. However, there are models that are both abstract and able to be
implemented efficiently, opening the prospect of parallelism as part of the
mainstream of computing, rather than a high-performance backwater."
}

@TechReport{Skil92a,
  author =   {Skillicorn, D.B.},
  title =    {{Parallelism and the Bird-Meertens Formalism}},
  institution =  {Department of Computing and Information Science},
  year =     1992,
  address =  {Queen's University, Kingston, Canada},
  month =    {Apr}
}

@InProceedings{Skil92,
  author =   {Skillicorn, D.B.},
  title =    {{The Bird-Meertens Formalism as a Parallel Model}},
  booktitle =    {{Software for Parallel Computation}},
  year =     1992,
  address =  {Cosenza, Italy},
  month =    jun
}

@Book{Skil94,
  author =   {Skillicorn, D.B.},
  title =    {{Foundations of Parallel Programming}},
  publisher =    CUP,
  year =     1994,
  series =   {Cambridge Intl.\ Series in Parallel Computation}
}

@INPROCEEDINGS{agdkse06,
  AUTHOR = {Alt, M. and  Dumitrescu, C. and  Gorlatch, S. and  Kertesz, A. and  Sipos, G. and Epema, D.H.J.},
  TITLE = {{Towards User-transparent Performance Prediction for Workflows of Higher-Order Components}},
  BOOKTITLE = {{Proceedings of the CoreGRID Integration Workshop}},
  YEAR = {2006},
  OPTEDITOR = {Sergei Gorlatch, Marian Bubak, Thierry Priol},
  PUBLISHER = {CYFRONET Poland},
  OPTNOTE = {ISBN 83-915141-6-1},
  PAGES = {345--356}
}

@PhdThesis{Alt07,
  author =       {Martin Alt},
  title =        {Using Algorithmic Skeletons for Efficient Grid Computing with Predictable Performance},
  school =       {Universit\"at M\"unster},
  year =         2007,
  month =     {July},
  documentURL =  {http://wwwmath.uni-muenster.de/pvs/publikationen/papers/AltDiss.pdf},
}

@misc{grove-performance,
  author = "D.A. Grove and P.D. Coddington",
  title = "A Performance Modeling System for Message-Passing Parallel Programs",
  url = "citeseer.ist.psu.edu/grove01performance.html" }

@ARTICLE{Gorl00,
  AUTHOR = {Sergei Gorlatch and Christian Lengauer},
  TITLE = {Abstraction and performance in the design of parallel programs: overview of the {SAT} approach},
  JOURNAL = {Acta Informatica},
  YEAR = {2000},
  VOLUME = {36},
  NUMBER = {9},
  PAGES = {761--803}
}

@inproceedings{SplitC,
  author = {Culler, D.E. and Dusseau, A. and Goldstein, S.C.
      and Krishnamurthy, A. and Lumetta, S. and
     {von~Eicken}, T. and Yelick, K.},
  title = {{Parallel Programming in Split-C}},
  booktitle = {Proc.\ of the Supercomputing '93 Conference},
  pages = {262--273},
  year = {1993},
  address = {Portland, OR},
  month = {Nov},
  keywords = {Active Messages,Parallel Computing},
  url = {http://www.cs.cmu.edu/~seth/papers/culler-sc93.pdf},
  abstract = "We introduce the Split-C language, a parallel extension of C intended for
 high performance programming on distributed memory multiprocessors, and
 demonstrate the use of the language in optimizing parallel
 programs. Split-C provides a global address space with a clear concept of
 locality and unusual assignment operators. These are used as tools to
 reduce the frequency and cost of remote access. The language allows a
 mixture of shared memory, message passing, and data parallel programming
 styles while providing efficient access to the underlying machine. We
 demonstrate the basic language concepts using regular and irregular
 parallel programs and give performance results for various stages of
 program optimization."
}


@InProceedings{LogP,
  author =   {Culler, D.E. and  Karp, R. and  Patterson, D. and  Sahay, A. and  Schauser, K.E. and  Santos, E. and  Subramonian, R. and {von Eicken}, T.},
  title =    {{LogP: Towards a Realistic Model of Parallel Computation}},
  booktitle =    {Symp.\ on Principles and Practice of Parallel Programming (PPoPP93)},
  year =     1993,
  address =  {San Diego, CA},
  month =    may,
  abstract = "A vast body of theoretical research has focused either on overly
 simplistic models of parallel computation, notably the PRAM, or overly
 speci\256c models that have few representatives in the real world. Both
 kinds of models encourage exploitation of formal loopholes, rather than
 rewarding development of techniques that yield performance across a range
 of current and future parallel machines. This paper offers a new parallel
 machine model, called LogP , that reflects the critical technology
 trends underlying parallel computers. It is intended to serve as a basis
 for developing fast, portable parallel algorithms and to offer guidelines
 to machine designers. Such a model must strike a balance between detail
 and simplicity in order to reveal important bottlenecks without making
 analysis of interesting problems intractable. The model is based on four
 parameters that specify abstractly the computing bandwidth, the
 communication bandwidth, the communication delay, and the efficiency of
 coupling communication and computation. Portable parallel algorithms
 typically adapt to the machine configuration, in terms of these
 parameters. The utility of the model is demonstrated through examples that
 are implemented on the CM-5."
}


@Article{STM-NOT,
  title =   "Transactional Execution of Java Programs",
  author =  "Brian D. Carlstrom and JaeWoong Chung and Hassan Chafi
         and Austen McDonald and Chi Cao Minh and Lance Hammond
         and Christos Kozyrakis and Kunle Olukotun",
  year =    "2096",
  abstract =    "Parallel programming is difficult due to the
         complexity of dealing with conventional lock-based
         synchronization. To simplify parallel programming,
         there have been a number of proposals to support
         transactions directly in hardware and eliminate locks
         completely. Although hardware support for transactions
         has the potential to completely change the way parallel
         programs are written, initially transactions will be
         used to execute existing parallel programs. In this
         paper we investigate the implications of using
         transactions to execute existing parallel Java
         programs. Our results show that transactions can be
         used to support all aspects of Java multithreaded
         programs. Moreover, the conversion of a lock-based
         application into transactions is largely
         straightforward. The performance that these converted
         applications achieve is equal to or sometimes better
         than the original lock-based implementation.",
  bibsource =   "OAI-PMH server at dspace.lib.rochester.edu",
  format =  "223931 bytes",
  language =    "en_US",
  subject = "transactions; java; feedback optimization",
  URL =     "http://hdl.handle.net/1802/2096",
}

@InProceedings{STM,
  author =  {Carlstrom, B.D. and  Chung, J.W. and  Chafi. H.
         and  McDonald, A. and  Minh, C.C. and  Hammond, L.
         and  Kozyrakis, C. and  Olukotun, K.},
  title = 	 {{Transactional Execution of Java Programs}},
  booktitle =	 {{Synchronization and Concurrency in Object-Oriented Languages (SCOOL)}},
  year =	 2005,
  address =	 {San Diego, California, USA},
  month =	 oct,
  URL =     {http://hdl.handle.net/1802/2096},
}

@InProceedings{HaskellSTM,
  author =   {Anthony Discolo, Tim Harris, Simon Marlow, Simon Peyton Jones, and Satnam Singh},
  title =    {{Lock-Free Data Structures using STMs in Haskell}},
  booktitle =    {International Symposium on Functional and Logic Programming (FLOPS'06)},
  year =     2006,
  month =    apr,
  documentURL =  {http://research.microsoft.com/Users/simonpj/papers/stm/lock-free-flops06.pdf}
}

 
@InProceedings{CloudHaskell,
  author = 	 {Jeff Epstein and Andrew P. Black and Simon Peyton-Jones},
  title = 	 {{Towards Haskell in the Cloud}},
  booktitle = {Haskell'10: Haskell Workshop},
  pages = 	 {118--129},
  year = 	 2011,
  address = 	 {Tokio, Japan},
  month = 	 sep,
  publisher = {ACM Press}}

% -----------------------------------------------------------------------------
% HWL: general, basic references

@article{hughes:matters-cj,
	AUTHOR = {Hughes, J.},
	TITLE = {{Why Functional Programming Matters}},
	JOURNAL = {Computer Journal},
	VOLUME = {32},
	NUMBER = {2},
        PAGES = {98--107},
	YEAR = {1989}
}

@Book{Wegner,	
author= {P. Wegner},
title= {{Programming Languages, Information Structures and Machine Organisation}},
publisher = {McGraw-Hill}, 
address = {New York}, 
year={1971}
}

% -----------------------------------------------------------------------------

%
% main bib-file for DFG project application,
%  insert all relevant cited work
%  but perhaps separate own work into own file.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Phil to cross-check these:

@InProceedings{HumeDesign,
author = {Hammond, Kevin and Michaelson, Greg J.},
title = {{Hume: a Domain-Specific Language for Real-Time Embedded Systems}},
booktitle = {{GPCE'03 --- Conf.\ on Generative Programming and Component Engineering}},
publisher = {Springer-Verlag},
series = {LNCS},
year = {2003}
}

@Article{mHaskell,
  title =   "mHaskell: Mobile Computation in a Purely Functional
         Language",
  author =  "Andr\'{e} Rauber Du Bois and Phil W. Trinder and
         Hans-Wolfgang Loidl",
  journal = "J. UCS",
  year =    "2005",
  number =  "7",
  volume =  "11",
  bibdate = "2005-11-14",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/journals/jucs/jucs11.html#BoisTL05",
  pages =   "1234--1254",
  URL =     "http://www.jucs.org/jucs_11_7/mhaskell_mobile_computation_in",
}


@Article{mobskels,
  title =   "Autonomous mobility skeletons",
  author =  "Xiao Yan Deng and Greg Michaelson and Phil W.
         Trinder",
  journal = "Parallel Computing",
  year =    "2006",
  number =  "7-8",
  volume =  "32",
  bibdate = "2007-02-26",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/journals/pc/pc32.html#DengMT06",
  pages =   "463--478",
  URL =     "http://dx.doi.org/10.1016/j.parco.2006.04.002",
}

% surely wrong.
% I understand "Hume Implementation GdH IFL", did you mean Robert's *talk* ?
@inproceedings{HumeImplGdHIFL,
  OPTvolume = {4449},
  author = {Kevin Hammond and Gudmund Grov and Greg J. Michaelson and Andrew Ireland},
  OPTnote = {To appear.},
  series = {LNCS 4449},
  keywords = {hume,embounded},
  booktitle = {18th Intl.\ Symposium on the
               Implementation of Functional Languages (IFL 2006)},
  title = {Low-Level Programming in {H}ume: an Exploration of the {HW-Hume} Level},
  publisher = {Springer},
  year = {2007},
  bibsource = {http://www-fp.cs.st-andrews.ac.uk/hume/papers/bib.shtml?2007}
}

@Article{CPE,
  author =   {Loidl, Hans-Wolfgang and Trinder, Phil W. and Hammond, Kevin and Junaidu, Sahalu B. and Morgan, Richard G. and {Peyton Jones}, Simon L.},
  title =    {{Engineering Parallel Symbolic Programs in GPH}},
  journal =      {Concurrency -- Practice and Experience},
  year =     1999,
  volume =       {11},
  issue =        {12},
  pages =        {701--752},
  url =          {http://www.cee.hw.ac.uk/\~{}dsg/gph/papers/ps/cpe-gph.ps.gz},
}

@InProceedings{ICFP,
  title =   {{Evaluating High-Level Distributed Language Constructs}},
  author =  {Jann H. Nystr\"om and Phil W. Trinder and David J. King},
  year =    {2007},
  booktitle =   {ICFP},
  OPTcrossref =  {},
  OPTkey =   {},
  OPTpages =     {},
  OPTeditor =    {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  address =      {Freiburg, Germany},
  month =    {September},
  OPTorganization = {},
  OPTpublisher = {},
  note =     {(preprint available online)},
  OPTannote =    {}
}

@Article{TPDS,
  title =   {Evaluating a High-Level Parallel Language (GpH) for Computational GRIDs},
  author =  {Abyd D. Al Zain and Phil W. Trinder and Greg J. Michaelson and Hans-Wolfgang Loidl},
  journal = {IEEE Trans. Parallel Distrib. Syst},
  year =    {2007},
  OPTnumber =   {},
  OPTvolume =   {},
  OPTpages =    {},
  note =    {(accepted for publication)},
}

%%%%%%%%%%%%%%%%%%%
% cited here and there, label PLDI ==> label GpH
@InProceedings{gph,
  author =       {Trinder, Phil W.  and Hammond, Kevin and {Mattson Jr.}, James S. and Partridge, Andrew S. and {Peyton Jones}, Simon L.},
  title =        {{GUM: a Portable Parallel Implementation of Haskell}},
  booktitle =    {{PLDI'96}},
  OPTmonth =        may,
  year =         {1996},
  OPTaddress =      {Philadephia, USA},
  OPTpages =        {78--88},
  publisher = {ACM Press},
  OPTnote =      {\texttt{\small http://www.cee.hw.ac.uk/\~{}dsg/gph/papers/ps/gum.ps.gz}},
}

%%%%%%%%%%%%%%%%%%%
% cited in rel.work section, pls. do not change label!
@InProceedings{GdHIFL,
author ={Pointon, Robert F. and Trinder, Phil W. and Loidl, Hans-Wolfgang},
title = {{The Design and Implementation of Glasgow distributed Haskell}},
booktitle= {{IFL'00}},
address={Aachen, Germany},
month = sep,
year= {2000},
annote = {std Gdh ref},
pages = {101--116},
series = {LNCS 2011},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (other) related work references:

@article{NASbenchmarks,
    author = "D. H. Bailey and E. Barszcz and J. T. Barton and D. S. Browning and R. L. Carter and D. Dagum and R. A. Fatoohi and P. O. Frederickson and T. A. Lasinski and R. S. Schreiber and H. D. Simon and V. Venkatakrishnan and S. K. Weeratunga",
    title = "The NAS Parallel Benchmarks",
    journal = "The International Journal of Supercomputer Applications",
    volume = "5",
    number = "3",
    month = "Fall",
    pages = "63--73",
    year = "1991",
    url = "citeseer.ist.psu.edu/bailey95nas.html"
}


@TechReport{NASbenchmarks-,
  author =   {},
  title =    {},
  institution =  {},
  year =     {},
  OPTkey =   {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  OPTnote =      {},
  OPTannote =    {}
}

% gorlatch on send/receive:
@article{Gorlatch:SendReceive04,
 author = {Sergei Gorlatch},
 title = {Send-receive considered harmful: Myths and realities of message passing},
 journal = {ACM TOPLAS},
 volume = {26},
 number = {1},
 year = {2004},
 OPTissn = {0164-0925},
 pages = {47--56},
 doi = {http://doi.acm.org/10.1145/963778.963780},
 publisher = {ACM},
 address = {New York, USA},
 }

@InProceedings{ManticoreReport,
  author =   {Matthew Fluet and Nic Ford and Mike Rainey and John Reppy and Adam Shaw and Yingqi Xiao},
  title =    {{Status Report: The Manticore Project}},
  OPTcrossref =  {},
  OPTkey =   {},
  booktitle = {Proceedings of the ACM SIGPLAN Workshop on ML},
  OPTpages =     {},
  year =     {2007},
  OPTeditor =    {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  address =      {Freiburg, Germany},
  month =    {October},
  OPTorganization = {},
  OPTpublisher = {},
  note =     {(available online)},
  OPTannote =    {}
}

@Article{SAC,
  author = 	 {Sven-Bodo Scholz},
  title = 	 {{Single Assignment C -- Efficient Support for High-level Array Operations in a Functional Setting}},
  journal = 	 {Journal of Functional Programming},
  year = 	 2003,
  volume = 	 13,
  number = 	 6,
  pages = 	 {1005--1059},
  url =          {http://www.sac-home.org/publications/sac-overview-jfp-03.pdf},
  annote = 	 {This paper is the most comprehensive description of the language design of SAC, including its type system and the major compilation techniques developed in its context. It is the primary source of information for studying SAC.},
  abstract = "This paper presents a novel approach for integrating arrays with access time O(1) into
functional languages. It introduces n-dimensional arrays combined with a type system
that supports hierarchies of array types with varying shape information as well as a shapeinvariant
form of array comprehension called with-loop. Together, these constructs allow
for a programming style similar to that of array programming languages such as Apl.
We use Single Assignment C (SaC for short), a functional C-variant aimed at numerical
applications that is based on the proposed design, to demonstrate that programs written in
that style can be compiled to code whose runtime performance is competitive with that of
hand-optimized Fortran programs. However, essential prerequisites for such performance
figures are a shape inference system integrated in the type system as well as several highlevel
optimizations. Most notably of these is With Loop Folding, an optimization technique
for eliminating intermediate arrays."
}

@InProceedings{DPH,
  author = 	 {S. {Peyton Jones} and R. Leshchinskiy and G. Keller and M. Chakravarty},
  title = 	 {{Harnessing the Multicores: Nested Data Parallelism in Haskell}},
  booktitle = {{FSTTCS 2008: Foundations of Software Tech.\ and Theor.\ Computer Science}},
  year = 	 2008,
  OPTaddress = 	 {IBFI, Schloss Dagstuhl},
  url = {http://research.microsoft.com/~simonpj/papers/ndp/fsttcs2008.pdf},
  abstract = "If you want to program a parallel computer, a purely functional language like Haskell
is a promising starting point. Since the language is pure, it is by-default safe for parallel evalua-
tion, whereas imperative languages are by-default unsafe. But that doesn't make it easy! Indeed it
has proved quite difficult to get robust, scalable performance increases through parallel functional
programming, especially as the number of processors increases.
A particularly promising and well-studied approach to employing large numbers of processors is
data parallelism. Blelloch's pioneering work on NESL showed that it was possible to combine a
rather flexible programming model (nested data parallelism) with a fast, scalable execution model
(flat data parallelism). In this paper we describe Data Parallel Haskell, which embodies nested
data parallelism in a modern, general-purpose language, implemented in a state-of-the-art compiler,
GHC. We focus particularly on the vectorisation transformation, which transforms nested to flat data
parallelism."
}

@Misc{intelMulti-core,
  OPTkey =   {},
  author =   {Intel Corp.},
  title =    {{Tera-scale Computing}},
  howpublished = {Research initiative},
  OPTmonth =     {},
  OPTyear =      {},
  note =     {Information at
                  \texttt{\small http://www.intel.com/research/platform/terascale/}},
  OPTannote =    {}
}

@Misc{intelTBB,
  OPTkey =   {},
  author =   {Intel Corp.},
  title =    {{Threading Analysis Tools}},
  howpublished = {Product Line },
  OPTmonth =     {},
  OPTyear =      {},
  note =     {Information at
                  \texttt{\small http://www.intel.com/cd/software/products/asmo-na/eng/threading//}},
  OPTannote =    {}
}

@Book{ParPatterns,
  author = 	 {T. G. Mattson and B. A. Sanders and B. L. Massingill},
  title = 	 {{Patterns for Parallel Programming}},
  publisher = 	 {Addison-Wesley},
  year = 	 2004,
  note = 	 {ISBN 978-0321228116}}


@Book{ParPatternsBook,
  author = 	 {Michael McCool and James Reinders and Arch Robison},
  title = 	 {{Structured Parallel Programming}},
  publisher = 	 {Morgan Kaufmann Publishers},
  year = 	 2012,
  note = 	 {ISBN: 9780124159938}}

@Book{TPL,
  author = 	 {C. Campbell and R. Johnson and A. Miller and S. Toub},
  title = 	 {{Parallel Programming with Microsoft .NET --- Design Patterns for Decomposition and Coordination on Multicore Architectures}},
  publisher = 	 {Microsoft Press},
  year = 	 2010,
  month = 	 aug,
  isbn =         {0735651590},
  url =          {http://msdn.microsoft.com/en-us/library/ff963553.aspx},
  abstract = "The CPU meter shows the problem. One core is running at 100 percent, but all the other cores are idle. Your application is CPU-bound, but you are using only a fraction of the computing power of your multicore system. What next?

The answer, in a nutshell, is parallel programming. Where you once would have written the kind of sequential code that is familiar to all programmers, you now fi nd that this no longer meets your performance goals. To use your system's CPU resources effi ciently, you need to split your application into pieces that can run at the same time.

This is easier said than done. Parallel programming has a reputation for being the domain of experts and a minefield of subtle, hard-to-reproduce software defects. Everyone seems to have a favorite story about a parallel program that did not behave as expected because of a mysterious bug.

These stories should inspire a healthy respect for the diffi culty of the problems you face in writing your own parallel programs. Fortunately, help has arrived. Microsoft .NET Framework 4 introduces a new programming model for parallelism that signifi cantly simplifies the job. Behind the scenes are supporting libraries with sophisticated algorithms that dynamically distribute computations on multicore architectures.

Proven design patterns are another source of help. Parallel Programming with Microsoft .NET introduces you to the most important and frequently used patterns of parallel programming and gives executable code samples for them, using the Task Parallel Library (TPL) and Parallel LINQ (PLINQ)."
}


@Misc{IntelClusterOpenMP,
  OPTkey =   {},
  author =   {Jay P. Hoeflinger},
  title =    {{Extending OpenMP to Clusters}},
  howpublished = {Intel White Paper},
  OPTmonth =     {},
  year =     {2006},
  note =     {\texttt{\small http://www.intel.com/cd/software/products/asmo-na/eng/285865.htm}},
  OldNote =   {\texttt{\small http://www.intel.com/cd/software/products/asmo-na/eng/329076.htm}},
  OPTannote =    {}
}

% many slides, no intro-overview papers, from sun: fortress
@Misc{Fortress,
  OPTkey =   {},
  author =   {Sun},
  title =    {{The Fortress Language}},
  howpublished = {Talks and Posters},
  OPTmonth =     {},
  OPTyear =      {},
  note =     {available at
                  \texttt{\small http://research.sun.com/projects/plrg}},
  OPTannote =    {}
}

@Manual{PVM,
  key =      {PVM},
  title =    {{Parallel Virtual Machine Reference Manual, Version 3.2}},
  OPTauthor =    {Oak Ridge National Laboratory},
  address =  {University of Tennessee},
  month =    {August},
  year =     1993
}

@TechReport{MPI,
  key =      {MPI},
  author = {{MPI Forum}},
  title = {{MPI 2: Extensions to the Message-Passing Interface}},
  institution = {University of Tennessee, Knoxville},
  OPTmonth = Jul,
  year ={1997}
}

@InProceedings{Peng07,
  author =   {{Peng Li} and Tolmach, A. and Marlow, S. and {Peyton Jones}, S.},
  title =    {{Lightweight Concurrency Primitives for GHC}},
  booktitle =    {Haskell Workshop},
  year =     2007,
  address =  {Freiburg, Germany},
  OPTmonth =     {Sept.},
  pages =        {107--118},
  url =          {http://research.microsoft.com/Users/simonpj/papers/lw-conc/lw-conc.pdf}
}



@PhdThesis{PhDPengLi,
  author =   {{Peng Li}},
  title =    {{Programmable Concurrency in a Pure and Lazy Language}},
  school =   {Department of Computer and Information Science},
  year =     2008,
  address =      {Univ.\ of Pennsylvania },
  month =    aug,
  url = {http://www.cis.upenn.edu/~lipeng/homepage/papers/dissertation.pdf},
}

% JB: Duplicate, more information in the other
@inproceedings{GHCpaper-,
author = {Simon L. {Peyton Jones} and Cordy Hall and Kevin Hammond and Will Partain and Phil Wadler},
title = {{The Glasgow Haskell Compiler: A Technical Overview}},
booktitle = {{Joint Framework for Information Technology Technical Conference, Keele}},
year = 1993
}

@Misc{GHC,
  key =   {GHC},
  author =   {{The GHC Developer Team}},
  title =    {{The Glasgow Haskell Compiler}},
  howpublished = {\url{http://www.haskell.org/ghc}},
  OPTmonth =     {},
  OPTyear =      {},
  note =      {\jbcomment{Reference to SIGPLAN SW price 2011 would be good}},
  OPTannote =    {}
}

@Article{PMLSold,
  author =   {Michaelson, Greg and Scaife, Norman and Bristow, Paul and King, Peter},
  title =    {{Nested Algorithmic Skeletons from Higher Order Functions}},
  journal =  {{Parallel Algorithms and Appl.}},
  year =     2001,
  Xnote =     {Special Issue on High Level Models and Languages for Parallel Processing.},
  volume =   16,
  pages =    {181--206},
}


@Article{PMLS,
  author = 	 {N. Scaife and G. Michaelson and S. Horiguchi},
  title = 	 {{Parallel Standard ML with Skeletons}},
  journal = 	 {Scaleable Computing Practise and Experience},
  year = 	 2006,
  volume = 	 6,
  number = 	 4}

@InProceedings{Eden:IFL00,
  author =   {Klusik, U. and Loogen, R. and Priebe, S. and Rubio, F.},
  title =    {{Implementation Skeletons in Eden --- Low-Effort Parallel Programming}},
  booktitle =    {{IFL'00 --- Intl.\ Workshop on the Implementation of Functional Languages}},
  address =      {Aachen, Germany},
  month =        Sep,
  year =         2000,
  publisher =    {Springer},
  OPTyear =         2001,
  pages =    {71--88},
  series =       {LNCS 2011},
  OPTvolume =       {2011},
  OPTnote =  {}
}

@InCollection{Eden:SkeletonBookChapter02,
  author =   {Loogen, R. and {Ortega-Mall\'{e}n}, Y. and {Pe\~{n}a}, R. and Priebe, S.
                and Rubio, F.},
  title =    {{Parallelism Abstractions in Eden}},
  booktitle =    {{Patterns and Skeletons for Parallel and Distributed Computing}},
  editor = {F. A. Rabhi, S. Gorlatch},
  chapter =      {2},
  publisher =    {Springer},
  year =     {2003},
  OPTkey =   {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  OPTtype =      {},
  OPTaddress =   {},
  OPTedition =   {},
  OPTmonth =     {},
  OPTpages =     {},
  OPTnote =      {},
  OPTannote =    {}
}

@Book{SkeletonBook,
  title =  {{Patterns and Skeletons for Parallel and Distributed Computing}},
  editor = {Fethi A. Rabhi and Sergej Gorlatch},
  year =         {2002},
  publisher = {Springer},
}

@Article{HDCSkel,
  author =   {Herrmann, C.A.},
  title =    {{Generating Message-passing Programs from Abstract Specifications by Partial Evaluation}},
  journal =      {{Parallel Processing Letters}},
  year =     2005,
  volume =   15,
  number =   3,
  pages =    {305--320}
}

@MISC{eSkel,
  author =       "Anne Benoit and Murray Cole",
  title =        "{eSkel -- The Edinburgh Skeleton Library}",
  year =         "University of Edinburgh 2002",
  note =       "{\small\tt http://homepages.inf.ed.ac.uk/abenoit1/eSkel/}",
}

@MISC{KuchenMPRLibrary,
  author =       "Herbert Kuchen",
  title =        "{The M\"unster Skeleton Library Muesli}",
  year =         "{University of M\"unster 2002}",
  note =       "{\small\tt http://danae.uni-muenster.de/lehre/kuchen/Skeletons/}",
}

@InProceedings{Kuchen05,
  title =   "Scalable Farms",
  author =  "Michael Poldner and Herbert Kuchen",
  bibdate = "2006-11-20",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/parco/parco2005.html#PoldnerK05",
  OPTbooktitle= "Parallel Computing: Current \& Future Issues of
         High-End Computing, Proceedings of the International
         Conference ParCo 2005, 13-16 September 2005, Department
         of Computer Architecture, University of Malaga, Spain",
  booktitle =   "Parallel Computing: Current \& Future Issues of
         High-End Computing, Proceedings of ParCo 2005",
  address =     "Malaga, Spain",
  publisher =   "Central Institute for Applied Mathematics, J{\"u}lich,
         Germany",
  year =    "2005",
  editor =  "Gerhard R. Joubert and Wolfgang E. Nagel and Frans J.
         Peters and Oscar G. Plata and P. Tirado and Emilio L.
         Zapata",
  ISBN =    "3-00-017352-8",
  OPTpages =    "795--802",
  series =  "NIC Series, vol.33",
  OPTvolume =   "33",
  OPTseries =   "John von Neumann Institute for Computing Series",
}




@ARTICLE{Kalinowski05b,
  AUTHOR =       "Eva Kalinowski and W\l{}adys\l{}aw Gluza",
  TITLE =        "{Evaluation of High Order Terms for the Hubbard Model in the Strong-coupling Limit}",
  JOURNAL =      "submitted to Physical Review B",
  XYEAR =         "2005",
  NOTE =         "10 pages (under revision)",
}

@ARTICLE{Kalinowski05a,
  AUTHOR =       {Nils Bl\"umer and  Eva Kalinowski},
  TITLE =        {Mott insulator: Tenth-order perturbation theory extended to infinite order using a quantum Monte Carlo scheme},
  JOURNAL =      {Physical Review B},
  YEAR =         {2005},
  Volume = 71,
  Number = 19,
  NOTE =         {195102 (5)},
}

@PHDTHESIS{KalinowskiThesis,
  AUTHOR =       "Eva Kalinowski",
  TITLE =        "Mott-Hubbard Isolator in hoher Dimension",
  SCHOOL =       "Philipps-Universitaet Marburg",
  YEAR =         "2002",
}

@InProceedings{GHC-SMP,
  title =   "Haskell on a shared-memory multiprocessor",
  author =  "Tim Harris and Simon Marlow and Simon L. Peyton
         Jones",
  bibdate = "2007-10-31",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/haskell/haskell2005.html#HarrisMJ05",
  booktitle =   "Proceedings of the {ACM} {SIGPLAN} Workshop on
         Haskell, Haskell 2005, Tallinn, Estonia, September 30,
         2005",
  publisher =   "ACM",
  year =    "2005",
  editor =  "Daan Leijen",
  ISBN =    "1-59593-071-X",
  pages =   "49--61",
  URL =     "http://doi.acm.org/10.1145/1088348.1088354",
}

@InProceedings{HarrisICFP07,
  title =   "Feedback directed implicit parallelism",
  author =  "Tim Harris and Satnam Singh",
  bibdate = "2007-11-06",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/icfp/icfp2007.html#HarrisS07",
  booktitle =   "Proceedings of the 12th {ACM} {SIGPLAN} International
         Conference on Functional Programming, {ICFP} 2007,
         Freiburg, Germany, October 1-3, 2007",
  publisher =   "ACM",
  year =    "2007",
  editor =  "Ralf Hinze and Norman Ramsey",
  ISBN =    "978-1-59593-815-2",
  pages =   "251--264",
  URL =     "http://doi.acm.org/10.1145/1291151.1291192",
}


@Book{Blel90,
  author =   {Guy Blelloch},
  title =    {{Vector Models for Data-Parallel Computing}},
  publisher =    {MIT Press},
  year =     1990
}

@Misc{HPF,
  OPTkey =   {},
  author =   "Chuck Koelbel",
  title =    {{High Performance Fortran}},
  howpublished = {Website \texttt{\small http://hpff.rice.edu/}},
  OPTmonth =     {},
  OPTyear =      {},
  OPTnote =      {},
  OPTannote =    {}
}


@inproceedings{Nikola,
	Address = {New York},
	Author = {Mainland, Geoffrey and Morrisett, Greg},
	Booktitle = {Haskell'10, Proceedings of the third ACM SIGPLAN Symposium on Haskell},
	Optacmid = {1863533},
	Optdoi = {http://doi.acm.org/10.1145/1863523.1863533},
	Optisbn = {978-1-4503-0252-4},
	Optkeywords = {cuda, gpu, meta programming},
	Optlocation = {Baltimore, Maryland, USA},
	Optnumpages = {12},
	Optseries = {Haskell '10},
	Opturl = {http://doi.acm.org/10.1145/1863523.1863533},
	Pages = {67--78},
	Publisher = {ACM},
	Title = {Nikola: embedding compiled {GPU} functions in {H}askell},
	Year = {2010}}

@inproceedings{ArrayAccelerate,
	Address = {New York},
	Author = {Chakravarty, M. and Keller, G. and Lee, S. and McDonell, T. and Grover, V.},
	Booktitle = {DAMP'11: Declarative Aspects of Multicore Programming},
	Location = {Austin, USA},
	Optacmid = {1926358},
	Optdoi = {http://doi.acm.org/10.1145/1926354.1926358},
	Optisbn = {978-1-4503-0486-3},
	Optkeywords = {arrays, data parallelism, dynamic compilation, gpgpu, haskell, skeletons},
	Optnumpages = {12},
	Optseries = {DAMP '11},
	Opturl = {http://doi.acm.org/10.1145/1926354.1926358},
	Pages = {3--14},
	Publisher = {ACM},
	Title = {Accelerating {H}askell array codes with multicore {GPUs}},
	Year = {2011}}

@inproceedings{Keller10Repa,
	Address = {New York},
	Author = {Keller, Gabriele and Chakravarty, Manuel M.T. and Leshchinskiy, Roman and Peyton Jones, Simon and Lippmeier, Ben},
	Booktitle = {{ICFP'10, Proceedings of the 15th ACM SIGPLAN International Conference on Functional Programming}},
	Location = {Baltimore, Maryland, USA},
	Optacmid = {1863582},
	Optdoi = {http://doi.acm.org/10.1145/1863543.1863582},
	Optisbn = {978-1-60558-794-3},
	Optkeywords = {arrays, data parallelism, haskell},
	Optnumpages = {12},
	Optseries = {ICFP '10},
	Opturl = {http://doi.acm.org/10.1145/1863543.1863582},
	Pages = {261--272},
	Publisher = {ACM},
	Title = {Regular, shape-polymorphic, parallel arrays in {H}askell},
	Year = {2010}}


@InProceedings{DPHstatus,
  title =   "Data Parallel Haskell: a status report",
  author =  "Manuel M.T. Chakravarty and Roman Leshchinskiy and Simon L. {Peyton Jones} and Gabriele Keller and Simon Marlow",
  booktitle =   "Proceedings of DAMP 2007: Workshop on Declarative Aspects of Multicore Programming",
  publisher =   "ACM",
  year =    "2007",
  pages =   "10--18",
  URL =     "http://www.cse.unsw.edu.au/\~{}chak/papers/CLPKM07.html",
}



@InProceedings{nepal,
  title =   "NEPAL -- Nested Data-Parallelism in Haskell",
  author =  "Manuel M.T. Chakravarty and Gabriele Keller and Roman Leshchinskiy and Wolf Pfannenstiel",
  booktitle =   "Euro-Par 2001: Parallel Processing",
  publisher =   "Springer LNCS 2150",
  year =    "2001",
  pages =   "524--534",
  URL =     "http://www.cse.unsw.edu.au/\~{}chak/papers/CKLP01.html",
}

@ARTICLE{AbstractMachines,
  author =       {Diehl, S. and Hartel, P.H. and Sestoft, P.},
  title =        {{Abstract Machines for Programming Language Implementation}},
  journal =      {Future Generation Computer Systems},
  year =         {2000},
  volume =       {16},
  number =       {7},
  pages =        {739--751},
}

@article{ICFP08,
  author =   {Jost, S. and  Hammond, K. and  Loidl, H-W. and  Hofmann, M.},
  title =    {{Generic Amortised Resource Analysis for Higher-Order Functional Programs}},
  journal =  {{Higher-order and Symbolic Computation}},
  year =     2009,
  note =     {In preparation}
}


@TechReport{DaAl08,
  author =   {Danelutto, M. and Aldinucci, M.},
  title =    {{Towards Hierarchical Management of Autonomic Components: a Case Study}},
  institution =  {Dept of Computer Science},
  year =     2008,
  type =     {CoreGRID Technical Report},
  number =   {TR-0127},
  address =  {Univ of Pisa},
  month =    mar
}

@Article{XFEM,
  author =   {Gerstenberger, A. and Wall, W.A.},
  title =    {An extended finite element method/Lagrange multiplier based approach for fluid-structure interaction},
  journal =      {{Computer Methods in Applied Mechanics and Engineering}},
  year =     2008,
  volume =   197,
  number =   {19--20},
  pages =    {1699--1714},
  month =    mar
}

@Article{journals/jfp/Hofmann99,
  title =   "Semantics of Linear/Modal Lambda Calculus",
  author =  "Martin Hofmann",
  journal = "J. Funct. Program",
  year =    "1999",
  number =  "3",
  volume =  "9",
  bibdate = "2004-03-19",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/journals/jfp/jfp9.html#Hofmann99",
  pages =   "247--277",
}

@InProceedings{conf/fsttcs/DaxHL06,
  title =   "A Proof System for the Linear Time {$\mu$}-Calculus",
  author =  "Christian Dax and Martin Hofmann and Martin Lange",
  bibdate = "2006-12-04",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/fsttcs/fsttcs2006.html#DaxHL06",
  booktitle =   "FSTTCS",
  booktitle =   "{FSTTCS} 2006: Foundations of Software Technology and
         Theoretical Computer Science, 26th International
         Conference, Kolkata, India, December 13-15, 2006,
         Proceedings",
  publisher =   "Springer",
  year =    "2006",
  volume =  "4337",
  editor =  "S. Arun-Kumar and Naveen Garg",
  ISBN =    "3-540-49994-6",
  pages =   "273--284",
  series =  "Lecture Notes in Computer Science",
  URL =     "http://dx.doi.org/10.1007/11944836_26",
}


@MISC{Sundararajan06towardsparallel,
    author = {Elankovan Sundararajan and Aaron Harwood},
    title = {Towards Parallel Computing on the Internet: Applications, Architectures, Models and Programming Tools Contents},
    year = {2006}
}

@InProceedings{PRAM,
  author =   {Fortune, S. and Wyllie, J.},
  title =    {{Parallelism in Random Access Machines}},
  booktitle =    {{Symp.\ on Theory of Computing}},
  pages =    {114--118},
  year =     1978
}

@Article{LPRAM,
  author =   {Aggarwal, A. and Chandra, A.K. and Snir, M.},
  title =    {{Communication Complexity of PRAMs}},
  journal =      {J.\ of Theoretical Computer Science},
  year =     1990,
  volume =   71,
  number =   1,
  pages =    {3--28},
  month =    mar,
 doi = {http://dx.doi.org/10.1016/0304-3975(90)90188-N},
 publisher = {Elsevier Science Publishers Ltd.},
 address = {Essex, UK},
}

@InProceedings{BPRAM,
  author =   {Aggarwal, A. and Chandra, A.K. and Snir, M.},
  title =    {{On Communication Latency of PRAM}},
  booktitle =    {{Symp.\ on Parallel Algorithms and Architectures}},
  pages =    {11--21},
  year =     1989
}


@Article{HPRAM,
  author =   {Heywood, T.H. and Ranka, S.},
  title =    {{A Practical Hierarchical Model of Parallel Computation I: the Model}},
  journal =      {J.\ of Parallel and Distributed Computing},
  year =     1992,
  volume =   16,
  pages =    {212--231}
}

@phdthesis{144743,
 author = {Todd Hervey Heywood},
 title = {A practical hierarchical model of parallel computation},
 year = {1992},
 order_no = {UMI Order No. GAX92-14375},
 publisher = {Syracuse University},
 address = {Syracuse, NY, USA},
 }

@article{HetLogGP,
    author = {Bosque, J.L. and  Pastor, L.},
    title = {{A Parallel Computational Model for Heterogeneous Clusters}},
    journal = {IEEE Trans. Parallel Distrib. Syst},
    year = 2006,
    volume = 17,
    number = 12,
}

@article{PHMM,
    author = {Vitter, J.S and Shriver, E.A.M},
    title = {{Algorithms for Parallel Memory II: Hierarchical Multilevel Memories}},
    journal = {Algorithmica},
    year = {1994},
    volume = {12},
    pages = {148--169},
}

@article{CTA,
  author =   {Snyder, L.},
  title =    {{Type Architectures, Shared Memory, and the Corollary of Modest Potential}},
  journal =      {Ann.\ Rev.\ Comp.\ Sci.},
  year =     1986,
  pages =    {289--317}
}

@Article{UMH,
  author =   {Alpern, B. and Carter, L. and Feig, E. and Selker, T.},
  title =    {{The Uniform Memory Hierarchy Model of Computation}},
  journal =      {Algorithmica},
  year =     1994,
  volume =   12,
  number =   {2--3},
  pages =    {72--109}
}

@INPROCEEDINGS{PMH,
    author = {Alpern, B. and  Carter, L. and  Ferrante, J.},
    title = {{Modeling Parallel Computers as Memory Hierarchies}},
    booktitle = {{Conference on Programming Models for Massively Parallel Computers}},
    year = {1993},
    month = sep,
    pages = {116--123},
    publisher = {IEEE Computer Society Press}
}

@InProceedings{LogP-PMH_NOT,
  author =   {Li, Z. and Mills, J.H. and Reif, P.H.},
  title =    {{Models and Resource Metrics for Parallel and Distributed Computation}},
  booktitle =    {{Intl. Conf.\ on System Sciences}},
  pages =    {51--60},
  year =     1995
}



@INPROCEEDINGS{LogP-PMH,
    author = {Zhiyong Li and Peter H. Mills and John H. Reif},
    title = {Models and resource metrics for parallel and distributed computation},
    booktitle = {HICSS'95: Proceedings of the 28th Hawaii International Conference on System Sciences},
    year = {1995},
    pages = {133--143},
    isbn = {0-8186-6935-7},
    publisher = {IEEE Computer Society},
    address = {Washington, DC, USA},
}

@InProceedings{ModelsSurvey,
  author =   {Maggs, B.M and Matheson, L.R. and Tarjan, R.E.},
  title =    {{Models of Parallel Computation: A Survey and Synthesis}},
  booktitle = {HICSS'95: Proceedings of the 28th Hawaii International Conference on System Sciences},
  year = {1995},
  isbn = {0-8186-6935-7},
  pages = {61--70},
  publisher = {IEEE Computer Society},
  address = {Washington, DC, USA},
}

@INPROCEEDINGS{Hambrusch96modelsfor,
    author = {Susanne E. Hambrusch},
    title = {Models for parallel computation},
    booktitle = {In ICPP Workshop},
    year = {1996},
    pages = {92--95}
}


@Article{MulticoreRevolution,
  author =   {Herlihy, M. and Luchangco, V.},
  title =    {{Distributed Computing and the Multicore Revolution}},
  journal =      {ACM SIGACT News},
  year =     2008,
  volume =   39,
  number =   1,
  pages =    {62--72},
  month =    mar}

@Book{fosterbook,
  Author         = {Ian Foster},
  Title          = {Designing and Building Parallel Programs: Concepts and
                   Tools for Parallel Software Engineering},
  Publisher      = {Addison Wesley},
  year           = 1995
}

@InProceedings{MapReduceOSDI,
  author =   {Jeffrey Dean and Sanjay Ghemawat},
  title =    {MapReduce: simplified data processing on large clusters},
  booktitle = {{Symposium on Operating System Design and Implementation (OSDI'04)}},
  year =     2004,
  address =      {San Francisco},
  month =    dec}

@Misc{ca-science-project,
  key =      {SCIEnce},
  OPTauthor =    {},
  title =    {{{S}ymbolic {C}omputation {I}nfrastructure for {E}urope, EU Framework VI project}},
  howpublished = {\texttt{http://www.sym\-bo\-lic-compu\-ta\-tion.org}},
  OPTmonth =     {August},
  year =     {2006-2001},
  OPTnote =     {retrieved in February 2008},
  OPTannote =    {},

}
@Misc{SCIEnce,
  author =    {Kevin Hammond and Dana Petcu and Phil Trinder and Abdallah Al Zain and Steve Linton and Greg Michaelson},
  title =    {{Project Paper: the SCIEnce Joint Research Activity Symbolic Computing
  on the Grid}},
  howpublished = {Trends in Functional Programming (TFP) 07, Draft Proceedings},
  OPTmonth =     {August},
  year =     {2007},
  OPTnote =     {retrieved in February 2008},
}
% -----------------------------------------------------------------------------
% new stuff (vs. artcop/mainDFG bibs)

@Article{ManticoreJFP,
  author = 	 {Shaw, Adam and Reppy, John and Rainey, Michael and Fluet, Matthew},
  title = 	 {{Implicitly-threaded Parallelism in Manticore}},
  journal = 	 {Journal of Functional Programming},
  year = 	 2010,
  note = 	 {submitted}}

@InProceedings{Manticore,
  author = 	 {Fluet, Matthew  and Rainey, Michael and Reppy, John and Shaw, Adam and Xiao, Yingqi},
  title = 	 {{Manticore: A Heterogeneous Parallel Language}},
  booktitle = {{DAMP'07: Workshop on Declarative Aspects of Multi-core Programming}},
  year =      2007,
  pages = 	 {37--44},
  publisher = {ACM}}



@InProceedings{ManticoreProj,
  author = 	 {Fluet, Matthew and Ford, Nic and Rainey, Michael and Reppy, John and Shaw, Adam and Xiao, Yingqi},
  title = 	 {{Status Report: The Manticore Project}},
  booktitle = {{Workshop on ML}},
  year =      2007,
  pages = 	 {15--24},
  publisher = {ACM}}



@InProceedings{GUM,
  author = 	 {Trinder, P.W. and Hammond, K. and {Mattson Jr.}, J.S. and
                  Partridge, A.S and {Peyton Jones}, S.L.},
  title = 	 {{GUM: a Portable Parallel Implementation of Haskell}},
  booktitle =    {{Proc. PLDI'96 --- ACM Conf. on Programming Language Design and
                   Implementation}}, 
  year =	 {1996},
  address =	 {Philadelphia, PA, USA},
  pages =        {79--88},
  month =	 may,
  url =          {http://www.macs.hw.ac.uk/\~{}dsg/gph/papers/ps/gum.ps.gz},
  ALTurl =       {{ftp://ftp.dcs.glasgow.ac.uk/pub/glasgow-fp/authors/Philip\_Trinder/gumFinal.ps.Z}},
  abstract =     "GUM is a portable, parallel implementation of the Haskell functional
language. Despite sustained research interest in parallel functional
programming, GUM is one of the first such systems to be made publicly
available. GUM is message-based, and portability is facilitated by using
the PVM communications harness that is available on many
multi-processors. As a result, GUM is available for both shared-memory (Sun
SPARCserver multiprocessors) and distributed-memory (networks of
workstations) architectures. The high message-latency of distributed
machines is ameliorated by sending messages asynchronously, and by sending
large packets of related data in each message. Initial performance figures
demonstrate absolute speedups relative to the best sequential compiler
technology. To improve the performance of a parallel Haskell program GUM
provides tools for monitoring and visualising the behaviour of threads and
of processors during execution."
}

@Article{ParDistribHaskells,
  author = 	 {Trinder, P.W. and Loidl, H-W. and Pointon, R.F.},
  title = 	 {{Parallel and Distributed Haskells}},
  journal =      {Journal of Functional Programming},
  year =         {2002},
  month =      {July},
  volume =     {12},
  number =     {4\&5},
  pages =      {469--510},
  note =	 {Special Issue on Haskell},
  abstractURL = {http://www.dcs.glasgow.ac.uk/jfp/bibliography/References/trinderlp2002:469.html}

}

@Book{Haskell98,
  author =       {{Peyton Jones (ed.)}, S.L. and Hughes, J. and Augustsson, L. and Barton, D. and Boutel, B. and Burton, W. and Fasel, J. and Hammond, K. and Hinze, R. and Hudak, P. and Johnsson, T. and Jones, M. and Launchbury, J. and Meijer, E. and Peterson, J. and Reid, A. and Runciman, C. and Wadler, P.},
  title = 	 {{Haskell 98 Language and Libraries. The Revised Report.}},
  publisher = 	 {Cambridge University Press},
  year = 	 {2003},
  OPTkey = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  OPTaddress = 	 {},
  OPTedition = 	 {},
  month = 	 {April},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@article{Worst,
  author = 	 {Burton, F.W. and Rayward-Smith, V.J.},
  title = 	 {{Worst Case Scheduling for Parallel Functional Programming}},
  journal = 	 {{Journal of Functional Programming}},
  year = 	 1994,
  volume =	 4,
  number =	 1,
  pages =        {65--75},
  month =	 {January}
}

@book{HammondMichaelson,
 title ={{Research Directions in Parallel Functional Programming}},
 editor={K. Hammond and G. Michaelson},
 publisher={Springer-Verlag}, 
 year={1999},
}


@InProceedings{GHCpaper,
  author =   {{Peyton Jones}, S.L. and Hall, C.V. and Hammond, K. and
                  Partain, W.D. and Wadler, P.L.},
  title =    {{The Glasgow Haskell Compiler: a Technical Overview}},
  booktitle =    {{Proc. JFIT (Joint Framework for Information Technology) Technical Conference}},
  year =     1993,
  address =  {Keele, UK},
  month =    {March},
  pages =    {249--257},
  annote =   {std ref for GHC overview},
  OPTnote =          {\hwlurl{http://www.dcs.gla.ac.uk/fp/papers/grasp-jfit.ps.Z}},
  abstract =     "We give an overview of the Glasgow Haskell compiler, focusing especially on
ways  in which we have been  able to exploit  the rich theory of functional
languages to give very practical improvements in the compiler. The compiler
is portable, modular, generates good code, and is freely available."
}

@InProceedings{GranSim,
  author =   {Hammond, K. and Loidl, H-W. and Partridge, A.},
  title =    {{Visualising Granularity in Parallel Programs: A Graphical Winnowing System for Haskell}},
  booktitle =    {{Proc. HPFC'95 --- Conf.\  on High Performance Functional Computing}},
  OPTcrossref =  {},
  OPTkey =   {},
  pages =    {208--221},
  year =     {1995},
  OPTeditor =    {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  address =   {Denver, CO, Apr~10--12},
  OPTmonth =    {April},
  OPTorganization = {},
  OPTpublisher = {},
  OPTnote =      {{\hwlurl{http://www.macs.hw.ac.uk/\~{}hwloidl/publications/Glasgow/HPFC95.ps.gz}}},
  OPTannote =    {}
}


@inproceedings{Par,
title = {{High-Performance Parallel Graph Reduction}}, 
author = {{Peyton Jones}, S.L. and Clack, C. and Salkild, J.},
booktitle = {{Proc. PARLE'89 --- Conf. on Parallel Architectures and Languages Europe, Springer LNCS 365}},
pages = {{193--206}},
year = 1989
}

@Article{EvalStrat,
  author = 	 {Trinder, P.W. and Hammond, K. and Loidl, H-W. and {Peyton
                  Jones}, S.L.}, 
  title  = 	 {{Algorithm $+$ Strategy $=$ Parallelism}},
  journal =      {{Journal of Functional Programming}},
  volume =       {8},
  number =       {1},
  pages =        {23--60},
  year =	 {1998},
  month =	 {January},
  url =          {http://www.macs.hw.ac.uk/\~{}dsg/gph/papers/ps/strategies.ps.gz},
}

@inproceedings{GdH,
title = {{The Design and Implementation of Glasgow distributed Haskell}},
author  = {Pointon, R.F. and Trinder, P.W. and Loidl, H-W.},
booktitle = {{Proc. IFL'00 - 12th International Workshop on the Implementation of Functional Languages, Aachen, Germany (September 2000), Springer LNCS 2011}}, 
pages = {53--70},
year = 2000
}

@article{mhaskell,
title = {{mHaskell: Mobile Computation in a Purely Functional Language}},
author = {Rauber Du Bois, A. and Trinder, P.W. and Loidl, H.W.},
journal = {{Journal of Universal Computer Science}}, 
volume = 11,
number = 7,
year = 2005,
pages = {1234--1254}
}

@InProceedings{GHCSMP,
   author = {Simon Marlow and Simon Peyton Jones and Satnam Singh},
   title = {{Runtime Support for Multicore Haskell}},
   booktitle = {{Proc. ICFP '09: 14th ACM SIGPLAN international Conference on Functional Programming}},
   year = {2009},
   month = {August},
   abstract = {Purely functional programs should run well on parallel hardware
because of the absence of side effects, but it has proved hard to
realise this potential in practice.  Plenty of papers describe
promising ideas, but vastly fewer describe real implementations with
good wall-clock performance.  We describe just such an implementation,
and quantitatively explore some of the complex design tradeoffs that
make such implementations hard to build.  Our measurements are
necessarily detailed and specific, but they are reproducible, and we
believe that they offer some general insights.
},
   url = {http://www.haskell.org/~simonmar/papers/multicore-ghc.pdf},
   location = {Edinburgh, Scotland}
}

@phdthesis{Roe-Thesis,
title = {{Parallel Programming using Functional Languages}},
author = {Paul Roe},
school = {Department of Computing Science, University of Glasgow},
year =  1991
}


@inproceedings{SymGrid,
 author = {Kevin Hammond and Abdallah Al Zain and Gene Cooperman and Dana Petcu and Phillip W. Trinder},
title = {{SymGrid: A Framework for Symbolic Computation on the Grid}},
 booktitle = {{Proc. EuroPar '07: 13th International EuroPar Conference, Rennes, France, Springer LNCS 4641}},
 year = {2007},
 pages = {457--466}
}

@article{Engineering,
  number = {12},
  volume = {11},
  month = {October},
  author = {Hans-Wolfgang Loidl and Philip Trinder and Kevin Hammond and Sahalu B.
    Junaidu and Richard G. Morgan and Simon L. {Peyton Jones}},
  url = {http://www.macs.hw.ac.uk/~dsg/gph/papers/abstracts/cpe.html},
  title = {{Engineering Parallel Symbolic Programs in {GpH}}},
  ps = {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/cpe.ps},
  pages = {701-752},
  year = {1999},
  doi = {10.1002/(SICI)1096-9128(199910)11:12<701::AID-CPE443>3.0.CO;2-P},
  journal = {{Concurrency: Practice and Experience}},
  bibsource = {http://www-fp.cs.st-andrews.ac.uk/bib.shtml?1999}
}

@article{LazyTaskCreation,
 author = {Mohr, E. and Kranz, D. A. and Halstead,Jr., R. H.},
 title = {{Lazy Task Creation: A Technique for Increasing the Granularity of Parallel Programs}},
 journal = {IEEE Trans. Parallel Distrib. Syst.},
 volume = {2},
 number = {3},
 year = {1991},
 issn = {1045-9219},
 pages = {264--280},
 doi = {http://dx.doi.org/10.1109/71.86103},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 }

@Misc{Daytona,
  key = 	 {Daytona},
  author = 	 {Microsoft eXtreme Computing Group},
  title = 	 {{Daytona --- Iterative MapReduce on Windows Azure}},
  month = 	 jul,
  year = 	 2011,
  note = 	 {\url{http://research.microsoft.com/en-us/projects/daytona/default.aspx}}}


@Misc{UPCcons,
  key = 	 {UPCcons},
  author = 	 {William W. Carlson},
  title = 	 {{UPC: The Language Specifications Working Group}},
  howpublished = {UPC Language Specifications v1.2},
  note = 	 {\url{http://www.gwu.edu/\~upc/docs/upc_specs_1.2.pdf}}}


@Misc{IntelSCC,
  author = 	 {Intel},
  title = 	 {{Single-chip Cloud Computer}},
  year = 	 2009,
  note = 	 {\url{http://www.intel.com/pressroom/archive/releases/2009/20091202comp\_sm.htm}}}


@Misc{DaytonaURL,
  key = 	 {Daytona},
  title = 	 {{Daytona --- Iterative MapReduce on Windows Azure}},
  month = 	 Feb,
  year = 	 2012,
  annote = 	 {accessed at},
  url =          {http://research.microsoft.com/en-us/projects/daytona/},
  abstract =     "Microsoft has developed an iterative MapReduce runtime for Windows Azure, code-named ``Daytona.'' Project Daytona is designed to support a wide class of data analytics and machine learning algorithms. It can scale out to hundreds of server cores for analysis of distributed data. "
}

@Misc{DryadURL,
  key = 	 {Dryad},
  author = 	 {Microsoft Research},
  title = 	 {Dryad},
  howpublished = {web page},
  url = {http://research.microsoft.com/en-us/projects/dryad/},
  abstract = "The Dryad Project is investigating programming models for writing parallel and distributed programs to scale from a small cluster to a large data-center."
}

@InProceedings{Dryad,
  author = 	 {Michael Isard and Mihai Budiu and Yuan Yu and Andrew Birrell and Dennis Fetterly},
  title = 	 {{Dryad: Distributed Data-Parallel Programs from Sequential Building Blocks}},
  booktitle = {{European Conference on Computer Systems (EuroSys)}},
  year = 	 2007,
  address = 	 {Lisbon, Portugal},
  month = 	 mar,
  url =          {http://research.microsoft.com/en-us/projects/dryad/eurosys07.pdf},
  abstract =     "Dryad is a general-purpose distributed execution engine for
coarse-grain data-parallel applications. A Dryad application
combines computational �vertices� with communication
�channels� to form a dataflow graph. Dryad runs the
application by executing the vertices of this graph on a set of
available computers, communicating as appropriate through
files, TCP pipes, and shared-memory FIFOs.
The vertices provided by the application developer are
quite simple and are usually written as sequential programs
with no thread creation or locking. Concurrency arises from
Dryad scheduling vertices to run simultaneously on multiple
computers, or on multiple CPU cores within a computer.
The application can discover the size and placement of data
at run time, and modify the graph as the computation progresses
to make efficient use of the available resources.
Dryad is designed to scale from powerful multi-core single
computers, through small clusters of computers, to data
centers with thousands of computers. The Dryad execution
engine handles all the difficult problems of creating a large
distributed, concurrent application: scheduling the use of
computers and their CPUs, recovering from communication
or computer failures, and transporting data between vertices."
}


@Misc{YarnURL,
  key = 	 {Yarn},
  author = 	 {Apache Foundation},
  title = 	 {Apache Hadoop NextGen MapReduce (YARN)},
  howpublished = {web page},
  month = 	 feb,
  year = 	 2012,
  annote = 	 {accessed at},
  url =          {http://hadoop.apache.org/common/docs/r0.23.0/hadoop-yarn/hadoop-yarn-site/YARN.html},
  abstract = "MapReduce has undergone a complete overhaul in hadoop-0.23 and we now have, what we call, MapReduce 2.0 (MRv2) or YARN.

The fundamental idea of MRv2 is to split up the two major functionalities of the JobTracker, resource management and job scheduling/monitoring, into separate daemons. The idea is to have a global ResourceManager (RM) and per-application ApplicationMaster (AM). An application is either a single job in the classical sense of Map-Reduce jobs or a DAG of jobs.

The ResourceManager and per-node slave, the NodeManager (NM), form the data-computation framework. The ResourceManager is the ultimate authority that arbitrates resources among all the applications in the system.

The per-application ApplicationMaster is, in effect, a framework specific library and is tasked with negotiating resources from the ResourceManager and working with the NodeManager(s) to execute and monitor the tasks."
}

@Article{filaments,
  author = 	 {David K. Lowenthal   	and 	Vincent W. Freeh 		Gregory R. Andrews},
  title = 	 {{Using Fine-grain Threads and Run-time Decision Making in Parallel Computing}},
  journal = 	 {{Journal of Parallel and Distributed Computing}},
  year = 	 1996,
  volume = 	 37,
  number = 	 1,
  note = 	 {Special issue on multithreading for multiprocessors},
  url = {http://dx.doi.org/10.1006/jpdc.1996.0106},
  abstract = "Programming distributed-memory multiprocessors and networks of workstations re-
quires deciding what can execute concurrently, how processes communicate, and where
data is placed. These decisions can be made statically by a programmer or compiler, or
they can be made dynamically at run time. Using run-time decisions leads to a simpler
interface|because decisions are implicit|and it can lead to better decisions|because
more information is available. This paper examines the costs, bene ts, and details
of making decisions at run time. The starting point is explicit ne-grain parallelism
with any number (even thousands) of threads. Five speci c techniques are considered:
(1) implicitly coarsening the granularity of parallelism, (2) using implicit communica-
tion implemented by a distributed shared memory, (3) overlapping computation and
communication, (4) adaptively moving threads and data between nodes to minimize
communication and balance load, and (5) dynamically remapping data to pages to
avoid false sharing. Details are given on the performance of each of these techniques as
well as their overall performance on several scienti c applications." 
}

@Misc{CilkURL,
  key = 	 {cilk},
  howpublished = {web page},
  month = 	 feb,
  year = 	 2012,
  annote = 	 {accessed at},
  url = {http://supertech.csail.mit.edu/cilk/},
  abstract = "Cilk (pronounced ``silk'') is a linguistic and runtime technology for algorithmic multithreaded programming developed at MIT. The philosophy behind Cilk is that a programmer should concentrate on structuring her or his program to expose parallelism and exploit locality, leaving Cilk's runtime system with the responsibility of scheduling the computation to run efficiently on a given platform. The Cilk runtime system takes care of details like load balancing, synchronization, and communication protocols. Cilk is algorithmic in that the runtime system guarantees efficient and predictable performance. Important milestones in Cilk technology include the original Cilk-1, which provided a provably efficient work-stealing runtime support but little linguistic support; the later Cilk-5, which provided simple linguistic extensions for multithreading to ANSI C; and the commercial Cilk++, which extended the Cilk model to C++ and introduced ``reducer hyperobjects'' as an efficient means for resolving races on no Cilk is an especially effective platform for programming ``irregular'' applications such as sparse numerical algorithms, N-body simulations, graph-theory applications, backtracking search, and cache-efficient stencil computations. Using Cilk, our group has developed three world-class chess programs, StarTech, *Socrates, and Cilkchess. "
}

@InProceedings{cilk,
author = {Matteo Frigo and Charles E. Leiserson and Keith H. Randall},
address = {Montreal, Quebec, Canada},
booktitle = {{PLDI98: Conference on Programming Language Design and Implementation}},
month = jun,
note = {Proceedings published ACM SIGPLAN Notices, Vol. 33, No. 5, May, 1998.},
year = 1998,
pages = {212--223},
title = {The Implementation of the {C}ilk-5 Multithreaded Language},
morepapers = {http://supertech.csail.mit.edu/papers.html},
url = {http://supertech.csail.mit.edu/papers/cilk5.pdf},
abstract = "The fifth release of the multithreaded language Cilk uses a
 provably good ``work-stealing'' scheduling algorithm similar to the
 first system, but the language has been completely redesigned and
 the runtime system completely reengineered. The efficiency of the
 new implementation was aided by a clear strategy that arose from a
 theoretical analysis of the scheduling algorithm: concentrate on
 minimizing overheads that contribute to the work, even at the expense
 of overheads that contribute to the critical path. Although it may
 seem counterintuitive to move overheads onto the critical path, this
 ``work-first'' principle has led to a portable Cilk-5 implementation
 in which the typical cost of spawning a parallel thread is only
 between 2 and 6 times the cost of a C function call on a variety of
 contemporary machines. Many Cilk programs run on one processor with
 virtually no degradation compared to equivalent C programs. This
 paper describes how the work-first principle was exploited in the
 design of Cilk-5's compiler and its runtime system. In particular, we
 present Cilk-5's novel ``two-clone'' compilation strategy and its
 Dijkstra-like mutual-exclusion protocol for implementing the ready
 deque in the work-stealing scheduler."
} 

@Article{TAM,
  author = 	 {Culler, D.E. and Goldstein, S.C. and
                  Schauser, K.E. and {von Eicken}, T.},
  title = 	 {{TAM --- A Compiler Controlled Threaded Abstract Machine}},
  journal =      {J.\ of Parallel and Distributed Computing},
  year = 	 1993,
  volume =	 18,
  pages =        {347--370},
  month =	 {June},
  annote = 	 {main reference for specifying TAM},
  abstractURL =  {http://http.cs.berkeley.edu/\~{}sethg/abs/jpdc93.html},
  url =          {http://www.cs.ucsb.edu/\~{}schauser/papers/93-jpdc-tr.ps},
  abstract =     "The Threaded Abstract Machine (TAM)  refines  dataflow execution models  to
address  the critical constraints  that modern parallel architectures place
on the compilation of  general-purpose parallel programming  languages. TAM
defines  a   self-scheduled machine language    of  parallel threads, which
provides a path  from dataflowgraph program representations to conventional
control flow. The  most important feature of TAM  is the way it exposes the
interaction between  the   handling  of asynchronous message    events, the
scheduling  of   computation,  and  the      utilization of  the    storage
hierarchy. This  paper provides a complete  description of TAM and codifies
the model in terms of a pseudo  machine language TL0. Issues in compilation
from a high  level parallel language to TL0   are discussed in general  and
specifically in regard to the  Id90 language. The  implementation of TL0 on
the CM-5 multiprocessor is explained  in detail. Using this implementation,
a cost model is developed for the various TAM  primitives. The TAM approach
is   evaluated on  sizable Id90  programs   on a 64   processor system. The
scheduling hierarchy of quanta and threads is  shown to provide substantial
locality while  tolerating long latencies.  This allows  the average thread
scheduling cost to be extremely low.", 
}

@InProceedings{ScGo95,
  author = 	 {Schauser, K.E. and Goldstein, S.C.},
  title = 	 {{How Much Non-strictness do Lenient Programs Require?}},
  booktitle = 	 {{FPCA'95 ---  Conference on Functional Programming
                   Languages and Computer Architecture}},
  publisher =	 {ACM Press},
  address =      {La Jolla, California, June 26--28},
  year = 	 {1995},
  abstractURL =  {http://http.cs.berkeley.edu/\~{}sethg/abs/fpca95.html},
  url =          {http://www.cs.ucsb.edu/\~{}schauser/papers/95-fpca.ps},
  abstract =     "Lenient languages, such as Id90, have been touted as among the best functional languages for massively parallel machines [AHN88]. Lenient evaluation combines non-strict semantics with eager evaluation [Tra91]. Non-strictness gives these languages more expressive power than strict semantics, while eager evaluation ensures the highest degree of parallelism. Unfortunately, non-strictness incurs a large overhead, as it requires dynamic scheduling and synchronization. As a result, many powerful program analysis techniques have been developed to statically determine when non-strictness is not required [CPJ85, Tra91, Sch94]. This paper studies a large set of lenient programs and quantifies the degree of non-strictness they require. We identify several forms of non-strictness, including functional, conditional, and data structure non-strictness. Surprisingly, most Id90 programs require neither functional nor conditional non-strictness. Many benchmark programs, however, make use of a limited form of data structure non-strictness. The paper refutes the myth that lenient programs require extensive non-strictness."
}

@Article{GSC96,
  author = 	 {Goldstein, S.C. and Schauser, K.E. and Culler, D.E.},
  title = 	 {{Lazy Threads: Implementing a Fast Parallel Call}},
  journal =      {J.\ of Parallel and Distributed Computing},
  year = 	 {1996},
  volume =	 {37},
  number =	 {1},
  pages =	 {5--20},
  keywords =     {parallel runtime-system, lazy task creation, granularity},
  url =          {http://http.cs.berkeley.edu/\~{}sethg/papers/jpdc.ps.Z},
  abstractURL =  {http://http.cs.berkeley.edu/\~{}sethg/abs/jpdc.html},
  abstract =     "In this paper we describe lazy threads, a new approach for implementing
multi-threaded execution models on conventional machines. We show how they
can implement a parallel call at nearly the efficiency of a sequential
call. The central idea is to specialize the representation of a parallel
call so that it can execute as a parallel-ready sequential call. This
allows excess parallelism to degrade into sequential calls with the
attendant efficient stack management and direct transfer of control and
data, yet a call that truly needs to execute in parallel, gets its own
thread of control. The efficiency of lazy threads is achieved through a
careful attention to storage management and a code generation strategy that
allows us to represent potential parallel work with no overhead.",
}

@PhdThesis{Gold97,
  author = 	 {Goldstein, S.C.},
  title = 	 {{Lazy Threads: Compiler and Runtime Structures for
                  Fine-Grained Parallel Programming}},
  school = 	 {University of California, Berkeley},
  year = 	 1997,
  abstract =     "Many modern parallel  languages   support dynamic creation of    threads or
require multithreading in their  implementations. The threads describe  the
logical   parallelism in  the program. For   ease  of expression and better
resource  utilization, the logical  parallelism in  a program often exceeds
the physical parallelism of the machine and leads to applications with many
fine-grained  threads. In practice,  however, most logical threads need not
be  independent threads.  Instead, they  could be  run as sequential calls,
which are  inherently cheaper than  independent  threads. The  challenge is
that one cannot generally predict  which logical threads can be implemented
as sequential   calls. In lazy multithreading   systems each logical thread
begins execution  sequentially     (with  the attendant   efficient   stack
management and direct transfer of control and data). Only if a thread truly
must execute in parallel does it get its own thread of control.

This  dissertation  presents  new   implementation  techniques   for   lazy
multithreading  systems on conventional machines  and compares a variety of
design  choices. We  develop an  abstract  machine that makes  explicit the
design   decisions for achieving  lazy   multithreading.  We introduce  new
options on each of  the four axes in the  design space: the storage  model,
the  thread   representation, the  disconnection  method,  and the queueing
mechanism.  Stacklets, our new storage   model,  allows parallel calls   to
maintain  the invariants of sequential calls.  Thread seeds, our new thread
representation, allows  threads   to  be stolen  without  requiring  thread
migration or shared  memory. Lazy-disconnect, our new disconnection method,
does not restrict the use of pointers. Implicit  and Lazy queueing, our two
new     queueing    mechanisms,    eliminate  the       need for   explicit
bookkeeping. Additionally, we develop  a core set of compilation techniques
and runtime primitives that form the basis for the efficient implementation
of any design point.

We have evaluated the  different  approaches by  incorporating them into  a
compiler for an explicitly  parallel  extension of  Split-C. We  show  that
there  exist points in  the   design space (e.g.,  stacklet, thread  seeds,
lazy-disconnect, and lazy  queueing) for which fine-grained parallelism can
be efficiently supported even on distributed memory machines, thus allowing
programmers freedom to specify the parallelism in a program without concern
for excessive overhead."
}

@PhdThesis{PhD_Goldstein,
  author = 	 {Seth Copen Goldstein},
  title = 	 {{Lazy Threads: Compiler and Runtime Structures for Fine-rained Parallel Programming}},
  school = 	 {University of California at Berkeley},
  year = 	 1997}

@incollection{CharmppPPWCPP96,
  author = "L. V. Kale and Sanjeev Krishnan",
  title = "{Charm++: Parallel Programming with Message-Driven Objects}",
  booktitle = "Parallel    Programming using C++",
  publisher = "MIT Press",
  year = "1996",
  editor = "Gregory V. Wilson and Paul Lu",
  pages = "175-213",
}

@Misc{hpcchallenge,
  key = {HPC Challenge},
  title = {{The HPC Challenge}},
  month = feb,
  year = 2012,
  annote = 	 {accessed at},
  note = {\url{http://www.hpcchallenge.org/}}
}


@Misc{ShootoutNOT,
  key = 	 {Shootout},
  title = 	 {{The Computer Language Benchmarks Game}},
  howpublished = {Web page accessed at},
  month = 	 feb,
  year = 	 2014,
  note = {\url{http://shootout.alioth.debian.org/}},
  annote = 	 {accessed at}
}

@Misc{CilkPlusURL,
  key = 	 {CilkPlus},
  howpublished = {web page},
  month = 	 feb,
  year = 	 2012,
  annote = 	 {accessed at},
  url = {http://software.intel.com/en-us/articles/intel-cilk-plus/},
}

@Misc{Shootout,
  key =   {Shootout},
  title =    {{The Computer Language Benchmarks Game}},
  howpublished = {\url{http://benchmarksgame.alioth.debian.org/u32/performance.php?test=threadring}},
  OPThowpublished = {Website \texttt{\footnotesize http://shootout.alioth.debian.org}},
  note = {Thread-ring benchmark},
  month = nov,
  year = 	 2014
}


@Misc{ChienTalk, 
  title =    {{Parallelism Drives Computing}}, 
  author =   {Andrew Chien}, 
  organization = {Intel Research}, 
  month =    2007, 
  year =     jun, 
  howpublished = {Talk given at Manycore Computing Workshop}, 
  documentURL =  {http://science.officeisp.net/ManycoreComputingWorkshop07/Presentations/Andrew%20Chien.pdf} 
}

@inproceedings{Charm++,
 author = {Kale, Laxmikant V. and Krishnan, Sanjeev},
 title = {CHARM++: a portable concurrent object oriented system based on C++},
 booktitle = {Proceedings of the eighth annual conference on Object-oriented programming systems, languages, and applications},
 series = {OOPSLA '93},
 year = {1993},
 isbn = {0-89791-587-9},
 location = {Washington, D.C., United States},
 pages = {91--108},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/165854.165874},
 doi = {http://doi.acm.org/10.1145/165854.165874},
 acmid = {165874},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@Misc{TaftTalk,
  key = 	 {Tucker Taft},
  title = 	 {{An Introduction to ParaSail: Parallel Specification and Implementation Language}},
  month = 	 mar,
  year = 	 2011,
  note = 	 {Talk},
  url = {http://www.cs.tufts.edu/t/colloquia/current/?event=741}}


@InProceedings{BarrelfishDiversity,
  author = 	 {Adrian Sch{\"u}pbach and Simon Peter and Andrew Baumann and Timothy Roscoe and Paul Barham and Tim Harris and Rebecca Isaacs},
  title = 	 {Embracing diversity in the Barrelfish manycore operating system},
  booktitle = {{Workshop on Managed Many-Core Systems}},
  year = 	 2008,
  address = 	 {Boston, MA, USA},
  month = 	 june,
  url =          {http://www.barrelfish.org/barrelfish_mmcs08.pdf}
}


@InProceedings{EarlyBarrelfish,
  author = 	 {Simon Peter and Adrian Sch{\"u}pbach and Dominik Menzi and Timothy Roscoe},
  title = 	 {{Early experience with the Barrelfish OS and the Single-Chip Cloud Computer}},
  booktitle = {{Proceedings of the 3rd Intel Multicore Applications Research Community Symposium (MARC)}},
  year = 	 2011,
  address = 	 {Ettlingen, Germany},
  month = 	 jul,
  url =          {http://www.barrelfish.org/barrelfish_marc11.pdf},
  abstract =     "Abstract�Traditional OS architectures based on a single,
shared-memory kernel face significant challenges from hardware
trends, in particular the increasing cost of system-wide cachecoherence
as core counts increase, and the emergence of heterogeneous
architectures � both on a single die, and also between
CPUs, co-processors like GPUs, and programmable peripherals
within a platform.
The multikernel is an alternative OS model that employs
message passing instead of data sharing and enables architectureagnostic
inter-core communication, including across non-coherent
shared memory and PCIe peripheral buses. This allows a single
OS instance to manage the complete collection of heterogeneous,
non-cache-coherent processors as a single, unified platform.
We report on our experience running the Barrelfish research
multikernel OS on the Intel Single-Chip Cloud Computer (SCC).
We describe the minimal changes required to bring the OS up
on the SCC, and present early performance results from an SCC
system running standalone, and also a single Barrelfish instance
running across a heterogeneous machine consisting of an SCC
and its host PC."
}

@InProceedings{BarrelfishPrinciples,
  author = 	 {Simon Peter and Adrian Sch{\"u}pbach and Paul Barham and Andrew Baumann and Rebecca Isaacs and Tim Harris and Timothy Roscoe},
  title = 	 {{Design principles for end-to-end multicore schedulers}},
  booktitle = {{2nd Workshop on Hot Topics in Parallelism}},
  year = 	 2010,
  address = 	 {Berkeley, CA, USA},
  month = 	 jun, 
  url =          {http://www.barrelfish.org/barrelfish_hotpar10.pdf},
  abstract = "As personal computing devices become increasingly parallel
multiprocessors, the requirements for operating system
schedulers change considerably. Future generalpurpose
machines will need to handle a dynamic, bursty,
and interactive mix of parallel programs sharing a heterogeneous
multicore machine. We argue that a key
challenge for such machines is rethinking scheduling as
an end-to-end problem integrating components from the
hardware and kernel up to the programming language
runtimes and applications themselves.
We present several design principles for future OS
schedulers, and discuss the implications of each for OS
and runtime interfaces and structure. We illustrate the
implementation challenges that result by describing the
concrete choices we have made in the Barrelfish multikernel.
This allows us to present one coherent scheduling
design for an entire multicore machine, while at the same
time drawing conclusions we think are applicable to the
design of any general-purpose multicore OS."
}

@InProceedings{Barrelfish,
  author = 	 {Andrew Baumann and Paul Barham and Pierre-Evariste Dagand and Tim Harris and Rebecca Isaacs and Simon Peter and Timothy Roscoe and Adrian Sch{\"u}pbach and Akhilesh Singhania},
  title = 	 {The Multikernel: A new OS architecture for scalable multicore systems},
  booktitle = {{ACM Symposium on OS Principles}},
  year = 	 2009,
  address = 	 {Big Sky, MT, USA},
  month = 	 oct,
  url =          {http://www.barrelfish.org/barrelfish_sosp09.pdf}
}

@Misc{ConcRT,
  key = 	 {ConcRT},
  author = 	 {Microsoft},
  title = 	 {{C++ Concurrency Runtime}},
  url =          {http://msdn.microsoft.com/en-us/library/dd504870.aspx}}



@TechReport{GCD,
  author = 	 {{Apple Inc}},
  title = 	 {{Grand Central Dispatch}},
  institution =  {Apple},
  year = 	 {2011},
  type = 	 {Technology Brief},
  OPTnote =         {\url{http://images.apple.com/macosx/technology/docs/GrandCentral_TB_brief_20090903.pdf}},
  url =          {http://www.google.co.uk/url?sa=t&rct=j&q=grand%20central%20dispatch%20technology%20brief&source=web&cd=4&ved=0CEYQFjAD&url=http%3A%2F%2Fwww.ctestlabs.org%2Fhughes_multicore%2Fdocuments%2FGrandCentral_TB_brief_20090608.pdf&ei=z4Z3T-PnOIaq0QWdlrWgDQ&usg=AFQjCNHbd-CIxMY0Xp-5ALMagju_6jrv3A&cad=rja}
}

@InProceedings{Capriccio,
  author = 	 {Rob Von Behren and Jeremy Condit and Feng Zhou and George C. Necula and Eric Brewer},
  title = 	 {{Capriccio: Scalable threads for internet services}},
  booktitle = {{Proceedings of the 19th ACM Symposium on Operating Systems Principles}},
  pages = 	 {268--281},
  year = 	 2003,
  publisher = {ACM Press},
  url =          {http://dx.doi.org/10.1145/945445.945471},
  doi =          {10.1145/945445.945471},
  abstract =     "This paper presents Capriccio, a scalable thread package
for use with high-concurrency servers. While recent work
has advocated event-based systems, we believe that threadbased
systems can provide a simpler programming model
that achieves equivalent or superior performance.
By implementing Capriccio as a user-level thread package,
we have decoupled the thread package implementation from
the underlying operating system. As a result, we can take
advantage of cooperative threading, new asynchronous I/O
mechanisms, and compiler support. Using this approach,
we are able to provide three key features: (1) scalability
to 100,000 threads, (2) efficient stack management, and (3)
resource-aware scheduling.
We introduce linked stack management, which minimizes
the amount of wasted stack space by providing safe, small,
and non-contiguous stacks that can grow or shrink at run
time. A compiler analysis makes our stack implementation
efficient and sound. We also present resource-aware scheduling,
which allows thread scheduling and admission control to
adapt to the system�s current resource usage. This technique
uses a blocking graph that is automatically derived from the
application to describe the flow of control between blocking
points in a cooperative thread package. We have applied our
techniques to the Apache 2.0.44 web server, demonstrating
that we can achieve high performance and scalability despite
using a simple threaded programming model."
}

@InProceedings{FirstClassThreads,
  author = 	 {Brian D. Marsh and Michael L. Scott and Thomas J. LeBlanc and Evangelos P. Markatos},
  title = 	 {{First-class user-level threads}},
  booktitle = {{Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles (SOSP '91)}},
  year = {1991},
  pages = 	 {110--121},
  address = 	 {New York, NY, USA},
  publisher = {ACM Press},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.119.4904&rep=rep1&type=pdf},
  abstract = "It is often desirable, for reasons of clarity, portability,
and efficiency, to write parallel programs in which the
number of processes is independent of the number of
available processors. Several modern operating systems
support more than one process in an address space, but the
overhead of creating and synchronizing kernel processes
can be high. Many runtime environments implement
lightweight processes (threads) in user space, but this
approach usually results in second-class status for threads,
making it difficult or impossible to perform scheduling
operations at appropriate times (e.g. when the current
thread blocks in the kernel). In addition, a lack of common
assumptions may also make it difficult for parallel
programs or library routines that use dissimilar thread
packages to communicate with each other, or to synchronize
access to shared data.
We describe a set of kernel mechanisms and conventions
designed to accord first-class status to user-level
threads, allowing them to be used in any reasonable way
that traditional kernel-provided processes can be used,
while leaving the details of their implementation to userlevel
code. The key features of our approach are (1)
shared memory for asynchronous communication between
the kernel and the user, (2) software interrupts for events
that might require action on the part of a user-level
scheduler, and (3) a scheduler interface convention that
facilitates interactions in user space between dissimilar
kinds of threads. We have incorporated these mechanisms
in the Psyche parallel operating system, and have used
them to implement several different kinds of user-level
threads. We argue for our approach in terms of both flexibility
and performance"
}


@InProceedings{Tessellation,
  author = 	 {R. Liu and K. Klues and S. Bird and S. Hofmeyr and K. Asanovi{\'c} and J. Kubiatowicz},
  title = 	 {{Tessellation: Space-time partitioning in a manycore client OS}},
  booktitle =    {{Proc. of the 1st USENIX Workshop on Hot Topics in Parallelism}},
  year = 	 2009,
  month = 	 mar,
}

@InProceedings{Helios,
  author = 	 {E. B. Nightingale and O. Hodson and R. McIlroy and C. Hawblitzel and G. Hunt},
  title = 	 {{Helios: heterogeneous multiprocessing with satellite kernels}},
  booktitle = {{Proc. of the 22nd ACM Symposium on Operating Systems Principles (SOSP'09)}},
  year = 	 2009,
  doi =        {10.1145/1629575.1629597},
  url =        {http://dx.doi.org/10.1145/1629575.1629597},
  abstract =   "Helios is an operating system designed to simplify the task of writing,
deploying, and tuning applications for heterogeneous platforms.
Helios introduces satellite kernels, which export a single, uniform
set of OS abstractions across CPUs of disparate architectures and
performance characteristics. Access to I/O services such as file
systems are made transparent via remote message passing, which
extends a standard microkernel message-passing abstraction to a
satellite kernel infrastructure. Helios retargets applications to available
ISAs by compiling from an intermediate language. To simplify
deploying and tuning application performance, Helios exposes an
affinity metric to developers. Affinity provides a hint to the operating
system about whether a process would benefit from executing
on the same platform as a service it depends upon.
We developed satellite kernels for an XScale programmable I/O
card and for cache-coherent NUMA architectures. We offloaded
several applications and operating system components, often by
changing only a single line of metadata. We show up to a 28\%
performance improvement by offloading tasks to the XScale I/O
card. On a mail-server benchmark, we show a 39\% improvement
in performance by automatically splitting the application among
multiple NUMA domains."
}

@Article{FOS,
  author = 	 {D. Wentzlaff and A. Agarwal},
  title = 	 {Factored operating systems (FOS): the case for a scalable operating system for multicores},
  journal =   {{SIGOPS Operating Systems Review}},
  pages = 	 {76--85},
  year = 	 2009,
  volume = 	 43,
  number = 	 2,
  doi =          {10.1145/1531793.1531805},
  url =          {http://dx.doi.org/10.1145/1531793.1531805},
  abstract =     "The next decade will afford us computer chips with 100's to 1,000's of cores on a single piece of silicon. Contemporary operating systems have been designed to operate on a single core or small number of cores and hence are not well suited to manage and provide operating system services at such large scale. If multicore trends continue, the number of cores that an operating system will be managing will continue to double every 18 months. The traditional evolutionary approach of redesigning OS subsystems when there is insufficient parallelism will cease to work because the rate of increasing parallelism will far outpace the rate at which OS designers will be capable of redesigning subsystems. The fundamental design of operating systems and operating system data structures must be rethought to put scalability as the prime design constraint. This work begins by documenting the scalability problems of contemporary operating systems. These studies are used to motivate the design of a factored operating system (fos). fos is a new operating system targeting manycore systems with scalability as the primary design constraint, where space sharing replaces time sharing to increase scalability.We describe fos, which is built in a message passing manner, out of a collection of Internet inspired services. Each operating system service is factored into a set of communicating servers which in aggregate implement a system service. These servers are designed much in the way that distributed Internet services are designed, but instead of providing high level Internet services, these servers provide traditional kernel services and replace traditional kernel data structures in a factored, spatially distributed manner. fos replaces time sharing with space sharing. In other words, fos's servers are bound to distinct processing cores and by doing so do not fight with end user applications for implicit resources such as TLBs and caches. We describe how fos's design is well suited to attack the scalability challenge of future multicores and discuss how traditional application-operating systems interfaces can be redesigned to improve scalability."
}


@Misc{WWWAngstrom,
  author = 	 {{MIT Computer Science and Artificial Intelligence Lab}},
  title = 	 {{The Angstrom Project}},
  howpublished = {WWW page},
  month = 	 mar,
  year = 	 2012,
  note = 	 {\url{http://projects.csail.mit.edu/angstrom/}},
  annote = 	 {Date means `accessed at'},
  abstract = "The MIT-led Angstrom team will rethink computing and create a fundamentally new computing architecture to meet the challenges of extreme-scale computing. Project Angstrom's goal is to create the fundamental technologies necessary for extreme-scale computers. Extreme-scale computers face several major challenges, the most difficult four being the energy efficiency challenge, the scalability challenge, the programmability challenge and the dependability challenge. We address these challenges from basic hardware/software research, to chip and system fabrication with a team that includes MIT's CSAIL, MTL, RLE, and MPhC labs; industry partners Freescale Semiconductor, Mercury Federal Systems and Lockheed ATL; and the University of Maryland Department of ECE. Angstrom is funded by the DARPA UHPC (Ubiquitous High-Performance Computing) program. "
}

@Misc{ArticleAngstrom,
  author = 	 {Larry Hardesty},
  title = 	 {The next operating system},
  howpublished = {Web article},
  note = 	 {http://www.physorg.com/news/2011-02-the-next-operating-system.html},
  abstract = "Project Angstrom, an ambitious initiative to create tomorrow's computing systems from the ground up, funded by the U.S. Defense Department and drawing on the work of 19 MIT researchers, is concerned with multicore computing at all levels, from chip architecture up to the design of programming languages. But at its heart is the development of a new operating system.

A computer with hundreds of cores tackling different aspects of a problem and exchanging data offers much more opportunity than an ordinary computer does for something to go badly wrong. At the same time, it has more resources to throw at any problems that do arise. So, says Anant Agarwal, who leads the Angstrom project, a multicore operating system needs both to be more self-aware --- to have better information about the computer's performance as a whole � and to have more control of the operations executed by the hardware.

To some extent, increasing self-awareness requires hardware: Each core in the Angstrom chip, for instance, will have its own thermometer, so that the operating system can tell if the chip is overheating. But crucial to the Angstrom operating system --- dubbed FOS, for factored operating system --- is a software-based performance measure, which Agarwal calls ``heartbeats.'' Programmers writing applications to run on FOS will have the option of setting performance goals: A video player, for instance, may specify that the playback rate needs to be an industry standard 30 frames per second. FOS will automatically interpret that requirement and emit a simple signal --- a heartbeat --- each time a frame displays."
}

@Misc{C++STM,
  author = 	 {Transactional Memory Specification Drafting Group},
  title = 	 {{Draft Specification of Transactional Language Constructs for C++}},
  year = 	 2012,
  month = 	 feb,
  note = 	 {Version 1.1},
  url = {https://sites.google.com/site/tmforcplusplus/C%2B%2BTransactionalConstructs-1.1.pdf},
  abstract = "This specification introduces transactional language constructs for C++, which are intended to
make concurrent programming easier by allowing programmers to express compound statements
that do not interact with other threads, without specifying the synchronization that is required to
achieve this. We briefly describe the features introduced in this specification below.
This specification builds on the C++11 specification. As such, the constructs described in this
specification have well-defined behavior only for programs with no data races. This specification
specifies how the transactional constructs contribute to determining whether a program has a
data race (Section 2.1)."
}

@Misc{WWWTilera,
  author = 	 {Tilera},
  title = 	 {The Tilera TILE64 Processor},
  month = 	 mar,
  year = 	 2012,
  annote = 	 {Date means `accessed at'},
  url = {http://www.tilera.com/products/processors/TILE64}
}

@inproceedings{ParMonadHS11,
 author = {Marlow, Simon and Newton, Ryan and Peyton Jones, Simon},
 title = {A monad for deterministic parallelism},
 booktitle = {Proceedings of the 4th ACM symposium on Haskell},
 series = {Haskell '11},
 year = {2011},
 location = {Tokyo, Japan},
 OPTpages = {71--82},
 OPTnumpages = {12},
 publisher = {ACM},
 address = {New York},
} 


@PhdThesis{PhD_Massalin,
  author = 	 {Alexia Massalin},
  title = 	 {{Synthesis: An Efficient Implementation of Fundamental Operating System Services}},
  school = 	 {Columbia University},
  year = 	 1992,
  url =          {http://valerieaurora.org/synthesis/SynthesisOS/index.html},
  abstract =     "This dissertation shows that operating systems can provide fundamental services an order of magnitude more efficiently than traditional implementations. It describes the implementation of a new operating system kernel, Synthesis, that achieves this level of performance.

The Synthesis kernel combines several new techniques to provide high performance without sacrificing the expressive power or security of the system. The new ideas include:

(i)    Run-time code synthesis - a systematic way of creating executable machine code at runtime to optimize frequently-used kernel routines - queues, buffers, context switchers, interrupt handlers, and system call dispatchers - for specific situations, greatly reducing their execution time.
(ii)    Fine-grain scheduling - a new process-scheduling technique based on the idea of feedback that performs frequent scheduling actions and policy adjustments (at submillisecond intervals) resulting in an adaptive, self-tuning system that can support real-time data streams.
(iii)    Lock-free optimistic synchronization is shown to be a practical, efficient alternative to lock-based synchronization methods for the implementation of multiprocessor operating system kernels.
(iv)    An extensible kernel design that provides for simple expansion to support new kernel services and hardware devices while allowing a tight coupling between the kernel and the applications, blurring the distinction between user and kernel services. 

The result is a significant performance improvement over traditional operating system implementations in addition to providing new services."
}

@InProceedings{Haskell10,
  author =       {S. Marlow and P. Maier and H-W. Loidl and M.K. Aswad and P. Trinder},
  title = 	 {{Seq no more: Better Strategies for Parallel Haskell}},
  booktitle =    {Haskell'10 --- Haskell Symposium},
  year = 	 2010,
  address = 	 {Baltimore MD, U.S.A.},
  month = 	 sep,
  publisher =    {ACM Press},
  keywords =     {GpH, parallel Haskell, evaluation strategies},
  url =          {http://www.macs.hw.ac.uk/~hwloidl/publications/strategies10.pdf},
  abstract = "
  We present a complete redesign of evaluation strategies, a key
  abstraction for specifying pure, deterministic parallelism in
  Haskell.  Our new formulation preserves the compositionality and
  modularity benefits of the original, while providing significant new
  benefits.  First, we introduce an
  evaluation-order monad to provide clearer, more generic,
  and more efficient specification of parallel evaluation.  Secondly,
  the new formulation resolves a subtle space management issue with
  the original strategies, allowing parallelism (sparks) to be
  preserved while reclaiming heap associated with superfluous
  parallelism.  Related to this, the new formulation provides far
  better support for speculative parallelism as the garbage collector
  now prunes unneeded speculation.  Finally, the new formulation
  provides improved compositionality: we can directly express
  parallelism embedded within lazy data structures, producing more
  compositional strategies, and our basic strategies are parametric in
  the coordination combinator, facilitating a richer set of
  parallelism combinators.

  We give measurements over a range of benchmarks demonstrating that
  the runtime overheads of the new formulation relative to the
  original are low, and the new strategies even yield slightly better
  speedups on average than the original strategies."
}

% -----------------------------------------------------------------------------
% from 

@Misc{ChienTalk,
  title =    {{Parallelism Drives Computing}},
  author =   {Andrew Chien},
  organization = {Intel Research},
  month =    2007,
  year =     jun,
  howpublished = {Talk given at Manycore Computing Workshop},
  documentURL =  {http://science.officeisp.net/ManycoreComputingWorkshop07/Presentations/Andrew%20Chien.pdf}
}



@InProceedings{CCH08,
  author =   {A. Casas and M. Carro and M. Hermenegildo},
  title =    {{Towards a High-Level Implementation of Execution Primitives for Non-restricted, Independent And-parallelism}},
  booktitle =    {{International Symposium on Practical Aspects of Declarative Languages (PADL'08)}},
  editor =       {David S. Warren and Paul Hudak},
  pages =    {230--247},
  year =     2008,
  OPTvolume =   4902,
  series =   {LNCS 4902},
  address =      {San Francisco (CA), USA},
  month =    jan,
  OPTpublisher =    {Springer-Verlag},
  OPTdocumentURL =  {http://www.clip.dia.fi.upm.es/papers/andprolog-new-padl2008.pdf},
}


@Book{TannenbaumOS,
  author =   {A.S. Tanenbaum},
  title =    {{Modern Operating Systems}},
  publisher =    {Prentice Hall},
  edition =      {Third},
  year =     2008,
  note =     {ISBN 0136006639}
}


@Book{Mach,
  author =   {Eric Sheinbrood},
  title =    {{The Design of the Mach Operating System}},
  publisher =    {Prentice Hall},
  year =     1993,
  OPTnote =     {ISBN 0132045958}
}


@Book{Caliban,
  author =   {Kelly, P.H.J.},
  title =    {{Functional Programming for Loosely-Coupled Multiprocessors}},
  publisher =    {{MIT Press}},
  year =     {1989},
  series =   {Research Monographs in Parallel and Distributed Computing},
  annote =   {parallel functional, Caliban}
}

@PhdThesis{PhD_Taylor,
  author =   {Taylor, F.S.},
  title =    {{Parallel Functional Programming by Partitioning}},
  school =   {Department of Computing},
  year =     1997,
  address =  {Imperial College, London},
  url =          {http://www.lieder.demon.co.uk/thesis/thesis.ps.gz},
  abstract =     "Caliban  is a  declarative  language  which addresses  the  area of  static
distributed memory  parallel computing. It  is an annotation  language that
allows the  programmer to partition  a functional program and  data amongst
the computational  resources av ailable.  It is integrated into  the source
language so that the full power of the host language can be used to express
the partitioning of the program.  Partial evaluation is used to determine a
complete version of the  annotation at compile time. Program transformation
is then  used to make the  parallelism explicit. This  thesis describes the
Caliban  language  and  its  pilot  implementation. It  then  continues  by
presenting     extensions     and     improvements     to     the     basic
language. Implementation techniques for the improved language are discussed
in relation to  an implementation on the Fujitsu  AP1000 distributed memory
multiprocessor computer.  Two application  case studies together  with some
performance results  are presented. Finally, there is  a critical appraisal
of the language and its approach. Caliban has good support for general data
and computation partitioning. It also  aids software reuse with its ability
to abstract  common computational structures into higher  order forms which
are concretised  at compile time  by partial evaluation. However,  there do
remain  some open  issues relating  to evaluation  order  control. Finally,
Caliban  can be  implemented  reasonably efficiently  on standard  parallel
hardware."
}

@TechReport{TreadMarks,
  author =   {Amza, C. and Cox, A.L. and  Dwarkadas, S. and  Keleher, P. and  Lu, H. and  Rajamony, R. and  Yu, W. and  Zwaenepoel, W.},
  title =    {{TreadMarks: Shared Memory Computing on Networks of Workstations}},
  institution =  {Dept.\  of Computer Science},
  year =     1995,
  address =  {Rice Univ.},
  documentURL =  {http://www.cs.rice.edu/~willy/papers/computer95.ps.gz},
}

@Article{StarDust,
  author =   {Cabillic, G. and  Puaut, I.},
  title =    {{Stardust: an Environment for Parallel Programming on Networks of Heterogeneous Workstations}},
  journal =      {J.\ of Parallel and Distributed Computing},
  year =     1997,
  volume =   40,
  number =   1,
  month =    jan,
  documentURL =  {http://www.irisa.fr/solidor/doc/ps97/stardust-jpdc.ps.gz}
}

@PhdThesis{Hamster,
  author =   {Martin Schulz},
  title =    {{Shared Memory Programming on NUMA-based Clusters using a General and Open Hybrid Hardware / Software Approach}},
  school =   {Technical University Munich},
  year =     2001,
  month =    jul,
  documentURL =  {http://www.lrr.in.tum.de/archiv/smile/2001-07-ms-phd.pdf},
}

@TechReport{Millipede,
  author =   {Ayal Itzkovitz and Assaf Schuster},
  title =    {{Distributed Shared Memory: Bridging the Granularity Gap}},
  institution =  {Technion, Israel Institute of Technology},
  year =     1998,
  number =   {CS-0953},
  month =    dec,
  documentURL =  {http://dsl.cs.technion.ac.il/projects/millipede/papers/hot.ps}
}


@InProceedings{Filaments94,
  author =   {Vincent W. Freeh and David K. Lowenthal and Gregory R. Andrews},
  title =    {{Distributed Filaments: Efficient Fine-Grain Parallelism on a Cluster of Workstations}},
  booktitle =    {{Symposium on Operating Systems Design and Implementation}},
  pages =    {201--212},
  year =     1994,
  address =  {Monterey, CA},
  month =    nov,
  documentURL =  {http://www.cs.uga.edu/~dkl/research/papers/df.ps},
}

@phdthesis{goldstein-phd97,
  title = {Lazy Threads Compiler and Runtime Structures for
     Fine-Grained Parallel Programming},
  url = {http://www.cs.cmu.edu/~seth/papers/goldstein-phd97.pdf},
  author = {Goldstein, Seth Copen},
  school = {University of California--Berkeley},
  year = {1997},
  address = {Berkeley, CA},
  keywords = {Lazy Threads,Parallel Computing,Split-C,Threaded
     Abstract Machine (TAM)}
}
@article{goldstein96-jpdc,
  author = {Goldstein, Seth Copen and Schauser, Klaus Erik and Culler,
     David E.},
  title = {Lazy threads: implementing a fast parallel call},
  journal = {Journal of Parallel and Distributed Computing},
  volume = {37},
  number = {1},
  year = {1996},
  pages = {5--20},
  publisher = {Academic Press, Inc.},
  address = {Orlando, FL, USA},
  keywords = {Lazy Threads, Parallel Computing},
  url = {http://www.cs.cmu.edu/~seth/papers/goldstein96-jpdc.pdf},
  abstract = {In this paper, we describe lazy threads, a new approach
     for implementing multithreaded execution models on conventional
     machines. We show how they can implement a parallel call at
     nearly the efficiency of a sequential call. The central idea is
     to specialize the representation of a parallel call so that it
     can execute as a parallel-ready sequential call. This allows
     excess parallelism to degrade into sequential calls with the
     attendant efficient stack management and direct transfer of
     control and data, yet a call that truly needs to execute in
     parallel, gets its own thread of control. The efficiency of lazy
     threads is achieved through a careful attention to storage
     management and a code generation strategy that allows us to
     represent potential parallel work with no overhead.}
}

@InProceedings{KHM89,
  author =   {Kranz, D.A. and {Halstead Jr.}, R.H. and Mohr, E.},
  title =    {{Mul-T: A High-Performance Parallel Lisp}},
  booktitle =    {{PLDI'91 --- Programming Languages Design and
                   Implementation}},
  volume =   {24(7)},
  OPTnumber =    7,
  series =   {SIGPLAN Notices},
  year =     1989,
  address =  {Portland (OR)},
  month  = {June},
  pages =    {81--90},
  annote =   {one of first mentions of lazy futures; uses mostly
                  load-based inlining while developing Mul-T},
  abstract =     "Mul-T is a parallel Lisp system, based on Multilisp's
                 {\tt future} construct, that has been developed to run
                 on an Encore Multimax processor. Mul-T is an extended
                 version of the Yale T system and uses the T system's
                 ORBIT compiler to achieve ``production quality''
                 performance on stock hardware --- about 100 times
                 faster than Multilisp. Mul-T shows that futures can be
                 implemented cheaply enough to be useful in a
                 production-quality system. Mul-T is fully operational,
                 including a user interface that supports managing
                 groups of parallel tasks.",
  keywords =     "Lisp, Futures",
}

@inproceedings{MKH90,
  author =    {Mohr, E. and Kranz, D.A. and {Halstead Jr.}, R.H.},
  title =     {{Lazy Task Creation: A Technique for Increasing the
                Granularity of Parallel Programs}},
  booktitle = {{LFP'90 --- Conference on Lisp and Functional Programming}},
  address =   {Nice, France, June 27--29},
  year =      {1990},
  pages =     {185--197},
  descr =     {plfun,psben,psenv},
  url =       {ftp://crl.dec.com/pub/DEC/CRL/tech-reports/90.7.ps.Z},
  abstract =  "Many parallel algorithms are naturally expressed at a fine level of
granularity, often finer than a MIMD parallel system can exploit
efficiently. Most builders of parallel systems have looked to either the
programmer or a parallelizing compiler to increase the granularity of such
algorithms. In this paper we explore a third approach to the granularity
problem by analyzing two strategies for combining parallel tasks dynamically
at run-time. We reject the simpler load-based inlining method, where tasks are
combined based on dynamic load level, in favor of the safer and more robust
lazy task creation method, where tasks are created only retroactively as
processing resources become available.

These strategies grew out of work on Mul-T, an efficient parallel
implementation of Scheme, but could be used with other languages as well. We
describe our Mul-T implementations of lazy task creation for two contrasting
machines, and present performance statistics which show the method's
effectiveness. Lazy task creation allows efficient execution of naturally
expressed algorithms of a substantially finer grain than possible with
previous parallel Lisp systems.
",
}

@article{MKH91,
  author =    {Mohr, E. and Kranz, D.A. and {Halstead Jr.}, R.H.},
  title =     {{Lazy Task Creation: A Technique for Increasing the
                Granularity of Parallel Programs}},
  journal =   {{IEEE Transactions on Parallel and Distributed Systems}},
  volume =    {2},
  number =    {3},
  pages =     {264--280},
  month =     {July},
  year =      {1991},
  descr =     {plfun,psben,psenv},
  keywords =  {parallel programming languages, load balancing, program partitioning, process migration, parallel Lisp, task management},
  url =       {ftp://cag.lcs.mit.edu/pub/papers/futures.ps.Z},
  abstract =  "Many parallel algorithms are naturally expressed at a fine level of
granularity, often finer than a MIMD parallel system can exploit
efficiently. Most builders of parallel systems have looked to either the
programmer or a parallelizing compiler to increase the granularity of such
algorithms. In this paper we explore a third approach to the granularity
problem by analyzing two strategies for combining parallel tasks
dynamically at run-time. We reject the simpler load-based inlining method,
where tasks are combined based on dynamic load level, in favor of the safer
and more robustlazy task creation method, where tasks are created only
retroactively as processing resources become available. These strategies
grew out of work on Mul-T [15], an efficient parallel implementation of
Scheme, but could be used with other languages as well. We describe our
Mul-T implementations of lazy task creation for two contrasting machines,
and present performance statistics which show the method's
effectiveness. Lazy task creation allows efficient execution of naturally
expressed algorithms of a substantially finer grain than possible with
previous parallel Lisp systems."
}


@Article{Hals85,
  author =       {{Halstead, Jr.}, R.H.},
  title =        {{Multilisp: A Language for Concurrent Symbolic
                 Computation}},
  journal =      toplas,
  volume =       {7},
  number =       {4},
  month =        oct,
  year =         {1985},
  pages =        {501--538},
  abstract =     "Multilisp is a version of the Lisp dialect Scheme
                 extended with constructs for parallel execution. Like
                 Scheme, Multilisp is oriented toward symbolic
                 computation. Unlike some parallel programming
                 languages, Multilisp incorporates constructs for
                 causing side effects and for explicitly introducing
                 parallelism. The potential complexity of dealing with
                 side effects in a parallel context is mitigated by the
                 nature of the parallelism constructs and by support for
                 abstract data types: a recommended Multilisp
                 programming style is presented which, if followed,
                 should lead to highly parallel, easily understandable
                 programs. Multilisp is being implemented on the 32
                 processor {\em Concert\/} multiprocessor; however, it
                 is ultimately intended for use on larger
                 multiprocessors. The current implementation, called
                 {\em Concert Multilisp\/}, is complete enough to run
                 the Multilisp compiler itself and has been run on
                 Concert prototypes including up to eight processors.
                 Concert Multilisp uses novel techniques for task
                 scheduling and garbage collection. The task scheduler
                 helps control excessive resource utilization by means
                 of an unfair scheduling policy; the garbage collector
                 uses a multiprocessor algorithm based on the
                 incremental garbage collector of Baker.",
  keywords =     "Lisp, Futures",
}


@Article{NESLCACM,
  author =   {Guy E. Blelloch},
  title =    {{Programming Parallel Algorithms}},
  journal =      {{Communications of the ACM}},
  year =     1996,
  volume =   39,
  number =   3,
  month =    mar,
  documentURL =  {http://www.cs.cmu.edu/~scandal/cacm.html}
}

@Article{HaCo02,
  author =   {Yasushi Hayashi and Murray Cole},
  title =    {{Static Performance Prediction of Skeletal Programs}},
  journal =      {Parallel Algorithms and Applications},
  year =     2002,
  volume =   17,
  number =   1,
  pages =    {59--84},
  documentURL =  {http://homepages.inf.ed.ac.uk/mic/Pubs/paa-paper.pdf},
}

@Article{BSP,
  author =   {Valiant, L.G.},
  title =    {{A Bridging Model for Parallel Computation}},
  journal =      {{Communications of the ACM}},
  year =     1990,
  volume =   33,
  number =   8,
  pages =    {103--111},
  month =    aug,
  annote =   {std reference for BSP}
}

@TechReport{SkCa93,
  author =   {Skillicorn, D.B. and Cai, W.},
  title =    {{A Cost Calculus for Parallel Functional Programming}},
  institution =  {Queens University},
  year =     {1993},
  number =   {ISSN-0836-0227-93-348},
  address =  {Kingston, Canada},
  url =          {ftp://ftp.qucis.queensu.ca/pub/skill/costcalculusII.ps.Z}
}

@InProceedings{Rang95,
  author =   {Rangaswami, R.},
  title =    {{HOPP --- A Higher-order Parallel Programming Model}},
  booktitle =    {Algorithms and Parallel VLSI Architectures},
  editor =   {Moonen, M. and Cathoor, F.},
  year =     1995,
  publisher =    {Elsevier Science},
  keywords =     {Parallelisation Techniques, Functional Programming, Bird-Meertens Formalism, Higher-Order Functions, Compile-time Analysis, D-M MIMD Machines.},
  url =  {http://www.dcs.ed.ac.uk/home/ror/PAPERS/palgarc.ps.gz},
  abstract =     "The   efficient programming of    parallel computers is   still a difficult
task. This paper focuses on  studying methods for expressing parallelism in
programs without   making   the  programmer   explicitly  responsible   for
parallelism. Parallel programming using a set of useful implicitly-parallel
constructs is  considered. These constructs are   borrowed from FP  and the
Bird-Meertens  approach.  Programs   are  analysed  statically,  using   an
analytical cost model which  selects a cost-effective implementation for  a
chosen architecture. A  brief overview of  the model  is presented  and its
operation is demonstrated with the aid of two case studies."
}

@InProceedings{JCSS97,
  author =       {Jay, C.B. and Cole, M.I. and Sekanina, M. and Steckler, P.},
  title =        {{A Monadic Calculus for Parallel Costing of a Functional
                   Language of Arrays}},
  booktitle =    {{EuroPar97 --- Parallel Processing}},
  OPTeditor =       {C. Lengauer and M. Griebl and S. Gorlatch},
  volume =       {1300},
  series =       LNCS,
  year =         {1997},
  publisher =    S-V,
  month =        {August},
  pages =        {650--661},
}

% already in dfg.bib
@Article{SkTa98-Duplicate, 
  author =   {Skillicorn, D.B. and Talia, D.},
  title =    {{Models and Languages for Parallel Computation}},
  journal =      {ACM Computing Surveys},
  year =     1998,
  month =    {June},
  url =          {http://www.cs.queensu.ca/home/skill/models.ps},
  abstract =     "We  survey many  parallel programming  models  and languages.   We use  six
criteria  to  assess  their  suitability for  realistic  portable  parallel
programming, arguing that an ideal  model should be easy to program, should
have     a     software      development     methodology,     should     be
architecture-independent,   should  be  easy   to  understand,   should  be
efficiently  implementable, and should  provide accurate  information about
the cost  of programs.  We consider programming  models in  six categories,
depending on  the level of abstraction  they provide.  Those  that are very
abstract conceal even  the use of parallelism from  the software. They make
software  easy  to  build and  port,  but  efficiency  is usually  hard  to
achieve. At the other end of the spectrum, low-level models make all of the
messy issues  of parallel  programming explicit (how  many threads,  how to
place   them,  how   to  express   communication,  and   how   to  schedule
communication), so  that software is hard  to build and  not very portable,
but is usually  efficient.  Most recent models are near  the center of this
spectrum,  exploring   the  best  trade-offs   between  expressiveness  and
efficiency. However, there are models that are both abstract and able to be
implemented efficiently, opening the prospect of parallelism as part of the
mainstream of computing, rather than a high-performance backwater."
}

@TechReport{Skil92a,
  author =   {Skillicorn, D.B.},
  title =    {{Parallelism and the Bird-Meertens Formalism}},
  institution =  {Department of Computing and Information Science},
  year =     1992,
  address =  {Queen's University, Kingston, Canada},
  month =    {Apr}
}

@InProceedings{Skil92,
  author =   {Skillicorn, D.B.},
  title =    {{The Bird-Meertens Formalism as a Parallel Model}},
  booktitle =    {{Software for Parallel Computation}},
  year =     1992,
  address =  {Cosenza, Italy},
  month =    jun
}

@Book{Skil94,
  author =   {Skillicorn, D.B.},
  title =    {{Foundations of Parallel Programming}},
  publisher =    CUP,
  year =     1994,
  series =   {Cambridge Intl.\ Series in Parallel Computation}
}

@INPROCEEDINGS{agdkse06,
  AUTHOR = {Alt, M. and  Dumitrescu, C. and  Gorlatch, S. and  Kertesz, A. and  Sipos, G. and Epema, D.H.J.},
  TITLE = {{Towards User-transparent Performance Prediction for Workflows of Higher-Order Components}},
  BOOKTITLE = {{Proceedings of the CoreGRID Integration Workshop}},
  YEAR = {2006},
  OPTEDITOR = {Sergei Gorlatch, Marian Bubak, Thierry Priol},
  PUBLISHER = {CYFRONET Poland},
  OPTNOTE = {ISBN 83-915141-6-1},
  PAGES = {345--356}
}

@PhdThesis{Alt07,
  author =       {Martin Alt},
  title =        {Using Algorithmic Skeletons for Efficient Grid Computing with Predictable Performance},
  school =       {Universit\"at M\"unster},
  year =         2007,
  month =     {July},
  documentURL =  {http://wwwmath.uni-muenster.de/pvs/publikationen/papers/AltDiss.pdf},
}

@misc{grove-performance,
  author = "D.A. Grove and P.D. Coddington",
  title = "A Performance Modeling System for Message-Passing Parallel Programs",
  url = "citeseer.ist.psu.edu/grove01performance.html" }

@ARTICLE{Gorl00,
  AUTHOR = {Sergei Gorlatch and Christian Lengauer},
  TITLE = {Abstraction and performance in the design of parallel programs: overview of the {SAT} approach},
  JOURNAL = {Acta Informatica},
  YEAR = {2000},
  VOLUME = {36},
  NUMBER = {9},
  PAGES = {761--803}
}

@inproceedings{SplitC,
  author = {Culler, D.E. and Dusseau, A. and Goldstein, S.C.
      and Krishnamurthy, A. and Lumetta, S. and
     {von~Eicken}, T. and Yelick, K.},
  title = {{Parallel Programming in Split-C}},
  booktitle = {Proc.\ of the Supercomputing '93 Conference},
  pages = {262--273},
  year = {1993},
  address = {Portland, OR},
  month = {Nov},
  keywords = {Active Messages,Parallel Computing},
  url = {http://www.cs.cmu.edu/~seth/papers/culler-sc93.pdf},
  abstract = "We introduce the Split-C language, a parallel extension of C intended for
 high performance programming on distributed memory multiprocessors, and
 demonstrate the use of the language in optimizing parallel
 programs. Split-C provides a global address space with a clear concept of
 locality and unusual assignment operators. These are used as tools to
 reduce the frequency and cost of remote access. The language allows a
 mixture of shared memory, message passing, and data parallel programming
 styles while providing efficient access to the underlying machine. We
 demonstrate the basic language concepts using regular and irregular
 parallel programs and give performance results for various stages of
 program optimization."
}


@InProceedings{LogP,
  author =   {Culler, D.E. and  Karp, R. and  Patterson, D. and  Sahay, A. and  Schauser, K.E. and  Santos, E. and  Subramonian, R. and {von Eicken}, T.},
  title =    {{LogP: Towards a Realistic Model of Parallel Computation}},
  booktitle =    {Symp.\ on Principles and Practice of Parallel Programming (PPoPP93)},
  year =     1993,
  address =  {San Diego, CA},
  month =    may,
  abstract = "A vast body of theoretical research has focused either on overly
 simplistic models of parallel computation, notably the PRAM, or overly
 speci\256c models that have few representatives in the real world. Both
 kinds of models encourage exploitation of formal loopholes, rather than
 rewarding development of techniques that yield performance across a range
 of current and future parallel machines. This paper offers a new parallel
 machine model, called LogP , that reflects the critical technology
 trends underlying parallel computers. It is intended to serve as a basis
 for developing fast, portable parallel algorithms and to offer guidelines
 to machine designers. Such a model must strike a balance between detail
 and simplicity in order to reveal important bottlenecks without making
 analysis of interesting problems intractable. The model is based on four
 parameters that specify abstractly the computing bandwidth, the
 communication bandwidth, the communication delay, and the efficiency of
 coupling communication and computation. Portable parallel algorithms
 typically adapt to the machine configuration, in terms of these
 parameters. The utility of the model is demonstrated through examples that
 are implemented on the CM-5."
}


@Article{STM-NOT,
  title =   "Transactional Execution of Java Programs",
  author =  "Brian D. Carlstrom and JaeWoong Chung and Hassan Chafi
         and Austen McDonald and Chi Cao Minh and Lance Hammond
         and Christos Kozyrakis and Kunle Olukotun",
  year =    "2096",
  abstract =    "Parallel programming is difficult due to the
         complexity of dealing with conventional lock-based
         synchronization. To simplify parallel programming,
         there have been a number of proposals to support
         transactions directly in hardware and eliminate locks
         completely. Although hardware support for transactions
         has the potential to completely change the way parallel
         programs are written, initially transactions will be
         used to execute existing parallel programs. In this
         paper we investigate the implications of using
         transactions to execute existing parallel Java
         programs. Our results show that transactions can be
         used to support all aspects of Java multithreaded
         programs. Moreover, the conversion of a lock-based
         application into transactions is largely
         straightforward. The performance that these converted
         applications achieve is equal to or sometimes better
         than the original lock-based implementation.",
  bibsource =   "OAI-PMH server at dspace.lib.rochester.edu",
  format =  "223931 bytes",
  language =    "en_US",
  subject = "transactions; java; feedback optimization",
  URL =     "http://hdl.handle.net/1802/2096",
}

@InProceedings{STM,
  author =  {Carlstrom, B.D. and  Chung, J.W. and  Chafi. H.
         and  McDonald, A. and  Minh, C.C. and  Hammond, L.
         and  Kozyrakis, C. and  Olukotun, K.},
  title = 	 {{Transactional Execution of Java Programs}},
  booktitle =	 {{Synchronization and Concurrency in Object-Oriented Languages (SCOOL)}},
  year =	 2005,
  address =	 {San Diego, California, USA},
  month =	 oct,
  URL =     {http://hdl.handle.net/1802/2096},
}

@InProceedings{HaskellSTM,
  author =   {Anthony Discolo, Tim Harris, Simon Marlow, Simon Peyton Jones, and Satnam Singh},
  title =    {{Lock-Free Data Structures using STMs in Haskell}},
  booktitle =    {International Symposium on Functional and Logic Programming (FLOPS'06)},
  year =     2006,
  month =    apr,
  documentURL =  {http://research.microsoft.com/Users/simonpj/papers/stm/lock-free-flops06.pdf}
}
 

% -----------------------------------------------------------------------------

%
% main bib-file for DFG project application,
%  insert all relevant cited work
%  but perhaps separate own work into own file.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Phil to cross-check these:

@InProceedings{HumeDesign,
author = {Hammond, Kevin and Michaelson, Greg J.},
title = {{Hume: a Domain-Specific Language for Real-Time Embedded Systems}},
booktitle = {{GPCE'03 --- Conf.\ on Generative Programming and Component Engineering}},
publisher = {Springer-Verlag},
series = {LNCS},
year = {2003}
}

@Article{mHaskell,
  title =   "mHaskell: Mobile Computation in a Purely Functional
         Language",
  author =  "Andr\'{e} Rauber Du Bois and Phil W. Trinder and
         Hans-Wolfgang Loidl",
  journal = "J. UCS",
  year =    "2005",
  number =  "7",
  volume =  "11",
  bibdate = "2005-11-14",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/journals/jucs/jucs11.html#BoisTL05",
  pages =   "1234--1254",
  URL =     "http://www.jucs.org/jucs_11_7/mhaskell_mobile_computation_in",
}


@Article{mobskels,
  title =   "Autonomous mobility skeletons",
  author =  "Xiao Yan Deng and Greg Michaelson and Phil W.
         Trinder",
  journal = "Parallel Computing",
  year =    "2006",
  number =  "7-8",
  volume =  "32",
  bibdate = "2007-02-26",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/journals/pc/pc32.html#DengMT06",
  pages =   "463--478",
  URL =     "http://dx.doi.org/10.1016/j.parco.2006.04.002",
}

% surely wrong.
% I understand "Hume Implementation GdH IFL", did you mean Robert's *talk* ?
@inproceedings{HumeImplGdHIFL,
  OPTvolume = {4449},
  author = {Kevin Hammond and Gudmund Grov and Greg J. Michaelson and Andrew Ireland},
  OPTnote = {To appear.},
  series = {LNCS 4449},
  keywords = {hume,embounded},
  booktitle = {18th Intl.\ Symposium on the
               Implementation of Functional Languages (IFL 2006)},
  title = {Low-Level Programming in {H}ume: an Exploration of the {HW-Hume} Level},
  publisher = {Springer},
  year = {2007},
  bibsource = {http://www-fp.cs.st-andrews.ac.uk/hume/papers/bib.shtml?2007}
}

@Article{CPEagain,
  author =   {Loidl, Hans-Wolfgang and Trinder, Phil W. and Hammond, Kevin and Junaidu, Sahalu B. and Morgan, Richard G. and {Peyton Jones}, Simon L.},
  title =    {{Engineering Parallel Symbolic Programs in GPH}},
  journal =      {Concurrency -- Practice and Experience},
  year =     1999,
  volume =       {11},
  issue =        {12},
  pages =        {701--752},
  url =          {http://www.cee.hw.ac.uk/\~{}dsg/gph/papers/ps/cpe-gph.ps.gz},
}

@InProceedings{ICFP,
  title =   {{Evaluating High-Level Distributed Language Constructs}},
  author =  {Jann H. Nystr\"om and Phil W. Trinder and David J. King},
  year =    {2007},
  booktitle =   {ICFP},
  OPTcrossref =  {},
  OPTkey =   {},
  OPTpages =     {},
  OPTeditor =    {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  address =      {Freiburg, Germany},
  month =    {September},
  OPTorganization = {},
  OPTpublisher = {},
  note =     {(preprint available online)},
  OPTannote =    {}
}

@Article{TPDS,
  title =   {Evaluating a High-Level Parallel Language (GpH) for Computational GRIDs},
  author =  {Abyd D. Al Zain and Phil W. Trinder and Greg J. Michaelson and Hans-Wolfgang Loidl},
  journal = {IEEE Trans. Parallel Distrib. Syst},
  year =    {2007},
  OPTnumber =   {},
  OPTvolume =   {},
  OPTpages =    {},
  note =    {(accepted for publication)},
}


%%%%%%%%%%%%%%%%%%%
% cited in rel.work section, pls. do not change label!
@InProceedings{GdHIFL,
author ={Pointon, Robert F. and Trinder, Phil W. and Loidl, Hans-Wolfgang},
title = {{The Design and Implementation of Glasgow distributed Haskell}},
booktitle= {{IFL'00}},
address={Aachen, Germany},
month = sep,
year= {2000},
annote = {std Gdh ref},
pages = {101--116},
series = {LNCS 2011},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (other) related work references:

@article{NASbenchmarks,
    author = "D. H. Bailey and E. Barszcz and J. T. Barton and D. S. Browning and R. L. Carter and D. Dagum and R. A. Fatoohi and P. O. Frederickson and T. A. Lasinski and R. S. Schreiber and H. D. Simon and V. Venkatakrishnan and S. K. Weeratunga",
    title = "The NAS Parallel Benchmarks",
    journal = "The International Journal of Supercomputer Applications",
    volume = "5",
    number = "3",
    month = "Fall",
    pages = "63--73",
    year = "1991",
    url = "citeseer.ist.psu.edu/bailey95nas.html"
}


@TechReport{NASbenchmarks-,
  author =   {},
  title =    {},
  institution =  {},
  year =     {},
  OPTkey =   {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  OPTnote =      {},
  OPTannote =    {}
}

% gorlatch on send/receive:
@article{Gorlatch:SendReceive04,
 author = {Sergei Gorlatch},
 title = {Send-receive considered harmful: Myths and realities of message passing},
 journal = {ACM TOPLAS},
 volume = {26},
 number = {1},
 year = {2004},
 OPTissn = {0164-0925},
 pages = {47--56},
 doi = {http://doi.acm.org/10.1145/963778.963780},
 publisher = {ACM},
 address = {New York, USA},
 }

@InProceedings{ManticoreReport,
  author =   {Matthew Fluet and Nic Ford and Mike Rainey and John Reppy and Adam Shaw and Yingqi Xiao},
  title =    {{Status Report: The Manticore Project}},
  OPTcrossref =  {},
  OPTkey =   {},
  booktitle = {Proceedings of the ACM SIGPLAN Workshop on ML},
  OPTpages =     {},
  year =     {2007},
  OPTeditor =    {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  address =      {Freiburg, Germany},
  month =    {October},
  OPTorganization = {},
  OPTpublisher = {},
  note =     {(available online)},
  OPTannote =    {}
}

@Misc{intelMulti-core,
  OPTkey =   {},
  author =   {Intel Corp.},
  title =    {{Tera-scale Computing}},
  howpublished = {Research initiative},
  OPTmonth =     {},
  OPTyear =      {},
  note =     {Information at
                  \texttt{\small http://www.intel.com/research/platform/terascale/}},
  OPTannote =    {}
}

@Misc{intelTBB,
  OPTkey =   {},
  author =   {Intel Corp.},
  title =    {{Threading Analysis Tools}},
  howpublished = {Product Line },
  OPTmonth =     {},
  OPTyear =      {},
  note =     {Information at
                  \texttt{\small http://www.intel.com/cd/software/products/asmo-na/eng/threading//}},
  OPTannote =    {}
}


@Misc{IntelClusterOpenMP,
  OPTkey =   {},
  author =   {Jay P. Hoeflinger},
  title =    {{Extending OpenMP to Clusters}},
  howpublished = {Intel White Paper},
  OPTmonth =     {},
  year =     {2006},
  note =     {\texttt{\small http://www.intel.com/cd/software/products/asmo-na/eng/285865.htm}},
  OldNote =   {\texttt{\small http://www.intel.com/cd/software/products/asmo-na/eng/329076.htm}},
  OPTannote =    {}
}


@Manual{PVM,
  key =      {PVM},
  title =    {{Parallel Virtual Machine Reference Manual, Version 3.2}},
  OPTauthor =    {Oak Ridge National Laboratory},
  address =  {University of Tennessee},
  month =    {August},
  year =     1993
}

@InProceedings{Peng07,
  author =   {{Peng Li} and Tolmach, A. and Marlow, S. and {Peyton Jones}, S.},
  title =    {{Lightweight Concurrency Primitives for GHC}},
  booktitle =    {Haskell Workshop},
  year =     2007,
  address =  {Freiburg, Germany},
  OPTmonth =     {Sept.},
  pages =        {107--118},
  url =          {http://research.microsoft.com/Users/simonpj/papers/lw-conc/lw-conc.pdf}
}



@PhdThesis{PhDPengLi,
  author =   {{Peng Li}},
  title =    {{Programmable Concurrency in a Pure and Lazy Language}},
  school =   {Department of Computer and Information Science},
  year =     2008,
  address =      {Univ.\ of Pennsylvania },
  month =    aug,
  url = {http://www.cis.upenn.edu/~lipeng/homepage/papers/dissertation.pdf},
}

@inproceedings{GHCpaper,
author = {Simon L. {Peyton Jones} and Cordy Hall and Kevin Hammond and Will Partain and Phil Wadler},
title = {{The Glasgow Haskell Compiler: A Technical Overview}},
booktitle = {{Joint Framework for Information Technology Technical Conference, Keele}},
year = 1993
}


@InProceedings{Eden:IFL00,
  author =   {Klusik, U. and Loogen, R. and Priebe, S. and Rubio, F.},
  title =    {{Implementation Skeletons in Eden --- Low-Effort Parallel Programming}},
  booktitle =    {{IFL'00 --- Intl.\ Workshop on the Implementation of Functional Languages}},
  address =      {Aachen, Germany},
  month =        Sep,
  year =         2000,
  publisher =    {Springer},
  OPTyear =         2001,
  pages =    {71--88},
  series =       {LNCS 2011},
  OPTvolume =       {2011},
  OPTnote =  {}
}

@InCollection{Eden:SkeletonBookChapter02-,
  author =   {Loogen, R. and {Ortega-Mall\'{e}n}, Y. and {Pe\~{n}a}, R. and Priebe, S.
                and Rubio, F.},
  title =    {{Parallelism Abstractions in Eden}},
  booktitle =    {{Patterns and Skeletons for Parallel and Distributed Computing}},
  editor = {F. A. Rabhi, S. Gorlatch},
  chapter =      {2},
  publisher =    {Springer},
  year =     {2003},
  OPTkey =   {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  OPTtype =      {},
  OPTaddress =   {},
  OPTedition =   {},
  OPTmonth =     {},
  OPTpages =     {},
  OPTnote =      {},
  OPTannote =    {}
}

@Book{SkeletonBook-,
  title =  {{Patterns and Skeletons for Parallel and Distributed Computing}},
  editor = {Fethi A. Rabhi and Sergej Gorlatch},
  year =         {2002},
  publisher = {Springer},
}

@Article{HDCSkel,
  author =   {Herrmann, C.A.},
  title =    {{Generating Message-passing Programs from Abstract Specifications by Partial Evaluation}},
  journal =      {{Parallel Processing Letters}},
  year =     2005,
  volume =   15,
  number =   3,
  pages =    {305--320}
}

@MISC{eSkel,
  author =       "Anne Benoit and Murray Cole",
  title =        "{eSkel -- The Edinburgh Skeleton Library}",
  year =         "University of Edinburgh 2002",
  note =       "{\small\tt http://homepages.inf.ed.ac.uk/abenoit1/eSkel/}",
}

@MISC{KuchenMPRLibrary,
  author =       "Herbert Kuchen",
  title =        "{The M\"unster Skeleton Library Muesli}",
  year =         "{University of M\"unster 2002}",
  note =       "{\small\tt http://danae.uni-muenster.de/lehre/kuchen/Skeletons/}",
}

@InProceedings{Kuchen05,
  title =   "Scalable Farms",
  author =  "Michael Poldner and Herbert Kuchen",
  bibdate = "2006-11-20",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/parco/parco2005.html#PoldnerK05",
  OPTbooktitle= "Parallel Computing: Current \& Future Issues of
         High-End Computing, Proceedings of the International
         Conference ParCo 2005, 13-16 September 2005, Department
         of Computer Architecture, University of Malaga, Spain",
  booktitle =   "Parallel Computing: Current \& Future Issues of
         High-End Computing, Proceedings of ParCo 2005",
  address =     "Malaga, Spain",
  publisher =   "Central Institute for Applied Mathematics, J{\"u}lich,
         Germany",
  year =    "2005",
  editor =  "Gerhard R. Joubert and Wolfgang E. Nagel and Frans J.
         Peters and Oscar G. Plata and P. Tirado and Emilio L.
         Zapata",
  ISBN =    "3-00-017352-8",
  OPTpages =    "795--802",
  series =  "NIC Series, vol.33",
  OPTvolume =   "33",
  OPTseries =   "John von Neumann Institute for Computing Series",
}




@ARTICLE{Kalinowski05b,
  AUTHOR =       "Eva Kalinowski and W\l{}adys\l{}aw Gluza",
  TITLE =        "{Evaluation of High Order Terms for the Hubbard Model in the Strong-coupling Limit}",
  JOURNAL =      "submitted to Physical Review B",
  XYEAR =         "2005",
  NOTE =         "10 pages (under revision)",
}

@ARTICLE{Kalinowski05a,
  AUTHOR =       {Nils Bl\"umer and  Eva Kalinowski},
  TITLE =        {Mott insulator: Tenth-order perturbation theory extended to infinite order using a quantum Monte Carlo scheme},
  JOURNAL =      {Physical Review B},
  YEAR =         {2005},
  Volume = 71,
  Number = 19,
  NOTE =         {195102 (5)},
}

@PHDTHESIS{KalinowskiThesis,
  AUTHOR =       "Eva Kalinowski",
  TITLE =        "Mott-Hubbard Isolator in hoher Dimension",
  SCHOOL =       "Philipps-Universitaet Marburg",
  YEAR =         "2002",
}

@InProceedings{GHC-SMP,
  title =   "Haskell on a shared-memory multiprocessor",
  author =  "Tim Harris and Simon Marlow and Simon L. Peyton
         Jones",
  bibdate = "2007-10-31",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/haskell/haskell2005.html#HarrisMJ05",
  booktitle =   "Proceedings of the {ACM} {SIGPLAN} Workshop on
         Haskell, Haskell 2005, Tallinn, Estonia, September 30,
         2005",
  publisher =   "ACM",
  year =    "2005",
  editor =  "Daan Leijen",
  ISBN =    "1-59593-071-X",
  pages =   "49--61",
  URL =     "http://doi.acm.org/10.1145/1088348.1088354",
}

@InProceedings{HarrisICFP07,
  title =   "Feedback directed implicit parallelism",
  author =  "Tim Harris and Satnam Singh",
  bibdate = "2007-11-06",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/icfp/icfp2007.html#HarrisS07",
  booktitle =   "Proceedings of the 12th {ACM} {SIGPLAN} International
         Conference on Functional Programming, {ICFP} 2007,
         Freiburg, Germany, October 1-3, 2007",
  publisher =   "ACM",
  year =    "2007",
  editor =  "Ralf Hinze and Norman Ramsey",
  ISBN =    "978-1-59593-815-2",
  pages =   "251--264",
  URL =     "http://doi.acm.org/10.1145/1291151.1291192",
}

@Misc{NESLwww,
  OPTkey =   {},
  author =   "Guy Blelloch",
  title =    {{NESL: A Parallel Programming Language}},
  howpublished = {Website \texttt{\small http://www.cs.cmu.edu/\~{}scandal/nesl.html}},
  OPTmonth =     {},
  OPTyear =      {},
  OPTnote =      {},
  OPTannote =    {}
}


@Book{Blel90,
  author =   {Guy Blelloch},
  title =    {{Vector Models for Data-Parallel Computing}},
  publisher =    {MIT Press},
  year =     1990
}

@Misc{HPF,
  OPTkey =   {},
  author =   "Chuck Koelbel",
  title =    {{High Performance Fortran}},
  howpublished = {Website \texttt{\small http://hpff.rice.edu/}},
  OPTmonth =     {},
  OPTyear =      {},
  OPTnote =      {},
  OPTannote =    {}
}




@InProceedings{nepal,
  title =   "NEPAL -- Nested Data-Parallelism in Haskell",
  author =  "Manuel M.T. Chakravarty and Gabriele Keller and Roman Leshchinskiy and Wolf Pfannenstiel",
  booktitle =   "Euro-Par 2001: Parallel Processing",
  publisher =   "Springer LNCS 2150",
  year =    "2001",
  pages =   "524--534",
  URL =     "http://www.cse.unsw.edu.au/\~{}chak/papers/CKLP01.html",
}

@ARTICLE{AbstractMachines,
  author =       {Diehl, S. and Hartel, P.H. and Sestoft, P.},
  title =        {{Abstract Machines for Programming Language Implementation}},
  journal =      {Future Generation Computer Systems},
  year =         {2000},
  volume =       {16},
  number =       {7},
  pages =        {739--751},
}

@article{ICFP08,
  author =   {Jost, S. and  Hammond, K. and  Loidl, H-W. and  Hofmann, M.},
  title =    {{Generic Amortised Resource Analysis for Higher-Order Functional Programs}},
  journal =  {{Higher-order and Symbolic Computation}},
  year =     2009,
  note =     {In preparation}
}


@TechReport{DaAl08,
  author =   {Danelutto, M. and Aldinucci, M.},
  title =    {{Towards Hierarchical Management of Autonomic Components: a Case Study}},
  institution =  {Dept of Computer Science},
  year =     2008,
  type =     {CoreGRID Technical Report},
  number =   {TR-0127},
  address =  {Univ of Pisa},
  month =    mar
}

@Article{XFEM,
  author =   {Gerstenberger, A. and Wall, W.A.},
  title =    {An extended finite element method/Lagrange multiplier based approach for fluid-structure interaction},
  journal =      {{Computer Methods in Applied Mechanics and Engineering}},
  year =     2008,
  volume =   197,
  number =   {19--20},
  pages =    {1699--1714},
  month =    mar
}

@Article{journals/jfp/Hofmann99,
  title =   "Semantics of Linear/Modal Lambda Calculus",
  author =  "Martin Hofmann",
  journal = "J. Funct. Program",
  year =    "1999",
  number =  "3",
  volume =  "9",
  bibdate = "2004-03-19",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/journals/jfp/jfp9.html#Hofmann99",
  pages =   "247--277",
}

@InProceedings{conf/fsttcs/DaxHL06,
  title =   "A Proof System for the Linear Time {$\mu$}-Calculus",
  author =  "Christian Dax and Martin Hofmann and Martin Lange",
  bibdate = "2006-12-04",
  bibsource =   "DBLP,
         http://dblp.uni-trier.de/db/conf/fsttcs/fsttcs2006.html#DaxHL06",
  booktitle =   "FSTTCS",
  booktitle =   "{FSTTCS} 2006: Foundations of Software Technology and
         Theoretical Computer Science, 26th International
         Conference, Kolkata, India, December 13-15, 2006,
         Proceedings",
  publisher =   "Springer",
  year =    "2006",
  volume =  "4337",
  editor =  "S. Arun-Kumar and Naveen Garg",
  ISBN =    "3-540-49994-6",
  pages =   "273--284",
  series =  "Lecture Notes in Computer Science",
  URL =     "http://dx.doi.org/10.1007/11944836_26",
}


@MISC{Sundararajan06towardsparallel,
    author = {Elankovan Sundararajan and Aaron Harwood},
    title = {Towards Parallel Computing on the Internet: Applications, Architectures, Models and Programming Tools Contents},
    year = {2006}
}

@InProceedings{PRAM,
  author =   {Fortune, S. and Wyllie, J.},
  title =    {{Parallelism in Random Access Machines}},
  booktitle =    {{Symp.\ on Theory of Computing}},
  pages =    {114--118},
  year =     1978
}

@Article{LPRAM,
  author =   {Aggarwal, A. and Chandra, A.K. and Snir, M.},
  title =    {{Communication Complexity of PRAMs}},
  journal =      {J.\ of Theoretical Computer Science},
  year =     1990,
  volume =   71,
  number =   1,
  pages =    {3--28},
  month =    mar,
 doi = {http://dx.doi.org/10.1016/0304-3975(90)90188-N},
 publisher = {Elsevier Science Publishers Ltd.},
 address = {Essex, UK},
}

@InProceedings{BPRAM,
  author =   {Aggarwal, A. and Chandra, A.K. and Snir, M.},
  title =    {{On Communication Latency of PRAM}},
  booktitle =    {{Symp.\ on Parallel Algorithms and Architectures}},
  pages =    {11--21},
  year =     1989
}


@Article{HPRAM,
  author =   {Heywood, T.H. and Ranka, S.},
  title =    {{A Practical Hierarchical Model of Parallel Computation I: the Model}},
  journal =      {J.\ of Parallel and Distributed Computing},
  year =     1992,
  volume =   16,
  pages =    {212--231}
}

@phdthesis{144743,
 author = {Todd Hervey Heywood},
 title = {A practical hierarchical model of parallel computation},
 year = {1992},
 order_no = {UMI Order No. GAX92-14375},
 publisher = {Syracuse University},
 address = {Syracuse, NY, USA},
 }

@article{HetLogGP,
    author = {Bosque, J.L. and  Pastor, L.},
    title = {{A Parallel Computational Model for Heterogeneous Clusters}},
    journal = {IEEE Trans. Parallel Distrib. Syst},
    year = 2006,
    volume = 17,
    number = 12,
}

@article{PHMM,
    author = {Vitter, J.S and Shriver, E.A.M},
    title = {{Algorithms for Parallel Memory II: Hierarchical Multilevel Memories}},
    journal = {Algorithmica},
    year = {1994},
    volume = {12},
    pages = {148--169},
}

@article{CTA,
  author =   {Snyder, L.},
  title =    {{Type Architectures, Shared Memory, and the Corollary of Modest Potential}},
  journal =      {Ann.\ Rev.\ Comp.\ Sci.},
  year =     1986,
  pages =    {289--317}
}

@Article{UMH,
  author =   {Alpern, B. and Carter, L. and Feig, E. and Selker, T.},
  title =    {{The Uniform Memory Hierarchy Model of Computation}},
  journal =      {Algorithmica},
  year =     1994,
  volume =   12,
  number =   {2--3},
  pages =    {72--109}
}

@INPROCEEDINGS{PMH,
    author = {Alpern, B. and  Carter, L. and  Ferrante, J.},
    title = {{Modeling Parallel Computers as Memory Hierarchies}},
    booktitle = {{Conference on Programming Models for Massively Parallel Computers}},
    year = {1993},
    month = sep,
    pages = {116--123},
    publisher = {IEEE Computer Society Press}
}

@InProceedings{LogP-PMH_NOT,
  author =   {Li, Z. and Mills, J.H. and Reif, P.H.},
  title =    {{Models and Resource Metrics for Parallel and Distributed Computation}},
  booktitle =    {{Intl. Conf.\ on System Sciences}},
  pages =    {51--60},
  year =     1995
}



@INPROCEEDINGS{LogP-PMH,
    author = {Zhiyong Li and Peter H. Mills and John H. Reif},
    title = {Models and resource metrics for parallel and distributed computation},
    booktitle = {HICSS'95: Proceedings of the 28th Hawaii International Conference on System Sciences},
    year = {1995},
    pages = {133--143},
    isbn = {0-8186-6935-7},
    publisher = {IEEE Computer Society},
    address = {Washington, DC, USA},
}

@InProceedings{ModelsSurvey,
  author =   {Maggs, B.M and Matheson, L.R. and Tarjan, R.E.},
  title =    {{Models of Parallel Computation: A Survey and Synthesis}},
  booktitle = {HICSS'95: Proceedings of the 28th Hawaii International Conference on System Sciences},
  year = {1995},
  isbn = {0-8186-6935-7},
  pages = {61--70},
  publisher = {IEEE Computer Society},
  address = {Washington, DC, USA},
}

@INPROCEEDINGS{Hambrusch96modelsfor,
    author = {Susanne E. Hambrusch},
    title = {Models for parallel computation},
    booktitle = {In ICPP Workshop},
    year = {1996},
    pages = {92--95}
}


@Article{MulticoreRevolution,
  author =   {Herlihy, M. and Luchangco, V.},
  title =    {{Distributed Computing and the Multicore Revolution}},
  journal =      {ACM SIGACT News},
  year =     2008,
  volume =   39,
  number =   1,
  pages =    {62--72},
  month =    mar}

@Book{fosterbook,
  Author         = {Ian Foster},
  Title          = {Designing and Building Parallel Programs: Concepts and
                   Tools for Parallel Software Engineering},
  Publisher      = {Addison Wesley},
  year           = 1995
}

@InProceedings{MapReduceOSDI,
  author =   {Jeffrey Dean and Sanjay Ghemawat},
  title =    {MapReduce: simplified data processing on large clusters},
  booktitle = {{Symposium on Operating System Design and Implementation (OSDI�04)}},
  year =     2004,
  address =      {San Francisco},
  month =    dec}

@Misc{ca-science-project,
  key =      {SCIEnce},
  OPTauthor =    {},
  title =    {{{S}ymbolic {C}omputation {I}nfrastructure for {E}urope, EU Framework VI project}},
  howpublished = {\texttt{http://www.sym\-bo\-lic-compu\-ta\-tion.org}},
  OPTmonth =     {August},
  year =     {2006-2001},
  OPTnote =     {retrieved in February 2008},
  OPTannote =    {},

}
@Misc{SCIEnce,
  author =    {Kevin Hammond and Dana Petcu and Phil Trinder and Abdallah Al Zain and Steve Linton and Greg Michaelson},
  title =    {{Project Paper: the SCIEnce Joint Research Activity Symbolic Computing
  on the Grid}},
  howpublished = {Trends in Functional Programming (TFP) 07, Draft Proceedings},
  OPTmonth =     {August},
  year =     {2007},
  OPTnote =     {retrieved in February 2008},
}
% -----------------------------------------------------------------------------
% new stuff (vs. artcop/mainDFG bibs)

@Article{ManticoreJFP,
  author = 	 {Shaw, Adam and Reppy, John and Rainey, Michael and Fluet, Matthew},
  title = 	 {{Implicitly-threaded Parallelism in Manticore}},
  journal = 	 {Journal of Functional Programming},
  year = 	 2010,
  note = 	 {submitted}}


@InProceedings{ManticoreProj,
  author = 	 {Fluet, Matthew and Ford, Nic and Rainey, Michael and Reppy, John and Shaw, Adam and Xiao, Yingqi},
  title = 	 {{Status Report: The Manticore Project}},
  booktitle = {{Workshop on ML}},
  year =      1997,
  pages = 	 {15--24},
  publisher = {ACM}}

% -----------------------------------------------------------------------------
% HWL: mist new stuff

@InProceedings{STM,
  author =  {Carlstrom, B.D. and  Chung, J.W. and  Chafi. H.
         and  McDonald, A. and  Minh, C.C. and  Hammond, L.
         and  Kozyrakis, C. and  Olukotun, K.},
  title = 	 {{Transactional Execution of Java Programs}},
  booktitle =	 {{Synchronization and Concurrency in Object-Oriented Languages (SCOOL)}},
  year =	 2005,
  address =	 {San Diego, California, USA},
  month =	 oct,
  URL =     {http://hdl.handle.net/1802/2096},
}

@InProceedings{HaskellSTM,
  author =   {Anthony Discolo, Tim Harris, Simon Marlow, Simon Peyton Jones, and Satnam Singh},
  title =    {{Lock-Free Data Structures using STMs in Haskell}},
  booktitle =    {International Symposium on Functional and Logic Programming (FLOPS'06)},
  year =     2006,
  month =    apr,
  documentURL =  {http://research.microsoft.com/Users/simonpj/papers/stm/lock-free-flops06.pdf}
}


@STRING{scp	= "Science of Computer Programming" }

@Article{abel:scp09,
  author	= {Andreas Abel},
  title		= {Type-Based Termination of Generic Programs},
  journal	= scp,
  year		= 2009,
  volume	= 74,
  number	= 8,
  pages		= {550-567},
  note		= {MPC'06 special issue.}
}


@PhDThesis{abel:PhD,
  author	= {Andreas Abel},
  title		= {{A Polymorphic Lambda-Calculus with Sized Higher-Order Types}},
  school	= {Ludwig-Maximilians-Universit\"at M\"unchen},
  year		= 2006
}


@inproceedings{EmbeddedML,
author = {R.J.M. Hughes and L. Pareto},
title = {{Recursion and Dynamic Data Structures in Bounded Space:
			Towards Embedded ML Programming}},
booktitle = {{Proc. ICFP~'99: Intl. Conf. on Functional Programming}},
address = {Paris, France},
pages = {70--81},
month = sep,
year = 1999,
publisher = {ACM},
}

@book{Erlang,
author = "J. Armstrong and S.R. Virding and M.C. Williams",
title = "{Concurrent Programming in Erlang}",
publisher = "Prentice-Hall",
year = 1993
}

@INPROCEEDINGS{Erlang-GC,
AUTHOR = {J.~Armstrong},
TITLE = {{One Pass Real-Time Generational Mark-Sweep Garbage Collection}},
BOOKTITLE = {Intl. Workshop on Memory Management},
ADDRESS = {Kinross, Scotland},
YEAR = {1995}
}

@inproceedings{Gulwani,
 author = {Gulwani, S. and Mehra, K.K. and Chilimbi, T.},
 title = {{SPEED: precise and efficient static estimation of program computational complexity}},
 booktitle = {Proc. POPL '09: 36th ACM SIGPLAN-SIGACT symposium on Principles of Programming Languages},
 year = {2009},
 isbn = {978-1-60558-379-2},
 pages = {127--139},
 location = {Savannah, GA, USA},
 doi = {http://doi.acm.org/10.1145/1480881.1480898},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@inproceedings{Hume,
author = "K. Hammond and G.J. Michaelson",
title = "{Hume: a Domain-Specific Language for Real-Time Embedded Systems}",
booktitle = "Proc. GPCE~'03: 2003 Intl. Conf. on Generative Programming and Component Engineering, Erfurt, Germany, Springer LNCS 2830",
month = "Sep.",
year = "2003",
pages = "37--56",
}

@inproceedings{FOPARA09,
 author = {Trinder, P.W. and Cole, M.I. and Loidl H-W. and Michaelson, G.J.},
 title = {{Characterising Effective Resource Analyses for Parallel and Distributed Coordination}},
 booktitle =    {{Proc. FOPARA~'09: Intl. Workshop on Foundational and Practical Aspects of Resource Analysis, Springer LNCS~6324}},
 year = {2009},
 location = {Eindhoven, The Netherlands},
 publisher = {Springer Verlag LNCS 6324},
 pages = "67--83"}

@inproceedings{SafeFOPARA09,
 author = {M. Montenegro and R. Pena and C. Segur},
 title = {{A Space Consumption Analysis by Abstract Interpretation}},
 booktitle =    {{Proc. FOPARA~'09: Intl. Workshop on Foundational and Practical Aspects of Resource Analysis, Springer LNCS~6324}},
 year = {2009},
 location = {Eindhoven, The Netherlands},
 publisher = {Springer Verlag LNCS 6324},
 pages = "34--50"}

@Misc{lp-solve,
key = {LPs},
author = {M. Berkelaar and K. Eikland and P. Notebaert},
title = {lp\_solve: Open source (Mixed-Integer) Linear Programming system},
howpublished = {GNU LGPL (Lesser General Public Licence)},
note = {\newline{\url{http://lpsolve.sourceforge.net/5.5}}}
}

% -----------------------------------------------------------------------------
% HWL: From RASurvey


@Article{RASurvey,
  author = 	 {P.W. Trinder and M.I. Cole and K. Hammond and H-W. Loidl and G.J. Michaelson},
  title = 	 {{Resource Analyses for Parallel and Distributed Coordination}},
  journal = 	 {Concurrency and Computation: Practice and Experience},
  year = 	 2012,
  note = 	 {To appear}}

@inproceedings{AbsInt:EmsoftTahoe,
  author    =  "C. Ferdinand and R. Heckmann and M. Langenbach and
                    F. Martin and M. Schmidt and
                    H. Theiling and S. Thesing and R. Wilhelm",
  title     =  {{Reliable and Precise {WCET} Determination for a Real-Life Processor}},
  booktitle =  {{Proc. EMSOFT~'01: Intl. Workshop on Embedded Software, Springer LNCS~2211}},
  address   =  {Tahoe City, USA, October 8--10},
  pages     =  {469--485},
  year      =  2001
}

@article{WCET_Survey,
 OPTauthor = {Wilhelm, Reinhard and Engblom, Jakob and Ermedahl, Andreas and Holsti, Niklas and Thesing, Stephan and Whalley, David and Bernat, Guillem and Ferdinand, Christian and Heckmann, Reinhold and Mitra, Tulika and Mueller, Frank and Puaut, Isabelle and Puschner, Peter and Staschulat, Jan and Stenstr\"{o}m, Per},
  AUTHOR = {R. Wilhelm and J. Engblom and A. Ermedahl and N. Holsti and S. Thesing and D. Whalley and G. Bernat and C. Ferdinand and R. Heckmann and F. Mueller and I. Puaut and P. Puschner and J. Staschulat and P. Stenstr{\"o}m},
 title = {{The Worst-Case Execution-Time Problem---Overview of Methods and Survey of Tools}},
 journal = {ACM TECS: Transactions on Embedded Computer Systems},
 volume = {7},
 number = {3},
 year = {2008},
 issn = {1539-9087},
 pages = {1--53},
 doi = {http://doi.acm.org/10.1145/1347375.1347389},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@article{WEEHT07Long,
  AUTHOR = {R. Wilhelm and J. Engblom and A. Ermedahl and N. Holsti and S. Thesing and D. Whalley and G. Bernat and C. Ferdinand and R. Heckmann and F. Mueller and I. Puaut and P. Puschner and J. Staschulat and P. Stenstr{\"o}m},
  TITLE = {{T}he {D}etermination of {W}orst-{C}ase {E}xecution {T}imes---{O}verview of the {M}ethods and {S}urvey of {T}ools},
  journal = {ACM TECS: Transactions on Embedded Computing Systems},
  YEAR = {2008}
}

@article{PuschnerBurns,
author = {P. Puschner and A. Burns},
title = {{A Review of Worst-Case Execution-Time Analysis}},
journal = {{Real-Time Systems}},
volume = 18,
number = {2/3},
pages = {115--128},
year=  2000,
}

@InProceedings{AA-FME09,
author = {Jost, S. and  Loidl, H-W. and  Hammond, K. and  Scaife, N. and  Hofmann, M.},
booktitle = {{Proc. FM~'09: Intl. Symp. on Formal Methods}},
title = {{``Carbon Credits'' for Resource-Bounded Computations using
  Amortised Analysis}},
LOCATION = {Eindhoven, the Netherlands},
year = {2009},
month = nov,
}

@InProceedings{AnalysisECRTS09,
  author = {Jost, S. and  Loidl, H-W. and  Scaife, N. and  Hammond, K. and Michaelson, G.J. and  Hofmann, M.},
  title = 	 {{Worst-Case Execution Time Analysis through Types}},
  booktitle = {{Proc. ECRTS~'09: Euromicro Conference on Real-Time Systems}},
  pages = 	 {13--17},
  year = 	 2009,
  address = 	 {Dublin, Ireland, July 1--3},
  note =      {Work-in-Progress Session}}

@inproceedings{IFL2006,
  author = {Bonenfant, A. and Ferdinand, C. and Hammond, K. and  Heckmann, R.},
  title = {{Worst-Case Execution Times for a Purely Functional Language}},
  booktitle = {{Proc. IFL~'06: Implementation of Functional Languages, Spinger LNCS~4449}},
  address = {Budapest, Hungary, September 4--6},
  pages = {235--252},
  year = {2006},
  url = {http://www-fp.cs.st-andrews.ac.uk/embounded/pubs/papers/ifl06.pdf}
}

@InProceedings{ECRTS09_Random,
  author = 	 {Qui{\~n}nones, E. and Berger, E.D. and Bernat, G. and Cazorla, F.J.},
  title = 	 {{Using Randomized Caches in Probabilistic Real-Time Systems}},
  booktitle = {{Proc. ECRTS~'09: Euromicro Conference on Real-Time Systems}},
  pages = 	 {129--138},
  year = 	 2009,
  address = 	 {Dublin, Ireland, July 1--3},
  publisher = {IEEE}}

@inproceedings{AMPpaper,
 author = {X.Y. Deng and P.W. Trinder and G.J. Michaelson},
 title = "{Autonomous Mobile Programs}",
 booktitle = {Proc. IAT~'06: IEEE/WIC/ACM Intelligent Agent Technology},
 address = "Hong Kong",
 month =   {December},
 year = {2006},
 isbn = {0-7695-2748-5},
 pages = {177--186},
 doi = {http://dx.doi.org/10.1109/IAT.2006.42},
 }

@article{AMPContCostPaper,
 author = {X.Y. Deng and P.W. Trinder and G.J. Michaelson},
 title = "{Cost-Driven Autonomous Mobility}",
 journal = {Computer Languages, Systems and Structures},
 volume = {36},
 number = {1},
 publisher = {Elsevier},
 year = 2010
 }


@article{CostSkill,
 author = {D. B. Skillicorn and W. Cai},
 title = "{A Cost Calculus for Parallel Functional Programming}",
 journal = {J. Parallel and Distributed Computing},
 volume = {28},
 number = {1},
 year = {1995},
 issn = {0743-7315},
 pages = {65--83},
 doi = {http://dx.doi.org/10.1006/jpdc.1995.1089},
 publisher = {Academic Press, Inc.},
 address = {Orlando, FL, USA},
 }

@ARTICLE{1639657,
title={{Loosely-Coupled Loop Scheduling in Computational Grids}},
author={Herrera, J. and Huedo, E. and Montero, R.S. and Llorente, I.M.},
journal={Proc. IPDPS~'06: 20th Intl. Symp. on Parallel and Distributed Processing},
year={2006},
month={April},
volume={},
number={},
pages={ 6 pp.-},
keywords={ application program interfaces, grid computing, message passing, parallel programming, processor scheduling, program control structures, resource allocation API, Globus-based research testbed, GridWay meta-scheduling, MPI, Mandelbrot set problem, computational grids, distributed resource management, loop distribution, loop scheduling algorithm, loosely-coupled loop scheduling, parallel programming},
doi={10.1109/IPDPS.2006.1639657},
ISSN={}, }

@ARTICLE{Yu05ataxonomy,
    author = {J. Yu and R. Buyya},
    title = {{A Taxonomy of Workflow Management Systems for Grid Computing}},
    booktitle = {J. Grid Computing},
    year = {2005}
}

@article{Algol74,
 author = {J. Cohen and C. Zuckerman},
 title = "{Two Languages for Estimating Program Efficiency}",
 journal = CACM,
 volume = {17},
 number = {6},
 year = {1974},
 issn = {0001-0782},
 pages = {301--308},
 doi = {http://doi.acm.org/10.1145/355616.361015},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@Article{HiCo88,
  author = 	 {Hickey, T. and Cohen, J.},
  title = 	 {{Automating Program Analysis}},
  journal =	 jacm,
  year =	 {1988},
  volume =	 {35},
  number =	 {1},
  pages =	 {185--220},
  month =	 {January}
}

@PhdThesis{Rams79,
  author = 	 {Ramshaw, L.H.},
  title = 	 {{Formalizing the Analysis of Algorithms}},
  school = 	 {Stanford University},
  year = 	 {1979}
}

@article{Wegbreit76,
 author = {B. Wegbreit},
 title = {{Verifying Program Performance}},
 journal = jacm,
 volume = {23},
 number = {4},
 year = {1976},
 issn = {0004-5411},
 pages = {691--699},
 doi = {http://doi.acm.org/10.1145/321978.321987},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@phdthesis{Ramshaw79,
 author = {L. H. Ramshaw},
 title = "{Formalizing the Analysis of Algorithms}",
 year = {1979},
 school = {Stanford University Department of Computer Secience},
 number = {AAI8001994},
 }

@article{WegbreitAna75,
 author = {B. Wegbreit},
 title = "{Mechanical Program Analysis}",
 journal = CACM,
 volume = {18},
 number = {9},
 year = {1975},
 issn = {0001-0782},
 pages = {528--539},
 doi = {http://doi.acm.org/10.1145/361002.361016},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@Article{FSZ91,
  author = 	 {Flajolet, P. and  Salvy, B. and Zimmermann, P.},
  title = 	 {{Automatic Average-Case Analysis of Algorithms}},
  journal =	 TCS,
  year =	 {1991},
  volume =	 {79},
  pages =	 {37--109}
}

@PhdThesis{Zimm90,
  author = 	 {Zimmermann, W.},
  title = 	 {{Automatische Komplexit\"atsanalyse von funktionalen
		  Programmen (Automatic Complexity Analysis of Functional
		  Programs) (in German)}},
  school = 	 {University of Karlsruhe},
  year = 	 {1990}
}

@TechReport{Kasa80,
  author = 	 {Kasai et al.},
  title = 	 {{An Automatic Time Analysis System}},
  institution =  {Kyoto University},
  year = 	 {1980},
  type =	 {Technical Report},
  number =	 {RIMS-335},
  month =	 {May},
  abstract =     "This paper describes a system, TIMER, that generates
               upper and lower bounds for the complexity of programs
               written in a small imperative C-like language. The
               system is semi-automatic in that it requires some user
               annotation, and the estimates can be improved by
               further annotation of the program. As such it is a
               powerful tool for developing efficient algorithms, but
               it is not intended to be a program analysis system.",
}
@phdthesis{rangaswami96cost,
  author = "R. Rangaswami",
  title = "{A Cost Analysis for a Higher-order Parallel Programming Model}",
  address = "Department of Computer Science, Edinburgh University",
  year = "1996",
  url = "citeseer.ist.psu.edu/rangaswami96cost.html" 
}

@Book{Bird97,
  author = 	{Bird, R. and de Moor, O.},
  title  = 	"{Algebra of Programming}",
  publisher =	{{Prentice Hall}},
  year =	1997
}

@InProceedings{Bischof03,
  author = 	 {H. Bischof and S. Gorlatch and E. Kitzelmann},
  title = 	 {{Cost Optimality and Predictability of Parallel Programming with Skeletons}},
  booktitle = {{Proc. Euro-Par~'03: European Conference on Parallel Processing, Springer LNCS~2790}},
  year = 	 2003,
  pages = {682--693}
}

@inproceedings{Hammond03,
author = {K. Hammond and R. Loogen and J. Berthold},
title = {{Automatic Skeletons in Template Haskell}},
booktitle = {Proc. HLPP~'03: 2003 Workshop on High Level Parallel Programming, Paris, France},
month = jun,
year = 2003,
}

@Article{NESL,
  author = 	 {Blelloch, G.E.},
  title = 	 {{Programming Parallel Algorithms}},
  journal = 	 CACM,
  year = 	 1996,
  volume =	 39,
  number =	 3,
  month =	 {March},
  pages =	 {85--97},
  url =          {http://www.cs.cmu.edu/\~{}scandal/cacm.html},
  abstractURL =  {http://www.cs.cmu.edu/\~{}scandal/cacm/cacm2.html},
  abstract =     "In the past 20 years there has been tremendous progress in developing and
analyzing parallel algorithms. Researchers have developed efficient
parallel algorithms to solve most problems for which efficient sequential
solutions are known. Although some of these algorithms are efficient only
in a theoretical framework, many are quite efficient in practice or have
key ideas that have been used in efficient implementations. This research
on parallel algorithms has not only improved our general understanding of
parallelism, but in several cases has led to improvements in sequential
algorithms. Unfortunately there has been less success in developing good
languages for programming parallel algorithms, particularly languages that
are well suited for teaching and prototyping algorithms. There has been a
large gap between languages that are too low level, requiring specification
of many details that obscure the meaning of the algorithm, and languages
that are too high-level, making the performance implications of various
constructs unclear. In sequential computing many standard languages such as
C or Pascal do a reasonable job of bridging this gap, but in parallel
languages building such a bridge has been significantly more difficult.

Our research involves developing a parallel language that is useful for
teaching as well as for implementing parallel algorithms. To achieve this,
an important goal has been to develop a language that allows high-level
descriptions of parallel algorithms while also having a well understood
mapping onto a performance model (i.e. bridges the gap). Based on our
research, we believe that the following two features are important for
achieving this goal:


   o A language-based performance model that uses work and depth rather
     than a machine-based model that uses ``running time''.
   o Support for nested data-parallel constructs. This is the ability to
     apply a function in parallel to each element of a collection of data,
     and the ability to nest such parallel calls.

In this article we describe these features and explain why they are
important for programming parallel algorithms. To make the ideas concrete,
we describe the programming language NESL [5], which we designed based on
the features, and go through several examples of how to program and analyze
parallel algorithms using the language. We have been using NESL for three
years in undergraduate and graduate courses on parallel algorithms [8]. The
algorithms we cover in this article are relatively straightforward. Many
more algorithms can be found through the Web version of this article."
}


@TechReport{Blel93,
  author = 	 {Blelloch, G.E.},
  title = 	 {{NESL: A Nested Data-Parallel Language (Version 2.6)}},
  institution =  {Carnegie-Mellon University},
  year = 	 1993,
  type =	 {Technical Report},
  number =	 {CMU-CS-93-129},
  month =	 {April}
}

@article{Hayashi02,
  author    = {Y. Hayashi and
               M. Cole},
  title     = {{Automated Cost Analysis of a Parallel Maximum Segment Sum
               Program Derivation}},
  journal   = {Parallel Processing Letters},
  volume    = {12},
  number    = {1},
  year      = {2002},
  pages     = {95-111}
}

@inproceedings{Gava08,
 author = {Gava, F.},
 title = {{BSP Functional Programming: Examples of a Cost Based Methodology}},
 booktitle = {Proc. ICCS '08: 8th international conference on Computational Science, Part I, Springer LNCS},
 year = {2008},
 pages = {375--385},
}

@article{Jay00,
    author = "C. Barry Jay",
    title = "{Costing Parallel Programs as a Function of Shapes}",
    journal = "Science of Computer Programming",
    volume = "37",
    number = "1--3",
    pages = "207--224",
    year = "2000"
}

@INPROCEEDINGS{Jay97,
    author = {C. B. Jay and M. I. Cole and M. Sekanina and P. Steckler},
    title = {{A Monadic Calculus for Parallel Costing of a Functional Language of Arrays}},
    booktitle = {Proc. Euro-Par'97: European Conference on Parallel Processing, Springer LNCS~1300},
    year = {1997},
    pages = {650--661},
}


@inproceedings{PRAM,
 author = {Fortune, S. and Wyllie, J.},
 title = {{Parallelism in Random Access Machines}},
 booktitle = {Proc. STOC '78: 10th ACM Symp. on Theory of Computing},
 year = {1978},
 pages = {114--118},
 publisher = {ACM}
}

@article{BSP,
 author = {Hill, J. M. D. and McColl, . and Stefanescu, D. C. and Goudreau, M. W. and Lang, K. and Rao, S. B. and Suel, T. and Tsantilas, T. and Bisseling, R. H.},
 title = {{BSPlib: The BSP programming library}},
 journal = {Parallel Computing},
 volume = {24},
 number = {14},
 year = {1998},
 pages = {1947--1980},
}

@book{Cole89,
	author = {Cole, M.},
	publisher = {MIT Press},
	title = {{Algorithmic Skeletons: Structured Management of Parallel Computation}},
	year = {1989}
}

@book{PEPA,
 author = {Hillston, J.},
 title = {{A Compositional Approach to Performance Modelling}},
 year = {1996},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA},
}

@inproceedings{Yaikhom06,
  author    = {G. Yaikhom and
               M. Cole and
               S. Gilmore},
  title     = {{Combining Measurement and Stochastic Modelling to Enhance
               Scheduling Decisions for a Parallel Mean Value Analysis
               Algorithm}},
  booktitle = {Proc. Intl. Conference on Computational Science (2)},
  year      = {2006},
  pages     = {929-936}
}

@book{BSPsurvey,
 author = {Bisseling, R.},
 title = {{Parallel Scientific Computation: A Structured Approach using BSP and MPI}},
 year = {2004},
 publisher = {Oxford University Press}
}

@article{MapReduceCACM,
  author = {Dean, J. and Ghemawat, S.},
  title = {{MapReduce: Simplified Data Processing on Large Clusters}},
  journal = CACM,
  volume = {51},
  number = {1},
  year = {2008},
  issn = {0001-0782},
  pages = {107--113},
  doi = {http://doi.acm.org/10.1145/1327452.1327492},
  publisher = {ACM},
  address = {New York, NY, USA},
  }

@book{TBB,
  author = {Reinders, James},
  title = {{Intel Threading Building Blocks: Outfitting C++ for Multi-core Processor Parallelism}},
  year = {2007},
  publisher = {O'Reilly}
}

@Book{ParPatterns12,
  author = 	 {Michael McCool and James Reinders and Arch Robison},
  title = 	 {{Structured Parallel Programming: Patterns for Efficient Computation}},
  publisher = 	 {Elsevier},
  year = 	 2012,
  OPTmonth = 	 jul,
  OPTnote = 	 {ISBN: 9780124159938}}


@techreport{Asanovic:EECS-2008-23,
     Author = {Asanovic, Krste and Bodik, Ras and Demmel, James and Keaveny, Tony and Keutzer, Kurt and Kubiatowicz, John D. and Lee, Edward A. and Morgan, Nelson and Necula, George and Patterson, David A. and Sen, Koushik and Wawrzynek, John and Wessel, David and Yelick, Katherine A.},
     Title = {{The Parallel Computing Laboratory at U.C. Berkeley: A Research Agenda Based on the Berkeley View}},
     Institution = {EECS Department, University of California, Berkeley},
     Year = {2008},
     Month = {Mar},
     URL = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2008/EECS-2008-23.html},
     Number = {UCB/EECS-2008-23}
}

@PhdThesis{Vasconcelos2008,
  author = 	 {P.B. Vasconcelos},
  title = 	 {{Cost Inference and Analysis for Recursive Functional Programs}},
  school = 	 {University of St Andrews},
  month =        feb,
  year = 	 2008,
  url = 	 {http://www.ncc.up.pt/~pbv/research/PB_Vasconcelos_PhD_thesis.pdf}
}

@PhdThesis{AmortisedAnalysis,
  author = 	 {Jost, S.},
  title = 	 {{Automated Amortised Analysis}},
  school = 	 {Department of Computer Science},
  month =        sep,
  year = 	 2010,
  address =	 {Ludwig-Maximilians Universit{\"a}t, M{\"u}nchen},
}


@InProceedings{POPL10,
  author =       {Jost, S. and  Hammond, K. and Loidl, H-W.  and  Hofmann, M.},
  title = 	 {{Static Determination of Quantitative Resource Usage for Higher-Order Programs}},
  booktitle =	 {{Proc. POPL~'10: ACM Symp. on Principles of Prog. Langs.}},
  address = 	 {Madrid, Spain},
  pages =        {223--236},
  year  =        {2010},
  month = 	 jan,
  keywords =     {Resource analysis, Hume},
  doi =          {http://doi.acm.org/10.1145/1707801.1706327},
  url =          {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/POPL10.pdf},
  abstract = "
We describe a new automatic static analysis for
determining upper-bound functions on the use of quantitative
resources for strict, higher-order, polymorphic, recursive programs
dealing with possibly-aliased data.
Our analysis is a variant of Tarjan's manual amortised  cost analysis technique.
We use a type-based approach, exploiting linearity to allow inference, 
and place a new emphasis on the number of references to a data object.
The bounds we infer depend on the sizes of the various inputs to a program.
They thus expose the impact of specific inputs on the overall cost behaviour.

The key novel aspect of our work is that it
deals directly with polymorphic higher-order functions without requiring source-level
transformations that could alter resource usage.  We thus obtain safe
and accurate compile-time bounds. Our work is generic in that it deals with
a variety of quantitative resources.  We illustrate our approach with
reference to dynamic memory allocations/deallocations, stack usage, and
worst-case execution time, using metrics taken from a real implementation
on a simple micro-controller platform that is used in safety-critical
automotive applications."
}


@PhdThesis{sj:phd,
 author = {Steffen Jost},
 title = {Automated Amortised Analysis},
 school = {Faculty of Mathematics, Computer Science and Statistics, LMU Munich},
 address = {Germany},
 url = {http://nbn-resolving.de/urn:nbn:de:bvb:19-122805},
 urn = {{urn:nbn:de:bvb:19-122805}},
 year = {2010},
 month = sep
}
% URN is a persitent Uniform Resource Name that can always be resolved to the current location of the thesis.

@InProceedings{FOPARA09x,
  author = 	 {Loidl, H-W. and Jost, S.},
  title = 	 {{Improvements to a Resource Analysis for Hume}},
  booktitle =    {{Proc. FOPARA~'09: Intl. Workshop on Foundational and Practical Aspects of Resource Analysis, Springer LNCS~6324}},
  year = 	 2009,
  address = 	 {Eindhoven, The Netherlands},
  month = 	 nov,
  keywords =     {Resource analysis, Hume},
  url =          {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/FOPARA09.pdf},
  abstract = "
The core of our resource analysis for the embedded systems language Hume is
a resource-generic, type-based inference engine that employs the concept
of amortised costs to statically infer resource bounds.
In this paper we present extensions and improvements of this resource analysis
in several ways. 
We develop and assess a call count analysis for higher-order programs, as a specific
instance of our inference engine.
We address usability aspects in general and in particular discuss an improved presentation of the 
inferred resource bounds together with the possibility of interactively
tuning these bounds.
Finally, we demonstrate improvements in the performance of our analysis.
"
}

@InProceedings{FOPARA09a,
  author = 	 {P.W. Trinder and M.I. Cole and H-W. Loidl and G.J. Michaelson},
  title = 	 {{Characterising Effective Resource Analyses for Parallel and Distributed Coordination}},
  booktitle =    {{Proc. FOPARA~'09: Intl. Workshop on Foundational and Practical Aspects of Resource Analysis, Springer LNCS~6324}},
  year = 	 2009,
  address = 	 {Eindhoven, The Netherlands},
  month = 	 nov,
  keywords =     {Resource analysis},
  url =          {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/ResAn_FOPARA09.pdf},
  abstract = "
  An important application of resource analysis is to improve the
  performance of parallel and distributed programs. In this context key
  resources are time, space and communication. Given the spectrum of
  cost models and associated analysis techniques available, what combination
  should be selected for a specific parallel or distributed
  context?

  We address the question as follows. We outline a continuum of
  coordination cost models and a range of analysis techniques. We
  consider six representative parallel/distributed applications of
  resource analysis techniques, and aim to extract general principles
  governing why the combination of techniques is effective in its
  context."
}

@incollection {COSTA_ResAn10,
   author = {Navas, Jorge and Mera, Edison and L�pez-Garc�a, Pedro and Hermenegildo, Manuel},
   affiliation = {University of New Mexico USA},
   title = {{User-Definable Resource Bounds Analysis for Logic Programs}},
   booktitle = {Logic Programming, LNCS 4670},
   publisher = {Springer},
   editor = {Dahl, V�ronica and Niemel�, Ilkka},
   isbn = {},
   pages = {348--363},
   OPTurl = {http://dx.doi.org/10.1007/978-3-540-74610-2_24},
   anote = {10.1007/978-3-540-74610-2_24},
   year = {2010}
}


@InProceedings{SoBo95a,
  author = 	 {Sodan, A.C. and Bock, H.},
  title = 	 {{Extracting Characteristics from Functional Programs for
                   Mapping to Massively Parallel Machines}},
  year =         {1995},
  booktitle =	 {HPFC'95 --- High Performance Functional Computing},
  pages =        {134--148},
  address =	 {Denver, Colorado, April 10--12},
  keywords =     {parallel Lisp, profiling, large-scale programming},
  url =          {ftp://sisal.llnl.gov/pub/hpfc/papers95/paper14.ps},
  abstract =     "For  problems  with highly  dynamic behavior, our  experiments  showed that
there are specific characteristics for different applications. We therefore
propose a mapping environment   providing   several strategies  for    both
granularity control and  dynamic load balancing.  For appropriate selection
and   parameterization  of   strategies,   we   extract   the   application
characteristics     using   trace-based     profiling     and   appropriate
evaluations.  Our profiling  approach differs   from  others in that   more
information (like argument sizes or the branching  factor) is collected and
more advanced evaluations  are performed. Large real-life applications have
been  successfully   measured,  and examples   demonstrate  differences  in
characteristics and  which the corresponding  strategies being  appropriate
are."
}

% -----------------------------------------------------------------------------
@proceedings{DBLP:conf/popl/2008,
editor = {George C. Necula and               Philip Wadler},
  title     = {Proceedings of the 35th ACM SIGPLAN-SIGACT Symposium on
               Principles of Programming Languages, POPL 2008, San Francisco,
               California, USA, January 7-12, 2008},
  booktitle = {POPL},
  publisher = {ACM},
  year      = {2008},
  isbn      = {978-1-59593-689-9},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{Gulwani-Speed,
  author    = {S. Gulwani and
               K.K. Mehra and
               T.M. Chilimbi},
  title     = {{SPEED: Precise and Efficient Static Estimation of Program
               Computational Complexity}},
  OPTbooktitle = {Proc. POPL 2009: 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Savannah, GA, USA},
  booktitle = {{Proc. POPL'09: Symp. on Princ. of Prog. Langs}},
  address   = {Savannah, USA},
  month     = jan,
  year      = {2009},
  pages     = {127--139},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/1480881.1480898},
  OPTcrossref  = {DBLP:conf/popl/2009},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/popl/2009,
editor = {Zhong Shao and Benjamin C. Pierce},
  title     = {Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on
               Principles of Programming Languages, POPL 2009, Savannah,
               GA, USA, January 21-23, 2009},
  booktitle = {POPL},
  publisher = {ACM},
  year      = {2009},
  isbn      = {978-1-60558-379-2},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@InProceedings{GoLi98,
  author = 	 {Gomez, G. and Liu, Y.A.},
  title = 	 {{Automatic Time-Bound Analysis for a Higher-Order Language}},
  booktitle = 	 {{Proc. LCTES'98: Conf. on Languages, Compilers and Tools for Embedded Systems}},
  pages =	 {31--40},
  year =	 1998,
  OPTvolume = 1474,
  publisher =    {Springer},
  series =	 {LNCS~1474},
  address =	 {Montreal, Canada},
  month =	 jun,
  OPTpublisher = {SPRINGER},
  documentURL =  {ftp://ftp.cs.indiana.edu/pub/techreports/TR535.ps.Z}
}

@Book{Okasaki98,
  author =       {Chris Okasaki},
  title =        {Purely Functional Data Structures},
  publisher =    {Cambridge University Press},
  year =         1998,
  note =         {ISBN 0521663504}
}

@Article{Tarjan85,
  author =       {Robert E.\ Tarjan},
  title =        {{Amortized Computational Complexity}},
  journal =      {SIAM Journal on Algebraic and Discrete Methods},
  year =         1985,
  volume =       6,
  number =       2,
  pages =        {306--318},
  month =        {April}
}

% -----------------------------------------------------------------------------
% HWL: analyses etc

@PhdThesis{LoidlPhD,
  author = 	 {Loidl, H-W.},
  title = 	 {{Granularity in Large-Scale Parallel Functional Programming}},
  school = 	 {Department of Computing Science},
  month =        {March},
  year = 	 1998,
  address =	 {University of Glasgow},
  annote =	 {Submitted: December 1997; accept with minor changes:
                  February 1998},
  url =          {http://www.cee.hw.ac.uk/\~{}dsg/gph/papers/ps/loidl-thesis.ps.gz},
  ALTurl =          {http://www.dcs.gla.ac.uk/\~{}hwloidl/publications/PhD.ps.gz},
  abstract =     "This thesis demonstrates how to reduce the runtime of large non-strict
  functional programs using parallel evaluation. The parallelisation of
  several  programs  shows the importance of granularity,
  i.e. the computation costs of program expressions. The aspect of
  granularity is studied both on a practical level, by presenting and
  measuring runtime granularity improvement mechanisms, and at a more 
  formal level, by devising a static granularity analysis.

  By parallelising several large functional programs this thesis
  demonstrates for the first time the advantages of combining lazy and
  parallel evaluation on a large scale: laziness aids modularity, while
  parallelism reduces runtime.  One of the parallel programs is the
  Lolita system
  which, with more than
  47,000 lines of code, is the largest existing parallel non-strict functional program.
  A new mechanism for parallel programming, evaluation strategies, to which
  this thesis contributes, is shown to be useful in this parallelisation.
  Evaluation strategies simplify parallel programming by separating
  algorithmic code from code specifying dynamic behaviour. For large programs 
  the abstraction provided by functions 
  is maintained by using a data-oriented style of
  parallelism, which defines parallelism over intermediate data
  structures rather than inside the functions.

  A highly parameterised simulator, GranSim, has been constructed
  collaboratively and is discussed in detail in this thesis. GranSim is a
  tool for architecture-independent parallelisation and  a testbed
  for implementing runtime-system features of the parallel graph reduction
  model. By providing an idealised as well as an accurate model of the
  underlying parallel machine, GranSim has proven to be an essential part
  of an integrated parallel software engineering environment. Several
  parallel runtime-system features, such as granularity improvement
  mechanisms, have been tested via GranSim.  It is publicly available and
  in active use at several universities worldwide.

  In order to provide granularity information
  this thesis presents an inference-based static granularity analysis.
  This analysis combines two existing analyses, one for cost and one 
  for size information. It determines an upper bound for
  the computation costs of evaluating an expression in a simple strict
  higher-order language. By exposing recurrences during cost reconstruction
  and using a library of recurrences and their closed forms,
  it is  possible to infer the  costs  for some recursive functions. 
  The possible
  performance improvements are assessed by measuring the parallel
  performance of a hand-analysed and annotated program."
}

@Article{AFB92,
  author = 	 {G.~Aharoni, D.G. Feitelson, and A.~Barak.},
  title = 	 {{A Run-Time Algorithm for Managing the Granularity of Parallel Functional Programs}},
  journal = 	 {Journal of Functional Programming},
  year = 	 1992,
  volume = 	 2,
  number = 	 4,
  pages = 	 {387--405}}

@inproceedings{BlGr95,
 author = {Blelloch, Guy and Greiner, John},
 title = {{Parallelism in Sequential Functional languages}},
 booktitle = {Proc. FPCA~'95: International Conference on Functional Programming Languages and Computer Architecture},
 year = {1995},
 isbn = {0-89791-719-7},
 pages = {226--237},
 location = {La Jolla, California, United States},
 doi = {http://doi.acm.org/10.1145/224164.224210},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@InProceedings{PCC,
  author =	 {Necula, G.},
  title =	 {{Proof-carrying-code}},
  booktitle =	 {{Proc. POPL~'97: ACM Symposium on Principles of Programming
                  Languages}},
  year =	 1997,
  pages =	 {106--116},
  address =	 {Paris, France, January 15--17},
  OPTpublisher =	 {ACM Press},
  annote =	 {standard reference for PCC},
  abstract =	 "This paper describes proof-carrying code (PCC) a
                  mechanism by which a host system can determine with
                  certainty that it is safe to execute a program
                  supplied (possibly in binary form) by an untrusted
                  source. For this to be possible, the untrusted code
                  producer must supply with the code a safety proof
                  that attests to the code's adherence to a previously
                  defined safety policy . The host can then easily and
                  quickly v alidate the proof without using
                  cryptography and without consulting any external
                  agents. In order to gain preliminary experience with
                  PCC, we have performed several case studies. We show
                  in this paper how proof-carrying code might be used
                  to develop safe assembly-language extensions of ML
                  programs. In the context of this case study , we
                  present and prove the adequacy of concrete
                  representations for the safety policy, the safety
                  proofs, and the proof validation. Finally, we
                  briefly discuss how we use proof-carrying code to
                  develop network packet filters that are faster than
                  similar filters developed using other techniques and
                  are formally guaranteed to be safe with respect to a
                  given operating system safety policy."
}


@InProceedings{LPAR04,
  author = 	 {L. Beringer and M. Hofmann and A. Momigliano and O. Shkaravska},
  title = 	 {{Automatic Certification of Heap Consumption}},
  booktitle = {{Log. f. Prog., AI, and Reas. (LPAR�04)}},
  pages = 	 {347--362},
  year = 	 2004}

@inproceedings{Jost2004,
title = {{\texttt{lfd\_infer}: an Implementation of a Static Inference on Heap Space Usage}},
author = {S. Jost},
booktitle = {{Draft Proc. Intl. Workshop on Impl. and Appl. of Functional Langs. (IFL~'04)}},
year = 2004,
pages = {{97--112}}
}

@inproceedings{Safe,
title = {{A First-Order Functl. Lang. for Reasoning about Heap Consumption}},
author = {Pena, R. and Segura, C.},
booktitle = {{Draft Proc. IFL~'04: Intl. Workshop on Impl. and Appl. of Functl. Langs.}},
year = 2004,
pages = {64--80}
}


 @InProceedings{SafePPDP,
  author = 	 {M. Montenegro and R. Pena and C. Segura},
  title = 	 {{A Type System for Safe Memory Management and its Proof of Correctness}},
  booktitle = {{Proc PPDP'08: Symposium on Principles and Practice of Declarative Programming}},
  year =         {2008},
  pages = 	 {152--162},
  address = 	 {Valencia, Spain},
  month = 	 jul,
  publisher = {ACM}}


@InProceedings{SafeTFP06,
  author = 	 {R. Pena and C. Segura and M. Montenegro},
  title = 	 {{A Sharing Analysis for Safe}},
  booktitle = {{Proc TFP'06: Symp. on Trends in Functional Programming}},
  pages = 	 {109--128},
  year = 	 2006,
  address = 	 {Nottingham, UK},
  month = 	 apr,
  publisher = {Intellect}}

@InProceedings{Safe-TFP07,
  author = 	 {Montenegro, M. and  Pena, R. and  Segura, C.},
  title = 	 {{An Inference Algorithm for Guaranteeing Safe Destruction}},
  booktitle = {{Draft Proc. Trends in Functional Programming (TFP07)}},
  year =	 2007,
  address =	 {New York, 2--4 April}
}

@inproceedings{CraryWeirich,
 author = {K. Crary and S. Weirich},
 title = {{Resource Bound Certification}},
 booktitle = {{Proc. POPL'00: Symp. on Princ. of Prog. Langs}},
 OPTmonth = jan,
 year = {2000},
 isbn = {1-58113-125-9},
 pages = {184--198},
 address = {Boston, USA},
 publisher = {ACM},
 doi = {http://doi.acm.org/10.1145/325694.325716}
 }

@inproceedings{Danielsson-Space,
  author    = {N.A. Danielsson},
  title     = {{Lightweight Semiformal Time Complexity Analysis for Purely
               Functional Data Structures}},
  OPTbooktitle = {Proc. POPL 2008: 35th ACM SIGPLAN-SIGACT Symposium on               Principles of Programming Languages, San Francisco,               California},
  booktitle = {{Proc. POPL'08: Symp. on Princ. of Prog. Langs}},
  OPTmonth = jan,
  year      = 2008,
  pages     = {133--144},
  address   = {San Francisco, USA},
  isbn      = {978-1-59593-689-9},
  ee        = {http://doi.acm.org/10.1145/1328438.1328457},
  OPTcrossref  = {DBLP:conf/popl/2008},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{HLA94,
 author = {Huelsbergen, L. and Larus, J. R. and Aiken, A.},
 title = {{Using the Run-Time Sizes of Data Structures to Guide Parallel-Thread Creation}},
 booktitle = {Proc. LFP '94: 1994 ACM Conference on LISP and Functional Programming},
 year = {1994},
 isbn = {0-89791-643-3},
 pages = {79--90},
 location = {Orlando, Florida, United States},
 doi = {http://doi.acm.org/10.1145/182409.182442},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@inproceedings{CrWe00,
 author = {Crary, Karl and Weirich, Stephanie},
 title = {{Resource bound certification}},
 booktitle = {Proc. POPL '00: 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 year = {2000},
 isbn = {1-58113-125-9},
 pages = {184--198},
 location = {Boston, MA, USA},
 doi = {http://doi.acm.org/10.1145/325694.325716},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@inproceedings{ReGi94,
 author = {Reistad, B. and Gifford, D. K.},
 title = {{Static Dependent Costs for Estimating Execution Time}},
 booktitle = {Proc. LFP '94: 1994 ACM Conference on LISP and Functional Programming},
 year = {1994},
 isbn = {0-89791-643-3},
 pages = {65--78},
 location = {Orlando, Florida, United States},
 doi = {http://doi.acm.org/10.1145/182409.182439},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@article{TimeSys,
 author = {Dornic, V. and Jouvelot, P. and Gifford, D.K.},
 title = {{Polymorphic Time Systems for Estimating Program Complexity}},
 journal = {ACM LOPLAS: Letters on Programming Languages and Systems},
 volume = {1},
 number = {1},
 year = {1992},
 issn = {1057-4514},
 pages = {33--45},
 doi = {http://doi.acm.org/10.1145/130616.130620},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@Article{DJG92,
  author = 	 {Dornic, V. and Jouvelot, P. and Gifford, D.K.},
  title = 	 {{Polymorphic Time Systems for Estimating Program Complexity}},
  journal =	 {ACM LOPLAS: Letters on Programming Languages and Systems},
  year =	 {1992},
  volume =	 {1},
  number =	 {1},
  pages =	 {33--45},
  month =	 {March},
  url =          {http://www.psrg.lcs.mit.edu/ftpdir/papers/loplas.dvi},
  abstract =     "We present a new approach to static program analysis that permits each
expression in a program to be assigned an execution time estimate. Our
approach uses atime system in conjunction with a conventional type system
to compute both the type and the time of an expression. The time of an
expression is either an integer upper bound on the number of ticks the
expression will execute, or the distinguished element long that indicates
that the expression contains a loop and thus may run for an arbitrary
length of time. Every function type includes a latent time that is used to
communicate its expected execution time from the point of its definition to
the points of its use. Unlike previous approaches a time system works in
the presence of first-class functions and separate compilation. In
addition, time polymorphism allows the time of a function to depend on the
times of any functions that it takes as arguments. Time estimates are
useful when compiling programs for multiprocessors in order to balance the
overhead of initiating a concurrent computation against the expected
execution time of the computation. The correctness of our time system is
proven with respect to a dynamic semantics."
}

@Article{LeMe88,
  author = 	 {{Le M\'{e}tayer}, D.},
  title = 	 {{ACE: An Automatic Complexity Evaluator}},
  journal =	 {ACM TOPLAS: Transactions on Programming Languages and Systems},
  year =	 {1988},
  volume =	 {10},
  number =	 {2},
  pages =        {248--266},
  month =	 {April},
  abstract =     "There has been a great deal of research done on the
                 evaluation of the complexity of particular algorithms;
                 little effort, however, has been devoted to the
                 mechanization of this evaluation. The ACE (Automatic
                 Complexity Evaluator) system is able to analyze
                 reasonably large programs, like sorting programs, in a
                 fully mechanically way. A time-complexity function is
                 derived from the initial functional program. This
                 function is transformed into its nonrecursive
                 equivalent according to McCarthy's recursion induction
                 principle, using a predefined library of recursive
                 definitions. As the complexity is not a decidable
                 property, this transformation will not be possible in
                 all cases. The richer the predefined library is, the
                 more likely the system is to succeed. The operations
                 performed by ACE are described and the use of the system
                 is illustrated with the analysis of a sorting
                 algorithm. Related works and further improvements are
                 discussed in the conclusion.",
  keywords =     "Granularity Analysis",

}

@InProceedings{Meta85,
  author =       {{Le M\'{e}tayer}, D.},
  title =        {{Mechanical Analysis of Program Complexity}},
  booktitle =    {Proc. SIGPLAN '85 Symposium},
  series =       {SIGPLAN Notices},
  volume =       {20(7)},
  OPTnumber =       {7},
  pages =        {69--73},
  publisher =    {ACM Press, New York},
  year =         {1985},
  abstract =     "This paper describes the ACE system for automatic
                 generation of complexity functions for a subset of FP.
                 This system is based on program transformation, with a
                 library of more than 1000 transformation rules which
                 are applied to transform the step-counting version of a
                 program to a composition of the complexity function and
                 a size measure.",
  keywords =     "Granularity Analysis",
}

@Article{Benzinger01,
  author = 	 {Benzinger, R.},
  title = 	 {{Automated Complexity Analysis of Nuprl Extracted Programs}},
  journal = 	 {J. Functional Programming},
  year = 	 2001,
  volume =	 11,
  number =	 1,
  pages =	 {3--31},
  doi =          {10.1017/S0956796800003865},
  abstract =     "This paper describes the Automated Complexity Analysis Prototype (ACAp) system for automated complexity analysis of functional programs synthesized with the Nuprl proof development system. We define a simple abstract cost model for NUPRL's term language based on the current call-by-name evaluator. The framework uses abstract functions and abstract lists to facilitate reasoning about primitive recursive programs with first-order functions, lazy lists and a subclass of higher-order functions. The ACAp system automatically derives upper bounds on the time complexity of NUPRL extracts relative to a given profiling semantics. Analysis proceeds by abstract interpretation of the extract, where symbolic evaluation rules extend standard evaluation to terms with free variables. Symbolic evaluation of recursive programs generates systems of multi-variable difference equations, which are solved using the MATHEMATICA computer algebra system. The use of the system is exemplified by analyzing a proof extract that computes the maximum segment sum of a list and a functional program that determines the minimum of a list via sorting. For both results, we compare call-by-name to call-by-value evaluation."
}

@InProceedings{Rose89,
  author = 	 {Rosendahl, M.},
  title = 	 {{Automatic Complexity Analysis}},
  pages =	 {144--156},
  booktitle =    {{Proc. FPCA'89: Intl. Conference on Functional Programming
		  Languages and Computer Architecture}}, 
  year =	 {1989},
  publisher =	 {ACM Press},
  url =          {ftp://ftp.diku.dk/diku/semantics/papers/D-36.dvi.Z}, 
  abstract =     "One way to analyze programs is to derive expressions
                 for their computational behavior. A time bound function
                 (or worst-case complexity) gives an upper bound for the
                 computation time as a function of the size of the
                 input. We describe a system to derive such time bounds
                 automatically using abstract interpretation. The
                 semantics-based setting makes it possible to prove the
                 correctness of the time-bound function. The system can
                 analyze programs in a first-order subset of Lisp and we
                 show how the system also can be used to analyze
                 programs in other languages.",
  keywords =     "Complexity Analysis, Abstract Interpretation",
}


@TechReport{Dorn93,
  author = 	 {Dornic, V.},
  title = 	 {{Ordering Times}},
  institution =  {Department of Computer Science},
  year = 	 {1993},
  type =         {Research Report}, 
  number =	 {{YALEU/DCS/RR-956}},
  address =	 {Yale University},
  month =	 {April}
}



@InProceedings{HoHo10,
  author = 	 {Hoffmann, J. and Hofmann, M.},
  title = 	 {{Amortized Resource Analysis with Polynomial Potential}},
  booktitle =    {{Proc. POPL 2010: Symp. on Principles of Programming Languages}},
  address = 	 {Madrid, Spain},
  note  =        {{submitted}},
  year  =        {2010},
  month = 	 jan}

@inproceedings{HAH11,
  author    = {Jan Hoffmann and Klaus Aehlig and
               Martin Hofmann},
  title     = {{Multivariate Amortized Resource Analysis}},
  booktitle = {{38th Symp. on Principles of Prog. Langs. (POPL'11)}},
  year      = {2011},
  pages     = {357-370}
}

@inproceedings{HoffHof10,
  author    = {Jan Hoffmann and
               Martin Hofmann},
  title     = {{Amortized Resource Analysis with Polynomial Potential - A
             Static Inference of Polynomial Bounds for Functional Programs}},
  booktitle = {{In Proceedings of the 19th European Symposium on Programming (ESOP'10)}},
  pages     = {287-306},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {6012},
  year      = {2010}
}

@inproceedings{COSTA_FMCO07,
 author = {Albert, E. and Arenas, P. and Genaim, S. and Puebla, G. and Zanardini, D.},
 title = {{COSTA: Design and Implementation of a Cost and Termination Analyzer for Java Bytecode}},
 booktitle = {{Proc. FMCO~'07: Intl. Symp. on Formal Methods for Components and Objects}},
 address = {Amsterdam, The Netherlands, October 24--26},
 year = {2007},
 isbn = {978-3-540-92187-5},
 pages = {113--132},
 doi = {http://dx.doi.org/10.1007/978-3-540-92188-2_5},
 publisher = {Springer},
 series = {LNCS~5382},
 OPTaddress = {Berlin, Heidelberg},
 }

@InProceedings{COSTA_Recurrence,
  author = 	 {Albert, E. and Arenas, P. and Genaim, S. and  Puebla, G.},
  title = 	 {{Automatic Inference of Upper Bounds for Recurrence Relations in Cost Analysis}},
  booktitle = {{Proc. SAS~'08: Intl. Symp. on Static Analysis, Springer LNCS~5079}},
  pages = 	 {221--237},
  year = 	 2008,
  address = 	 {Valencia, Spain, July 15--17},
}


@InProceedings{COSTA_StaticProfiling,
  author = 	 {Mera, E.  and L{\'o}pez-Garc{\'\i}a, P.  and Puebla, G.  and  Carro, M.  and Hermenegildo, M.},
  title = 	 {{Combining Static Analysis and Profiling for Estimating Execution Times}},
  booktitle = {{Proc PADL~'07: Intl. Symp. on Practical Aspects of Declarative Languages}},
  pages = 	 {140--154},
  year = 	 2007,
  series = 	 {LNCS~4354},
  month = 	 jan,
  publisher = {Springer}}

@InProceedings{Albert09,
  author = 	 {E. Albert and S. Genaim and M. {G{\'o}mez-Zamalloa}},
  title = 	 {{Live Heap Space Analysis for Languages with Garbage Collection}},
  booktitle = {{Proc. ISMM~'09: Intl.\ Symp.\ on Memory Management}},
  year = 	 2009,
  address = 	 {Dublin, Ireland, June 19--20}}

@InProceedings{Braberman08,
  author = 	 {V. Braberman and F. Fern{\'a}ndez and D. Garbervetsky and S. Yovine},
  title = 	 {{Parametric Prediction of Heap Memory Requirements}},
  booktitle = {{Proc. ISMM~'08: Intl.\ Symp.\ on Memory Management}},
  year = 	 2008,
  address = 	 {New York, NY, USA},
}

@InProceedings{Chin08,
  author = 	 {W-N. Chin and H.H. Nguyen and C. Popeea and S. Qin},
  title = 	 {{Analysing Memory Resource Bounds for Low-level Programs}},
  booktitle = {{Proc. ISMM'08: Intl.\ Symp.\ on Memory Management}},
  year = 	 2008,
  address = 	 {New York, NY, USA},
}

@article{GomezLiu02,
 author = {G\'{o}mez, Gustavo and Liu, Yanhong A.},
 title = {{Automatic Time-Bound Analysis for a Higher-Order Language}},
 journal = {SIGPLAN Not.},
 volume = {37},
 number = {3},
 year = {2002},
 issn = {0362-1340},
 pages = {75--86},
 doi = {http://doi.acm.org/10.1145/509799.503039},
 publisher = {ACM},
 address = {New York, NY, USA},
 }


@InProceedings{BoehmC++,
  author = 	 {Hans-J. Boehm and Sarita V. Adve},
  title = 	 {{Foundations of the C++ concurrency memory model}},
  booktitle = {{PLDI'08: Conference on Programming Language Design and Implementation}},
  address = 	 {June 7-�13, 2008, Tucson, Arizona, USA},
  year =         {2012},
  url =          {http://portal.acm.org/citation.cfm?id=1375581.1375591},
  abstract =     "Currently multi-threaded C or C++ programs combine a singlethreaded
programming language with a separate threads library.
This is not entirely sound [7].
We describe an effort, currently nearing completion, to address
these issues by explicitly providing semantics for threads in the
next revision of the C++ standard. Our approach is similar to
that recently followed by Java [25], in that, at least for a welldefined
and interesting subset of the language, we give sequentially
consistent semantics to programs that do not contain data races.
Nonetheless, a number of our decisions are often surprising even to
those familiar with the Java effort:
(i) We (mostly) insist on sequential consistency for race-free programs,
in spite of implementation issues that came to light after
the Java work.
(ii) We give no semantics to programs with data races. There are no
benign C++ data races.
(iii) We use weaker semantics for trylock than existing languages
or libraries, allowing us to promise sequential consistency with
an intuitive race definition, even for programs with trylock.
This paper describes the simple model we would like to be able
to provide for C++ threads programmers, and explain how this, together
with some practical, but often under-appreciated implementation
constraints, drives us towards the above decisions."
}

@InProceedings{MathC++,
  author = 	 {Mark Batty and Scott Owens and Susmit Sarkar and Peter Sewell and Tjark Weber},
  title = 	 {{Mathematizing C++ Concurrency}},
  booktitle = {{POPL 2012: 39th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages}},
  year = 	 2012,
  address = 	 {Philadelphia, USA, January 25-27},
  publisher = {ACM Press},
  url =          {http://portal.acm.org/citation.cfm?doid=1925844.1926394},
  abstract =     "Shared-memory concurrency in C and C++ is pervasive in systems
programming, but has long been poorly defined. This motivated
an ongoing shared effort by the standards committees to specify
concurrent behaviour in the next versions of both languages. They
aim to provide strong guarantees for race-free programs, together
with new (but subtle) relaxed-memory atomic primitives for highperformance
concurrent code. However, the current draft standards,
while the result of careful deliberation, are not yet clear and rigorous
definitions, and harbour substantial problems in their details.
In this paper we establish a mathematical (yet readable) semantics
for C++ concurrency. We aim to capture the intent of the current
(``Final Committee'') Draft as closely as possible, but discuss
changes that fix many of its problems. We prove that a proposed
x86 implementation of the concurrency primitives is correct with
respect to the x86-TSO model, and describe our CPPMEM tool for
exploring the semantics of examples, using code generated from
our Isabelle/HOL definitions.
Having already motivated changes to the draft standard, this
work will aid discussion of any further changes, provide a correctness
condition for compilers, and give a much-needed basis for
analysis and verification of concurrent C and C++ programs."
}

@ARTICLE{PCSIM:2009,
  AUTHOR={D. Pecevski and T. Natschl\"{a}ger and K. Schuch},
  TITLE={{PCSIM: a parallel simulation environment for neural circuits fully integrated with Python}},
  JOURNAL={Frontiers in Neuroinformatics},
  NUMBER={11},
  VOLUME={3},
  YEAR={2009},
  OPTURL={http://www.frontiersin.org/Journal/Abstract.aspx?s=752&name=neuroinformatics&ART_DOI=10.3389/neuro.11.011.2009},
  OPTDOI={10.3389/neuro.11.011.2009},
  OPTISSN={1662-5196},
}

% -----------------------------------------------------------------------------
% profiling-based tuning

@INPROCEEDINGS{664387,
author={Maheshwari, P.},
journal={Heterogeneous Processing, 1992. Proceedings. Workshop on}, 
title={{Controlling Parallelism for Larger Grain Execution of Functional Programs Using Complexity Information}},
year={1992},
month={mar.},
volume={},
number={},
pages={63 -74},
abstract={},
keywords={},
doi={10.1109/WHP.1992.664387},
ISSN={1066-1220},}

@InProceedings{SoBo95,
  author = 	 {Sodan, A.C. and Bock, H.},
  title = 	 {{Extracting Characteristics from Functional Programs for
                   Mapping to Massively Parallel Machines}},
  year =         {1995},
  booktitle =	 {HPFC'95 --- High Performance Functional Computing},
  pages =        {134--148},
  address =	 {Denver, Colorado, April 10--12},
  keywords =     {parallel Lisp, profiling, large-scale programming},
  url =          {ftp://sisal.llnl.gov/pub/hpfc/papers95/paper14.ps},
  abstract =     "For  problems  with highly  dynamic behavior, our  experiments  showed that
there are specific characteristics for different applications. We therefore
propose a mapping environment   providing   several strategies  for    both
granularity control and  dynamic load balancing.  For appropriate selection
and   parameterization  of   strategies,   we   extract   the   application
characteristics     using   trace-based     profiling     and   appropriate
evaluations.  Our profiling  approach differs   from  others in that   more
information (like argument sizes or the branching  factor) is collected and
more advanced evaluations  are performed. Large real-life applications have
been  successfully   measured,  and examples   demonstrate  differences  in
characteristics and  which the corresponding  strategies being  appropriate
are."
}

@InProceedings{Sarg93,
  author = 	 {Sargeant, J.},
  title = 	 {{Improving Compilation of Implicit Parallel Programs by
                   Using Runtime Information}},
  OPTnumber =	 {ANL-91/34},
  pages =	 {129--148},
  booktitle =    {{Workshop on the Compilation of Symbolic Languages for
                  Parallel Computers}},
  year =	 {1993},
  address =	 {Argonne National Laboratory},
  month =	 {July},
}


% -----------------------------------------------------------------------------
% auto-tuning

@article{Tournavitis:2009:THA:1543135.1542496,
 author = {Tournavitis, Georgios and Wang, Zheng and Franke, Bj\"{o}rn and O'Boyle, Michael F.P.},
 title = {Towards a holistic approach to auto-parallelization: integrating profile-driven parallelism detection and machine-learning based mapping},
 journal = {SIGPLAN Not.},
 volume = {44},
 issue = {6},
 month = {June},
 year = {2009},
 issn = {0362-1340},
 pages = {177--187},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1543135.1542496},
 doi = {http://doi.acm.org/10.1145/1543135.1542496},
 acmid = {1542496},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {auto-parallelization, machine-learning based parallelism mapping, openmp, profile-driven parallelism detection},
} 

@inproceedings{Tournavitis:2009:THA:1542476.1542496,
 author = {Tournavitis, Georgios and Wang, Zheng and Franke, Bj\"{o}rn and O'Boyle, Michael F.P.},
 title = {Towards a holistic approach to auto-parallelization: integrating profile-driven parallelism detection and machine-learning based mapping},
 booktitle = {Proceedings of the 2009 ACM SIGPLAN conference on Programming language design and implementation},
 series = {PLDI '09},
 year = {2009},
 isbn = {978-1-60558-392-1},
 location = {Dublin, Ireland},
 pages = {177--187},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1542476.1542496},
 doi = {http://doi.acm.org/10.1145/1542476.1542496},
 acmid = {1542496},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {auto-parallelization, machine-learning based parallelism mapping, openmp, profile-driven parallelism detection},
}

@inproceedings{DBLP:conf/ispass/LiMSSSM09,
  author    = {Jiangtian Li and
               Xiaosong Ma and
               Karan Singh and
               Martin Schulz and
               Bronis R. de Supinski and
               Sally A. McKee},
  title     = {Machine learning based online performance prediction for
               runtime parallelization and task scheduling},
  booktitle = {ISPASS},
  year      = {2009},
  pages     = {89-100},
  ee        = {http://dx.doi.org/10.1109/ISPASS.2009.4919641},
  crossref  = {DBLP:conf/ispass/2009},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/ispass/2009,
  title     = {IEEE International Symposium on Performance Analysis of
               Systems and Software, ISPASS 2009, April 26-28, 2009, Boston,
               Massachusetts, USA, Proceedings},
  booktitle = {ISPASS},
  publisher = {IEEE},
  year      = {2009},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{DBLP:conf/europar/IpekSSM05,
  author    = {Engin Ipek and
               Bronis R. de Supinski and
               Martin Schulz and
               Sally A. McKee},
  title     = {An Approach to Performance Prediction for Parallel Applications},
  booktitle = {Euro-Par},
  year      = {2005},
  pages     = {196-205},
  ee        = {http://dx.doi.org/10.1007/11549468_24},
  crossref  = {DBLP:conf/europar/2005},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/europar/2005,
  editor    = {Jos{\'e} C. Cunha and
               Pedro D. Medeiros},
  title     = {Euro-Par 2005, Parallel Processing, 11th International Euro-Par
               Conference, Lisbon, Portugal, August 30 - September 2, 2005,
               Proceedings},
  booktitle = {Euro-Par},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3648},
  year      = {2005},
  isbn      = {3-540-28700-0},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  doi = {http://dx.doi.org/10.1007/11549468_24},
  abstract = "Accurately modeling and predicting performance for large-scale applications becomes increasingly difficult as system complexity scales dramatically. Analytic predictive models are useful, but are difficult to construct, usually limited in scope, and often fail to capture subtle interactions between architecture and software. In contrast, we employ multilayer neural networks trained on input data from executions on the target platform. This approach is useful for predicting many aspects of performance, and it captures full system complexity. Our models are developed automatically from the training input set, avoiding the difficult and potentially error-prone process required to develop analytic models. This study focuses on the high-performance, parallel application SMG2000, a much studied code whose variations in execution times are still not well understood. Our model predicts performance on two large-scale parallel platforms within 5\%-7\% error across a large, multi-dimensional parameter space."
}

@inproceedings{DBLP:conf/ppopp/LeeBSSSM07,
  author    = {Benjamin C. Lee and
               David M. Brooks and
               Bronis R. de Supinski and
               Martin Schulz and
               Karan Singh and
               Sally A. McKee},
  title     = {Methods of inference and learning for performance modeling
               of parallel applications},
  booktitle = {PPOPP},
  year      = {2007},
  pages     = {249-258},
  ee        = {http://doi.acm.org/10.1145/1229428.1229479},
  crossref  = {DBLP:conf/ppopp/2007},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/ppopp/2007,
  editor    = {Katherine A. Yelick and
               John M. Mellor-Crummey},
  title     = {Proceedings of the 12th ACM SIGPLAN Symposium on Principles
               and Practice of Parallel Programming, PPOPP 2007, San Jose,
               California, USA, March 14-17, 2007},
  booktitle = {PPOPP},
  publisher = {ACM},
  year      = {2007},
  isbn      = {978-1-59593-602-8},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  doi = {http://doi.acm.org/10.1145/1229428.1229479},
  abstract = "Increasing system and algorithmic complexity combined with a
growing number of tunable application parameters pose significant
challenges for analytical performance modeling. We propose a series
of robust techniques to address these challenges. In particular,
we apply statistical techniques such as clustering, association, and
correlation analysis, to understand the application parameter space
better.We construct and compare two classes of effective predictive
models: piecewise polynomial regression and artifical neural networks.
We compare these techniques with theoretical analyses and
experimental results. Overall, both regression and neural networks
are accurate with median error rates ranging from 2.2 to 10.5 percent.
The comparable accuracy of these models suggest differentiating
features will arise from ease of use, transparency, and computational
efficiency."
}

@inproceedings{DBLP:conf/asplos/IpekMCSS06,
  author    = {Engin Ipek and
               Sally A. McKee and
               Rich Caruana and
               Bronis R. de Supinski and
               Martin Schulz},
  title     = {Efficiently exploring architectural design spaces via predictive
               modeling},
  booktitle = {ASPLOS},
  year      = {2006},
  pages     = {195-206},
  ee        = {http://doi.acm.org/10.1145/1168857.1168882},
  crossref  = {DBLP:conf/asplos/2006},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/asplos/2006,
  editor    = {John Paul Shen and
               Margaret Martonosi},
  title     = {Proceedings of the 12th International Conference on Architectural
               Support for Programming Languages and Operating Systems,
               ASPLOS 2006, San Jose, CA, USA, October 21-25, 2006},
  booktitle = {ASPLOS},
  publisher = {ACM},
  year      = {2006},
  isbn      = {1-59593-451-0},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  doi = {http://doi.acm.org/10.1145/1168857.1168882},
  abstract = "Architects use cycle-by-cycle simulation to evaluate design choices
and understand tradeoffs and interactions among design parameters.
Efficiently exploring exponential-size design spaces with
many interacting parameters remains an open problem: the sheer
number of experiments renders detailed simulation intractable. We
attack this problem via an automated approach that builds accurate,
confident predictive design-space models. We simulate sampled
points, using the results to teach our models the function describing
relationships among design parameters. The models produce highly
accurate performance estimates for other points in the space, can
be queried to predict performance impacts of architectural changes,
and are very fast compared to simulation, enabling efficient discovery
of tradeoffs among parameters in different regions.We validate
our approach via sensitivity studies on memory hierarchy and CPU
design spaces: our models generally predict IPC with only 1-2%
error and reduce required simulation by two orders of magnitude.
We also show the efficacy of our technique for exploring chip multiprocessor
(CMP) design spaces: when trained on a 1\% sample
drawn from a CMP design space with 250K points and up to 55�
performance swings among different system configurations, our
models predict performance with only 4-5\% error on average. Our
approach combines with techniques to reduce time per simulation,
achieving net time savings of three-four orders of magnitude."
}

@InProceedings{gomez01:_neuroev_method_for_dynam_resour,
  author = 	 {F. Gomez and D. Burger and R. Miikkulainen},
  title = 	 {{A Neuroevolution Method for Dynamic Resource Allocation on a Chip Multiprocessor}},
  booktitle = {{International Joint Conference on Neural Networks (IJCNN-01)}},
  year = 	 2001,
  pages = {2355--2361},
  publisher = {IEEE},
  url = {ftp://ftp.cs.utexas.edu/pub/neural-nets/papers/gomez.ijcnn01.ps.gz},
  abstract = "Technology-driven limitations will soon force microprocessor chips to contain multiple processing cores, as the scalability of individual cores peaks but transistor counts continue to increase. To obtain best performance, flexible management of the on-chip resources, such as cache memory and off-chip bandwidth, is needed. However, control for the dynamic management of these on-chip resources is difficult to design. In this paper, we propose a method for developing such a controller: evolving a recurrent neural network using the Enforced Subpopulations algorithm. The method is tested in a trace-based simulation that measures dynamic assignation of a pool of level-two cache banks to a set of processing cores. We present results showing that, when the chip is controlled by the neural network, we obtain a 13\% performance improvement over static cache partitioning.",
}

% -----------------------------------------------------------------------------
% DBLP

@proceedings{DBLP:conf/icfp/2010,
  editor    = {Paul Hudak and
               Stephanie Weirich},
  title     = {Proceeding of the 15th ACM SIGPLAN international conference
               on Functional programming, ICFP 2010, Baltimore, Maryland,
               USA, September 27-29, 2010},
  booktitle = {ICFP},
  publisher = {ACM},
  year      = {2010},
  isbn      = {978-1-60558-794-3},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/popl/2011,
  editor    = {Thomas Ball and
               Mooly Sagiv},
  title     = {Proceedings of the 38th ACM SIGPLAN-SIGACT Symposium on
               Principles of Programming Languages, POPL 2011, Austin,
               TX, USA, January 26-28, 2011},
  booktitle = {POPL},
  publisher = {ACM},
  year      = {2011},
  isbn      = {978-1-4503-0490-0},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/ccgrid/2010,
  title     = {10th IEEE/ACM International Conference on Cluster, Cloud
               and Grid Computing, CCGrid 2010, 17-20 May 2010, Melbourne,
               Victoria, Australia},
  booktitle = {CCGRID},
  publisher = {IEEE},
  year      = {2010},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/ispa/2008,
  title     = {IEEE International Symposium on Parallel and Distributed
               Processing with Applications, ISPA 2008, Sydney, NSW, Australia,
               December 10-12, 2008},
  booktitle = {ISPA},
  publisher = {IEEE},
  year      = {2008},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/europar/2007,
  editor    = {Anne-Marie Kermarrec and
               Luc Boug{\'e} and
               Thierry Priol},
  title     = {Euro-Par 2007, Parallel Processing, 13th International Euro-Par
               Conference, Rennes, France, August 28-31, 2007, Proceedings},
  booktitle = {Euro-Par},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {4641},
  year      = {2007},
  isbn      = {978-3-540-74465-8},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/gpce/2006,
  editor    = {Stan Jarzabek and
               Douglas C. Schmidt and
               Todd L. Veldhuizen},
  title     = {Generative Programming and Component Engineering, 5th International
               Conference, GPCE 2006, Portland, Oregon, USA, October 22-26,
               2006, Proceedings},
  booktitle = {GPCE},
  publisher = {ACM},
  year      = {2006},
  isbn      = {1-59593-237-2},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/fm/2009,
  editor    = {Ana Cavalcanti and
               Dennis Dams},
  title     = {FM 2009: Formal Methods, Second World Congress, Eindhoven,
               The Netherlands, November 2-6, 2009. Proceedings},
  booktitle = {FM},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {5850},
  year      = {2009},
  isbn      = {978-3-642-05088-6},
  ee        = {http://dx.doi.org/10.1007/978-3-642-05089-3},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/popl/2010,
  editor    = {Manuel V. Hermenegildo and
               Jens Palsberg},
  title     = {Proceedings of the 37th ACM SIGPLAN-SIGACT Symposium on
               Principles of Programming Languages, POPL 2010, Madrid,
               Spain, January 17-23, 2010},
  booktitle = {POPL},
  publisher = {ACM},
  year      = {2010},
  isbn      = {978-1-60558-479-9},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{Hollmann08,
 author = {Hollmann, Viktor and Zo, Hangjung},
 title = {{OSOR.EU: An Open Source Sharing System for e-Government Solutions in the EU}},
 booktitle = {Proceedings of the 2008 Third International Conference on Convergence and Hybrid Information Technology - Volume 02},
 series = {ICCIT '08},
 year = {2008},
 pages = {992--996},
 url = {http://dx.doi.org/10.1109/ICCIT.2008.385},
 publisher = {IEEE Computer Society},
 address = {Washington, DC},
} 

@inproceedings{GMB+13,
  author = {Goli, Mehdi and McCall, John and Brown, Christopher and Janjic, Vladimir and Hammond, Kevin},
  title = {{Mapping Parallel Programs to Heterogeneous CPU/GPU Architectures Using a Monte Carlo Tree Search}},
  year = {2013},
  booktitle = {IEEE Congress on Evolutionary Computing (CEC 2013)}
}

@inproceedings{BLT10,
  author = {Brown, Christopher and Li, Huiqing  and Thompson, Simon},
  title = {{An Expression Processor: A Case Study in Refactoring Haskell Programs}},
  booktitle = {Symposium on Trends in Functional Programming (TFP 2010)},
  year = 2010,
  pages = {31--49}
}

@article{BDH+13,
  author = {Brown, Christopher and Danelutto, Marco and Hammond, Kevin and Kilpatrick, Peter and Elliott, Archibald},
  title = {{Cost-Directed Refactoring for Parallel Erlang Programs}},
  journal = {{International Journal of Parallel Processing (IJPP)}},
  publisher = {Springer},
  pages = {1--19},
  year = {2013}
}

@inproceedings{JHY08,
  author = {Janjic, Vladimir and Hammond, Kevin and Yang, Yang},
  title = {{Using Application Information to Drive Adaptive Middleware Scheduling Decisions}},
  booktitle = {Workshop on Middleware-Application Interaction (MAI '08)},
  year = 2008,
  pages = {7--12}
}

@inproceedings{JaHa13,
  author = {Janjic, Vladimir and Hammond, Kevin},
  title = {{How to be a Successful Thief: Feudal Work-Stealing for Irregular Divide-and-Conquer Applications on Heterogeneous Distributed Systems}},
  booktitle = {International European Conference on Parallel and Distributed Computing (Euro-Par 2013)},
  year = 2013,
  pages = {114--125}
}

% ReLooper demo OOPSLA09. Consider using "dig" citation instead
@inproceedings{ReLooper,
 author = {Dig, Danny and Tarce, Mihai and Radoi, Cosmin and Minea, Marius and Johnson, Ralph},
 title = {Relooper: Refactoring for Loop Parallelism in Java},
 OPTbooktitle = {Proceedings of the 24th ACM SIGPLAN Conference Companion on Object Oriented Programming Systems Languages and Applications},
 booktitle = {OOPSLA '09},
 year = {2009},
 OPTisbn = {978-1-60558-768-4},
 OPTlocation = {Orlando, Florida, USA},
 OPTpages = {793--794},
 OPTnumpages = {2},
 OPTurl = {http://doi.acm.org/10.1145/1639950.1640018},
 OPTdoi = {10.1145/1639950.1640018},
 OPTacmid = {1640018},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {concurrency, parallelism, program analysis, program transformation, refactoring},
}

@incollection{HdpH,
year={2012},
booktitle={{IFL'12: Implementation and Application of Functional Languages}},
OPTvolume={7257},
series={LNCS~7257},
OPTseries={Lecture Notes in Computer Science},
editor={Gill, Andy and Hage, Jurriaan},
title={{Implementing a High-Level Distributed-Memory Parallel Haskell in Haskell}},
OPTurl={http://dx.doi.org/10.1007/978-3-642-34407-7_3},
publisher={Springer},
author={Maier, Patrick and Trinder, Phil},
OPTpages={35-50},
}

@PhdThesis{Stewart13,
  author = 	 {Rob Stewart},
  title = 	 {{Reliable Massively Parallel Symbolic Computing: Fault Tolerance for a Distributed Haskell}},
  school = 	 {School of Mathematical and Computer Sciences, Heriot-Watt University},
  year = 	 2013,
  note = 	 {\url{http://www.macs.hw.ac.uk/~rs46/phd-thesis.html}}}

@Misc{graph500,
  key = 	 {Graph500},
  title = 	 {{The Graph 500 List}},
  month = 	 nov,
  year = 	 2014,
  note = 	 {\url{http://www.graph500.org/}}}

@TechReport{ASCRreport,
  author = 	 {Sean Ahern {\it et al}}, 
  title = 	 {{Scientific Recovery at the ExaScale: Report from the DOE ASCR 2011 Workshop on Exascale Data Management, Analysis, and Visualization}},
  institution =  {Houston, TX},
  year = 	 2011,
  month = 	 feb,
  note = 	 {\url{http://science.energy.gov/\%7E/media/ascr/ascac/pdf/reports/2013/ASCAC_Data_Intensive_Computing_report_final.pdf}}}


@Misc{AiPL14,
  author = 	 {Heriot-Watt University},
  title = 	 {{Summer School on Advances in Programming Languages}},
  month = 	 aug,
  year = 	 2014,
  note = 	 {\url{http://www.macs.hw.ac.uk/~dsg/events/ISS-AiPL-2014/}}}


@inproceedings{CCI,
    author = {Scott Atchley and David Dillow and Galen Shipman and Patrick Geoffray and Jeffrey M. Squyres and George Bosilca and Ronald Minnich},
    title = {The Common Communication Interface ({CCI})},
    booktitle = {19th Annual IEEE Symposium on High-Performance Interconnects},
    month = {August},
    year = {2011},
}

@inproceedings{RINA,
  author = {Day, John and Matta, Ibrahim and Mattar, Karim},
  title = {Networking is {IPC}: A Guiding Principle to a Better Internet},
  booktitle = {Proceedings of the 2008 ACM CoNEXT Conference},
  series = {CoNEXT '08},
  year = {2008},
  isbn = {978-1-60558-210-8},
  location = {Madrid, Spain},
  pages = {67:1--67:6},
  articleno = {67},
  numpages = {6},
  url = {http://doi.acm.org/10.1145/1544012.1544079},
  doi = {10.1145/1544012.1544079},
  acmid = {1544079},
  publisher = {ACM},
  address = {New York, NY, USA},
} 

@chapter{BlumS:11:NOT,
    author = {Blum, E.K. and Savitch, W.},
    title  = {The Software Side of Computer Science - Computer Programming},
    booktitle = {Computer Science: The Hardware, Software and Heart of It},
    editor = {Blum, E.K. and Aho, A.V.},
    publisher = {Springer},
    year = {2011}
}
@article{Backus:78:NOT,
    author = {Backus, J},
    title = {The History of {Fortran} {I}, {II}, and {III}},
    journal = {{SIGPLAN} Notices},
    volume = {13},
    number = {8},
    year = {1978},
    publisher = {{ACM} Press}
}
@article{CarrSA:03:NOT,
  Author = {Carr, H. and Snoeyink, J. and Axen, U.},
  Journal = {Computational Geometry},
  Keywords = {scivis,topology},
  Number = {2},
  Pages = {75--94},
  Publisher = {Elsevier},
  Title = {Computing Contour Trees in All Dimensions},
  Volume = {24},
  Year = {2003}
}
@book{Bertin:83:NOT,
  Author = {J. Bertin},
  Note = {(From the French Edition, 1967)},
  Publisher = {University of Wisconsin Press},
  Title = {Semiology of Graphics: Diagrams, Networks, Maps},
  Year = {1983}
  }
@book{ThomasC:05:NOT,
  author = "Thomas, J.J. and Cook, K.A.",
  title = "Illuminating the Path: The Research Agenda for Visual Analytics",
  publisher = "{National Visualization and Analytics Ctr}",
  year = "2005"
}
@article{GerberBPW:10:NOT,
  author = {Gerber, S. and Bremer, P. and Pascucci, V. and Whitaker, R.},
  title = {Visual Exploration of High Dimensional Scalar Functions},
  journal ={Transactions on Visualization and Computer Graphics},
  volume = {16},
  number = {6},
  year = {2010},
  publisher = {IEEE Computer Society}
}
@article{GyulassyKKHHP:12,
  author = {Gyulassy, A. and Kotava, N. and Kim, M. and Hansen, C. and Hagen, H. and Pascucci, V.},
  title = {Direct Feature Visualization Using Morse-Smale Complexes},
  journal ={Transactions on Visualization and Computer Graphics},
  volume = {18},
  number = {9},
  year = {2012},
  publisher = {IEEE Computer Society}
}
@book{EdelsbrunnerH:10:NOT,
  author = "Edelsbrunner, H. and Harer, J.L.",
  title = "Computational Topology: An Introduction",
  publisher = "American Mathematical Society",
  year = {2010}
}
@inproceedings{HuettenbergerHCSG:13:NOT,
 author = {Huettenberger, L. and Heine, C. and Carr, H. and Scheuermann, G. and Garth, C.},
 title = {Towards Multifield Scalar Topology Based on Pareto Optimality},
 booktitle = {Proc. Eurographics Conference on Visualization},
 year = {2013},
 publisher = {Eurographics Association}
} 
@book{Tufte:83:NOT,
        Author = {E. Tufte},
        Publisher = {Graphics Press},
        Title = {The Visual Display of Quantative Information},
        Year = {1983}}
@book{Tufte:90,
        Author = {E.R. Tufte},
        Publisher = {Graphics Press},
        Title = {Envisioning Information},
        Year = {1990}}
@article{McCormickDB:87:NOT,
        Author = {B.H. McCormick and T.A. DeFanti and M.D. Brown},
        Journal = {Computer Graphics},
        Number = {6},
        Publisher = {ACM Press},
        Title = {Visualization in Scientific Computing},
        Volume = {21},
        Year = {1987}}
@article{Backus:78a:NOT,
  Author = {Backus, J.},
  Journal = {Comm. of the {ACM}},
  Volume = {21},
  Number = {8},
  Pages = {75--94},
  Publisher = {ACM},
  Title = {Can Programming be Liberated from the von {N}eumann Style?  A Functional Style and Its Algebra of Programs},
  Year = {1978}
}
@article{Guenther:12:NOT,
  Author = {G\"unther, D. and Reininghaus, J. and Wagner, H. and Hotz, I.},
        journal={The Visual Computer},
        volume={28},
        number={10},
        title={Efficient computation of 3D Morse�Smale complexes and persistent homology using discrete Morse theory},
        publisher={Springer-Verlag},
        pages={959-969},
        year= {2012}
}
@article{DukeWBR:06,
  Author = {D. Duke and M. Wallace and R. Borgo and C. Runciman},
  Journal = {Trans. on Visualization and Computer Graphics},
  Number = {5},
  Pages = {973--980},
  Publisher = {{IEEE} Computer Society},
  Title = {Fine-grained Visualization Pipelines and Lazy Functional Languages},
  Volume = {12},
  Year = {2006}
}
@article{DukeCKSNS:12:NOT,
  Author = {Duke, D. and Carr, H. and Knoll, A. and Schunck, N. and  Nam, H.A. and  Staszczak, A.},
  Journal = {Trans. on Visualization and Computer Graphics},
  Number = {12},
  Pages = {2033--2040},
  Publisher = {{IEEE} Computer Society},
  Title = {Visualizing Nuclear Scission through a Multifield Extension of Topological Analysis},
  Volume = {18},
  Year = {2012}
}
@article{CarrD:14:NOT,
  Author = {H. Carr and D.J. Duke},
  Journal = {Trans. on Visualization and Computer Graphics},
  Publisher = {{IEEE} Computer Society},
  Title = {Joint Contour Nets},
  Year = {2014}
}
@book{BethelCH:12,
  title = "High Performance Visualization",
  editor = "{E. Wes} Bethel and H. Childs and C. Hansen",
  publisher = "{CRC} Press",
  year = "2012"
}
@inproceedings{Wortmann:13,
 author = {Wortmann, Peter M. and Duke, David},
 title = {Causality of Optimized Haskell: What is burning our cycles?},
 booktitle = {Proc. of Haskell Symposium},
 year = {2013},
 pages = {141--152},
 publisher = {ACM}
} 
@article{BWP10:NOT,
  Author = {Bremer, Peer-Timo and Weber, Gunther and Pascucci, Valerio and Day, Marcus S. and Bell, John},
  Date-Added = {2012-03-30 12:00:19 +0000},
  Date-Modified = {2012-03-30 12:00:19 +0000},
  Journal = {Trans. on Visualization and Computer Graphics},
  Keywords = {Scalar Overlap},
  Number = {2},
  Pages = {248-260},
  Title = {{Analyzing and Tracking Burning Structures in Lean Premixed Hydrogen Flames}},
  publisher = {{IEEE} Computer Society},
  Volume = {16},
  Year = {2009}}
@article{SchunckDCK:14,
  author = {N. Schunck and D.J. Duke and  H. Carr and A. Knoll}, 
  title = {Description of Induced Nuclear Fission with Skyrme Energy Functionals: {I. S}tatic Potential Energy Surfaces and Fission Fragment Properties},
  year = {2014},
  note = {In Press.}
}

@inproceedings{Duke:2014:PCM:2636228.2636237,
 author = {Duke, David J. and Hosseini, Fouzhan and Carr, Hamish},
 title = {Parallel Computation of Multifield Topology: Experience of Haskell in a Computational Science Application},
 booktitle = {Proceedings of the 3rd ACM SIGPLAN Workshop on Functional High-performance Computing},
 series = {FHPC '14},
 year = {2014},
 isbn = {978-1-4503-3040-4},
 location = {Gothenburg, Sweden},
 pages = {11--21},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2636228.2636237},
 doi = {10.1145/2636228.2636237},
 acmid = {2636237},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {computational topology, haskell, joint contour net, performance},
} 

@InProceedings{IAM14,
  author = 	 {Osamu Saeki,
    Shigeo Takahashi,
    Daisuke Sakurai,
    Hsiang-Yun Wu,
    Keisuke Kikuchi,
    Hamish Carr,
    David Duke,
    Takahiro Yamamoto},
  title = 	 {{Visualizing Multivariate Data Using Singularity Theory}},
  booktitle = {{The Impact of Applications on Mathematics}},
  year = 	 2014,
  volume = 	 1,
  series = 	 {{Mathematics for Industry}},
  pages = 	 {51--65},
  month = 	 jul}


@InBook{BlumS:11,
    author = {Blum, E.K. and Savitch, W.},
    title  = {The Software Side of Computer Science - Computer Programming},
    booktitle = {Computer Science: The Hardware, Software and Heart of It},
    editor = {Blum, E.K. and Aho, A.V.},
    publisher = {Springer},
    year = {2011}
}

@article{Backus:78,
    author = {Backus, J},
    title = {The History of {Fortran} {I}, {II}, and {III}},
    journal = {{SIGPLAN} Notices},
    volume = {13},
    number = {8},
    year = {1978},
    publisher = {{ACM} Press}
}
@article{CarrSA:03,
  Author = {Carr, H. and Snoeyink, J. and Axen, U.},
  Journal = {Computational Geometry},
  Keywords = {scivis,topology},
  Number = {2},
  Pages = {75--94},
  Publisher = {Elsevier},
  Title = {Computing Contour Trees in All Dimensions},
  Volume = {24},
  Year = {2003}
}
@book{Bertin:83,
  Author = {J. Bertin},
  Note = {(From the French Edition, 1967)},
  Publisher = {University of Wisconsin Press},
  Title = {Semiology of Graphics: Diagrams, Networks, Maps},
  Year = {1983}
  }
@book{ThomasC:05,
  author = "Thomas, J.J. and Cook, K.A.",
  title = "Illuminating the Path: The Research Agenda for Visual Analytics",
  publisher = "{National Visualization and Analytics Ctr}",
  year = "2005"
}
@article{GerberBPW:10,
  author = {Gerber, S. and Bremer, P. and Pascucci, V. and Whitaker, R.},
  title = {Visual Exploration of High Dimensional Scalar Functions},
  journal ={Transactions on Visualization and Computer Graphics},
  volume = {16},
  number = {6},
  year = {2010},
  publisher = {IEEE Computer Society}
}
@book{EdelsbrunnerH:10,
  author = "Edelsbrunner, H. and Harer, J.L.",
  title = "Computational Topology: An Introduction",
  publisher = "American Mathematical Society",
  year = {2010}
}
@inproceedings{HuettenbergerHCSG:13,
 author = {Huettenberger, L. and Heine, C. and Carr, H. and Scheuermann, G. and Garth, C.},
 title = {Towards Multifield Scalar Topology Based on Pareto Optimality},
 booktitle = {Proc. Eurographics Conference on Visualization},
 year = {2013},
 publisher = {Eurographics Association}
} 
@book{Tufte:83,
        Author = {E. Tufte},
        Publisher = {Graphics Press},
        Title = {The Visual Display of Quantative Information},
        Year = {1983}}
@book{Tufte:90,
        Author = {E.R. Tufte},
        Publisher = {Graphics Press},
        Title = {Envisioning Information},
        Year = {1990}}
@article{McCormickDB:87,
        Author = {B.H. McCormick and T.A. DeFanti and M.D. Brown},
        Journal = {Computer Graphics},
        Number = {6},
        Publisher = {ACM Press},
        Title = {Visualization in Scientific Computing},
        Volume = {21},
        Year = {1987}}
@article{Backus:78a,
  Author = {Backus, J.},
  Journal = {Comm. of the {ACM}},
  Volume = {21},
  Number = {8},
  Pages = {75--94},
  Publisher = {ACM},
  Title = {Can Programming be Liberated from the von {N}eumann Style?  A Functional Style and Its Algebra of Programs},
  Year = {1978}
}
@article{Guenther:12,
  Author = {G\"unther, D. and Reininghaus, J. and Wagner, H. and Hotz, I.},
        journal={The Visual Computer},
        volume={28},
        number={10},
        title={Efficient computation of 3D Morse�Smale complexes and persistent homology using discrete Morse theory},
        publisher={Springer-Verlag},
        pages={959-969},
        year= {2012}
}
@article{DukeWBR:06,
  Author = {D. Duke and M. Wallace and R. Borgo and C. Runciman},
  Journal = {Trans. on Visualization and Computer Graphics},
  Number = {5},
  Pages = {973--980},
  Publisher = {{IEEE} Computer Society},
  Title = {Fine-grained Visualization Pipelines and Lazy Functional Languages},
  Volume = {12},
  Year = {2006}
}
@article{DukeCKSNS:12,
  Author = {Duke, D. and Carr, H. and Knoll, A. and Schunck, N. and  Nam, H.A. and  Staszczak, A.},
  Journal = {Trans. on Visualization and Computer Graphics},
  Number = {12},
  Pages = {2033--2040},
  Publisher = {{IEEE} Computer Society},
  Title = {Visualizing Nuclear Scission through a Multifield Extension of Topological Analysis},
  Volume = {18},
  Year = {2012}
}
@article{CarrD:14,
  Author = {H. Carr and D.J. Duke},
  Journal = {Trans. on Visualization and Computer Graphics},
  Publisher = {{IEEE} Computer Society},
  Title = {Joint Contour Nets},
  Year = {2014}
}
@book{BethelCH:12:NOT,
  title = "High Performance Visualization",
  editor = "{E. Wes} Bethel and H. Childs and C. Hansen",
  publisher = "{CRC} Press",
  year = "2012"
}
@inproceedings{Wortmann:13,
 author = {Wortmann, Peter M. and Duke, David},
 title = {Causality of Optimized Haskell: What is burning our cycles?},
 booktitle = {Proc. of Haskell Symposium},
 year = {2013},
 pages = {141--152},
 publisher = {ACM}
} 
@article{BWP10,
  Author = {Bremer, Peer-Timo and Weber, Gunther and Pascucci, Valerio and Day, Marcus S. and Bell, John},
  Date-Added = {2012-03-30 12:00:19 +0000},
  Date-Modified = {2012-03-30 12:00:19 +0000},
  Journal = {Trans. on Visualization and Computer Graphics},
  Keywords = {Scalar Overlap},
  Number = {2},
  Pages = {248-260},
  Title = {{Analyzing and Tracking Burning Structures in Lean Premixed Hydrogen Flames}},
  publisher = {{IEEE} Computer Society},
  Volume = {16},
  Year = {2009}}
@article{SchunckDCK:14,
  author = {N. Schunck and D.J. Duke and  H. Carr and A. Knoll}, 
  title = {Description of Induced Nuclear Fission with Skyrme Energy Functionals: {I. S}tatic Potential Energy Surfaces and Fission Fragment Properties},
  year = {2014},
  note = {In Press.}
}

@inproceedings{Duke:2014:PCM:2636228.2636237,
 author = {Duke, David J. and Hosseini, Fouzhan and Carr, Hamish},
 title = {Parallel Computation of Multifield Topology: Experience of Haskell in a Computational Science Application},
 booktitle = {Proceedings of the 3rd ACM SIGPLAN Workshop on Functional High-performance Computing},
 series = {FHPC '14},
 year = {2014},
 isbn = {978-1-4503-3040-4},
 location = {Gothenburg, Sweden},
 pages = {11--21},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2636228.2636237},
 doi = {10.1145/2636228.2636237},
 acmid = {2636237},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {computational topology, haskell, joint contour net, performance},
} 

@InProceedings{IAM14,
  author = 	 {Osamu Saeki,
    Shigeo Takahashi,
    Daisuke Sakurai,
    Hsiang-Yun Wu,
    Keisuke Kikuchi,
    Hamish Carr,
    David Duke,
    Takahiro Yamamoto},
  title = 	 {{Visualizing Multivariate Data Using Singularity Theory}},
  booktitle = {{The Impact of Applications on Mathematics}},
  year = 	 2014,
  volume = 	 1,
  series = 	 {{Mathematics for Industry}},
  pages = 	 {51--65},
  month = 	 jul}

@book{FaMa04,
  author = {Falk, Heiko and Marwedel, Peter},
  title = {Source Code Optimization Techniques for Data Flow Dominated Embedded Software},
  year = {2004},
  month = oct,
  publisher = {Kluwer Academic Publishers},
  address = {Boston}
}

@inproceedings{FaMa03,
  author = {Falk, Heiko and Marwedel, Peter},
  title = {{Control Flow driven Splitting of Loop Nests at the Source Code Level}},
  year = {2003},
  month = mar,
  pages = {410--415},
  booktitle = {Design, Automation and Test in Europe (DATE)},
  publisher = {IEEE Computer Society},
  address = {Munich, Germany}
}

@article{FaLo10,
  author = {Falk, Heiko and Lokuciejewski, Paul},
  title = {{A compiler framework for the reduction of worst-case execution times}},
  journal = {{The International Journal of Time-Critical Computing Systems (Real-Time Systems)}},
  publisher = {Springer},
  volume = 46,
  number = 2,
  pages = {251--300},
  month = {October},
  year = {2010}
}

@inproceedings{FaKo11,
  author = {Falk, Heiko and Kotthaus, Helena},
  title = {{WCET-driven Cache-aware Code Positioning}},
  booktitle = {Proceedings of ``International Conference on Compilers, Architecture, and Synthesis for Embedded Systems'' (CASES)},
  address = {Taipei, Taiwan},
  year = 2011,
  month = oct,
  pages = {145-154}
}

@inproceedings{FaKl09,
  author = {Falk, Heiko and Kleinsorge, Jan C.},
  title = {{Optimal Static WCET-aware Scratchpad Allocation of Program Code}},
  booktitle = {Proceedings of ``46th Design Automation Conference'' (DAC)},
  address = {San Francisco, United States},
  year = 2009,
  month = jul,
  pages = {732--737}
}

@inproceedings{KFM+11,
  author = {Kelter, Timon and Falk, Heiko and Marwedel, Peter and Chattopadhyay, Sudipta and Roychoudhury, Abhik},
  title = {{Bus-Aware Multicore WCET Analysis through TDMA Offset Bounds}},
  booktitle = {Proceedings of ``23rd Euromicro Conference on Real-Time Systems'' (ECRTS)},
  address = {Porto, Portugal},
  year = 2011,
  month = jul,
  pages = {3--12}
}

@inproceedings{KFM11,
  author = {Kleinsorge, Jan C. and Falk, Heiko and Marwedel, Peter},
  title = {{A Synergetic Approach to Accurate Analysis of Cache-Related Preemption Delay}},
  booktitle = {Proceedings of ``International Conference on Embedded Software'' (EMSOFT)},
  address = {Taipei, Taiwan},
  year = 2011,
  month = oct,
  pages = {329--338}
}

@inproceedings{KFM13,
  author = {Kleinsorge, Jan C. and Falk, Heiko and Marwedel, Peter},
  title = {{Simple Analysis of Partial Worst-case Execution Paths on General Control Flow Graphs}},
  booktitle = {Proceedings of ``International Conference on Embedded Software'' (EMSOFT)},
  address = {Montreal, Canada},
  year = 2013,
  month = oct
}

@article{CCR+14,
  author = {Chattopadhyay, Sudipta and Chong, Lee Kee and Roychoudhury, Abhik and Kelter, Timon and Marwedel, Peter and Falk, Heiko},
  title = {{A Unified WCET Analysis Framework for Multicore Platforms}},
  journal = {{ACM Transactions on Embedded Computing (TECS)}},
  publisher = {ACM},
  volume = 13,
  number = {4s},
  pages = {article no. 124},
  year = {2014}
}

@article{AEF+14,
  author = {Axer, Philip and Ernst, Rolf and Falk, Heiko and others},
  title = {{Building Timing Predictable Embedded Systems}},
  journal = {{ACM Transactions on Embedded Computing (TECS)}},
  publisher = {ACM},
  volume = 13,
  number = {4},
  pages = {article no. 82},
  year = {2014}
}

@inproceedings{GMB+13,
  author = {Goli, Mehdi and McCall, John and Brown, Christopher and Janjic, Vladimir and Hammond, Kevin},
  title = {{Mapping Parallel Programs to Heterogeneous CPU/GPU Architectures Using a Monte Carlo Tree Search}},
  year = {2013},
  booktitle = {IEEE Congress on Evolutionary Computing (CEC 2013)}
}

@inproceedings{BLT10,
  author = {Brown, Christopher and Li, Huiqing  and Thompson, Simon},
  title = {{An Expression Processor: A Case Study in Refactoring Haskell Programs}},
  booktitle = {Symposium on Trends in Functional Programming (TFP 2010)},
  year = 2010,
  pages = {31--49}
}

@inproceedings{JHY08,
  author = {Janjic, Vladimir and Hammond, Kevin and Yang, Yang},
  title = {{Using Application Information to Drive Adaptive Middleware Scheduling Decisions}},
  booktitle = {Workshop on Middleware-Application Interaction (MAI '08)},
  year = 2008,
  pages = {7--12}
}

@inproceedings{JaHa13,
  author = {Janjic, Vladimir and Hammond, Kevin},
  title = {{How to be a Successful Thief: Feudal Work-Stealing for Irregular Divide-and-Conquer Applications on Heterogeneous Distributed Systems}},
  booktitle = {International European Conference on Parallel and Distributed Computing (Euro-Par 2013)},
  year = 2013,
  pages = {114--125}
}
@inproceedings{idreesperformance:13,
  title={Performance Evaluation of Unified Parallel C for Molecular Dynamics},
  author={Idrees, Kamran and Niethammer, Christoph and Esposito, Aniello and Glass, Colin W.},
  booktitle={7th International Conference on PGAS Programming Models},
  pages={237--242}
}

@inproceedings{zhoudart:14,
  title={DART-MPI: An MPI-based Implementation of a PGAS Runtime System},
  author={Zhou, Huan and Mhedheb, Yousri and Idrees, Kamran and Glass, Colin W. and Gracia, Jos{\'e} and F{\"u}rlinger, Karl and Tao, Jie},
  booktitle={8th International Conference on PGAS Programming Models},
  year={2014},
  organization={ACM Digital Library (2014)}
}

@inproceedings{marjanovichpcg:14,
  title={Performance Modeling of the HPCG Benchmark},
  author={Marjanovic, Vladimir and Gracia, Jose and Glass, Colin W.},
  booktitle={5th International Workshop on Performance Modeling, Benchmarking and Simulation of High Performance Computer Systems (PMBS14) held as part of SC14},
  note={Accepted for publication},
  year={2014},
}

@inproceedings{brown2014agricultural:14,
  title={Agricultural Reform: More Efficient Farming Using Advanced Parallel Refactoring Tools},
  author={Brown, Christopher and Janjic, Vladimir and Hammond, Kevin and Schoner, Holger and Idrees, Kamran and Glass, Colin W.},
  booktitle={Parallel, Distributed and Network-Based Processing (PDP), 2014 22nd Euromicro International Conference on},
  pages={36--43},
  year={2014},
  organization={IEEE}
}

@inproceedings{cglassprace:13,
   author              = {Wolfgang Eckhardt and 
                          Alexander Heinecke and 
                          Reinhold Bader and 
                          Matthias Brehm and 
                          Nicolay Hammer and 
                          Herbert Huber and 
                          Hans-Georg Kleinhenz and 
                          Jadran Vrabec and 
                          Hans Hasse and 
                          Martin Horsch and 
                          Martin Bernreuther and 
                          Colin W. Glass and 
                          Christoph Niethammer and 
                          Arndt Bode and 
                          Hans-Joachim Bungartz},
   title               = {591 TFLOPS Multi-trillion Particles Simulation on SuperMUC.},
   booktitle           = {ISC},
   year                = {2013},
   pages               = {1-12},
   ee                  = {http://dx.doi.org/10.1007/978-3-642-38750-0_1},
   crossref            = {2013},
}






@String{JSC =    "Journal of Symbolic Computation"}
@String{S-V =    "Springer"}

@INPROCEEDINGS{HWU:paraform,
 author 	= {Brown, C. and Loidl, H. and Hammond, K},
 title		= {{Paraforming: Forming Haskell Programs using Novel Refactoring Techniques}},
 booktitle	= {TFP'11: Symp.\  on Trends in Functional Programming},
 address	= {Madrid, Spain},
 year		= {2011},
 series = {LNCS~7193},
 pages = {82--97},
 month	= {May},
 }

@ARTICLE{HWU:MCC,
  author = {Loidl, Hans-Wolfgang and Singer, Jeremy (Eds)},
  title = {{SICSA Multicore Challenge Special Issue}},
  journal = {CPE},
  year = {2014},
  volume = {26},
  pages = {929--934},
  number = {4},
  doi = {10.1002/cpe.3077},
  issn = {1532-0634},
  url = {http://dx.doi.org/10.1002/cpe.3077}
}

@InProceedings{HWU:POPL10,
  author = 	 {Jost, S. and  Hammond, K. and Loidl, H-W. and Hofmann, M.},
  title = 	 {{Static Determination of Quantitative Resource Usage for Higher-Order Programs}},
  booktitle = {{POPL'10: Symp.\  on Principles of Prog.\ Lang.}},
  year = 	 2010,
  month = 	 jan,
  pages =       {223--236},
  doi =         {10.1145/1706299.1706327},
  publisher =   {ACM},
  OPTurl = {http://dx.doi.org/10.1145/1706299.1706327}
}

@InProceedings{HWU:ECRTS09,
  author = 	 {Jost, S. and Loidl, H-W. and  Michaelson, G. and {\em others}},
  title = 	 {{Worst-Case Execution Time Analysis through Types}},
  booktitle = {ECRTS'09},
  pages = 	 {13--16},
  year = 	 2009,
  location = 	 {Dublin, Ireland},
  publisher = {ACM},
  OPTnote = 	 {Work-in-Progress Session},
  month = jul
}

@Article{HWU:RASurvey,
  author = 	 {P.W. Trinder and  H-W. Loidl and G.J. Michaelson and {\em others} },
  title = 	 {{Resource Analyses for Parallel and Distributed Coordination}},
  journal = 	 {CPE},
  year = 	 2013,
  volume = 	 25,
  number = 	 3,
  pages = 	 {309--348},
  month = 	 mar,
  doi = {10.1002/cpe.1898}
}

@Article{HWU:TPDS08,
  author = 	 {A. Al Zain and P.W. Trinder and G.J. Michaelson and H-W. Loidl},
  title = 	 {{Evaluating  GpH for Computational GRIDs}},
  journal = 	 {{IEEE TPDS}},
  year = 	 2008,
  volume = 	 19,
  number = 	 2,
  pages = 	 {219--233},
  month = 	 feb}

@InBook{HWU:TLH11,
  author = 	 {P.W. Trinder and K. Hammond and H-W. Loidl},
  OPTed = 	 {D. Padua},
  title = 	 {{Encyclopedia of Parallel Computing}},
  chapter = 	 {{Parallel Functional Languages}},
  publisher = 	 {Springer Verlag},
  year = 	 2011
}

@Article{HWU:SCSCP,
  author = 	 {S. Linton and  P.W. Trinder and H.-W. Loidl and {\em others}},
  title = 	 {{Easy Composition of Symbolic Computation Software using SCSCP}},
  journal = 	 {{J of Symbolic Computation}},
  year = 	 2013,
  volume = 	 49,
  pages = 	 {95--119},
  month = 	 feb,
  doi = {10.1016/j.jsc.2011.12.019}
}

@InProceedings{HWU:Haskell10,
  author = 	 {Marlow, S. and Maier, P. and Loidl, H-W.  and Aswad, M.K.  and Trinder, P. },
  title = 	 {{Better Strategies for Parallel Haskell}},
  booktitle = {{Haskell'10: Haskell Symposium}},
  year = 	 2010,
  month = 	 sep,
  pages = {91--102},
  publisher = {ACM},
  doi = {10.1145/1863523.1863535}
}

% -----------------------------------------------------------------------------
% Loidl references

@inproceedings{HWU:LJFOPARA09,
  author = 	 {Loidl, H-W. and Jost, S.},
  title = 	 {{Improvements to a Resource Analysis for Hume}},
  booktitle = {{FOPARA~'09: Intl. Workshop on Foundational and Practical Aspects of Resource Analysis}},
  publisher = {Springer},
  OPTaddress   = {Heidelberg},
  series    = {LNCS~6324},
  year      = {2009},
  address  = {Eindhoven, the Netherlands},
  month     = nov,
  keywords =     {Resource analysis, Hume},
  url =          {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/FOPARA09.pdf},
  abstract = "
The core of our resource analysis for the embedded systems language Hume is
a resource-generic, type-based inference engine that employs the concept
of amortised costs to statically infer resource bounds.
In this paper we present extensions and improvements of this resource analysis
in several ways. 
We develop and assess a call count analysis for higher-order programs, as a specific
instance of our inference engine.
We address usability aspects in general and in particular discuss an improved presentation of the 
inferred resource bounds together with the possibility of interactively
tuning these bounds.
Finally, we demonstrate improvements in the performance of our analysis.
"
}

@Article{HWU:strategies,
  author = 	 {Philip W. Trinder and Kevin Hammond and Hans-Wolfgang Loidl and Simon L. {Peyton Jones}},
  title = 	 {Algorithm + {S}trategy = {P}arallelism},
  journal = 	 {{J. of Functional Programming}},
  year = 	 {1998},
  volume = 	 {8},
  number = 	 {1},
  month = 	 jan,
  pages = 	 {23--60}
}

@Article{HWU:JSC10,
  author = 	 {S. Linton and K. Hammond and A. Konovalov and C. Brown and P.W. Trinder and H.-W. Loidl and P. Horn and D. Roozemond},
  title = 	 {{Easy Composition of Symbolic Computation Software using SCSCP: A New Lingua Franca for Symbolic Computation}},
  journal = 	 JSC,
  month = jan,
  year = 	 2012,
  OPTnote = 	 {Submitted},
  doi = {10.1016/j.jsc.2011.12.019},
  url = {http://dx.doi.org/10.1016/j.jsc.2011.12.019},
  annote = 	 {Extended version of the ISSAC10 paper on SCSCP},
  keywords =     {OpenMath, SCSCP, interface, coordination, parallelism, SymGrid-Par},
  abstract = "We present the results of the first four years of the European research project SCIEnce --- Symbolic
Computation Infrastructure in Europe (http://www.symbolic-computation.org), which aims to
provide key infrastructure for symbolic computation research. A primary outcome of the project
is that we have developed a new way of combining computer algebra systems using the Symbolic
Computation Software Composability Protocol (SCSCP), in which both protocol messages and
data are encoded in the OpenMath format. We describe the SCSCP middleware and APIs,
outline implementations for various Computer Algebra Systems (CAS), and show how SCSCP-
compliant components may be combined to solve scientific problems that cannot be solved within
a single CAS, or may be organised into a system for distributed parallel computations."
}

@InProceedings{HWU:ZHT*07,
  author = 	 {A. Al Zain and K. Hammond and P. Trinder and S. Linton and H-W. Loidl and M. Costanti},
  title = 	 {{SymGrid-Par: Designing a Framework for Executing Computational Algebra Systems on Computational Grids}},
  booktitle =	 {{ICCS07: International Conference on Computational Science}},
  pages =	 {617--624},
  year =	 2007,
  series =	 {LNCS~4488},
  publisher =    S-V,
  address =	 {Beijing, China},
  month =	 may,
  keywords =     {parallel applications, symbolic computation},
  url        = {http://dx.doi.org/10.1007/978-3-540-72586-2_90},
  myurl = {http://www2.tcs.ifi.lmu.de/~hwloidl/publications/papp2007.pdf},
  abstract = "
  SymGrid-Par is a new framework for executing large computer
  algebra problems on computational Grids. We present the design of
  SymGrid-Par, which supports multiple computer algebra
  packages, and hence provides the novel possibility of composing a
  system using components from different packages.
  Orchestration of the components on the Grid is provided by a
  Grid-enabled parallel Haskell (GpH).  We present a prototype
  implementation of a core component of SymGrid-Par, together with promising 
  measurements of two programs on a modest Grid to demonstrate the
  feasibility of our approach."
}

@InProceedings{HWU:IFL10,
  author = 	 {C. Brown and H-W. Loidl and J. Berthold and K. Hammond},
  title = 	 {{Improving your CASH flow: The Computer Algebra SHell (Extended Abstract)}},
  booktitle =	 {{IFL'10 ---  Intl.\ Workshop on the Implementation of Functional Languages}},
  year = 	 2010,
  month = 	 sep,
  isbn = {978-3-642-24275-5},
  series = {LNCS~6647},
  OPTlocation = {Alphen aan den Rijn, The Netherlands},
  pages = {169--184},
  numpages = {16},
  url = {http://dl.acm.org/citation.cfm?id=2050135.2050146},
  OPTnote = 	 {Draft Proceedings},
  keywords =     {parallel applications, symbolic computation},
  myurl =          {http://www.cs.st-andrews.ac.uk/~hwloidl/SCIEnce/SymGrid-Par/ifl2010.pdf},
  abstract =     "
Some important challenges in the field of symbolic computation ---and functional programming--- are the transparent access to complex, 
mathematical software, the exchange of data between independent systems with specialised tasks and the exploitation of modern 
parallel hardware. One attempt to solve this problem is SymGrid-Par, a system for exploiting parallel hardware in the context of computer algebra. 
Specifically, SymGrid-Par provides an easy-to-use platform for parallel computation that connects several underlying computer algebra systems, communicating
through a standardised protocol for symbolic computation. 

In this paper we describe a new component of SymGrid-Par known as CaSH: the Computer Algebra SHell. CaSH is a system that
allows direct access to SymGrid-Par via GHCi. CaSH thus allows Haskell programmers to exploit high-performance parallel computations using a system designated
for solving problems in computer algebra; whilst still maintaining the purity and express-ability offered by the Haskell environment. We demonstrate access to both sequential and parallel services of SymGrid-Par.
For the latter we use parallel skeletons, implemented in the Haskell dialect of Eden; these skeletons are called from CaSH but exploit a computational algebra system known as
GAP to offload the mathematical complexity."
}

@InProceedings{HLB05,
  author =	 {M. Hofmann and H-W. Loidl and L. Beringer},
  title = 	 {{Certification of Quantitative Properties of Programs}},
  booktitle = 	 {{Logical Aspects of Secure Computer Systems}},
  publisher = 	 {IOS Press},
  year = 	 2005,
  note =	 {Marktoberdorf Summer School, Aug 2-13, 2005},
  keywords =     {PCC},
  url =          {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/mdorf.pdf},
}

@Article{AspinallBHLM:TCS2007,
  author = 	 {D. Aspinall and L. Beringer and M. Hofmann and H-W. Loidl and A. Momigliano},
  title = 	 {{A Program Logic for Resources}},
  journal = 	 {{Theoretical Computer Science}},
  year = 	 2007,
  volume =	 389,
  number =	 3,
  pages =	 {411--445},
  month =	 dec,
  keywords =     {PCC},
  doi = {http://dx.doi.org/10.1016/j.tcs.2007.09.003},
  url = {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/TCS.pdf},
  abstract = "
  We introduce a reasoning infrastructure for proving statements on
  resource consumption in a fragment of the Java Virtual
  Machine Language (JVML). The infrastructure is based on a small hierarchy
  of program logics, with increasing levels of abstraction: 
  at the top there is a type system for a high-level
  language that encodes resource consumption. 
  The infrastructure is designed to be used in 
  a proof-carrying code (PCC) scenario, where mobile programs
  can be equipped with formal evidence that they
  have predictable resource behaviour.
  
  This article presents the core logic in our infrastructure, a
  VDM-style program logic for partial correctness, which can make
  statements about resource consumption in a general form.
  We establish some important results for this logic, including
  soundness and completeness with respect to a resource-aware
  operational semantics for the JVML.  We also present a second
  logic built on top of the core logic, which is used to express
  termination; it is also shown to be sound and complete.  The entire
  infrastructure has been formalised in Isabelle/HOL, both to enhance
  confidence in the meta-theoretical results, and to provide a
  prototype implementation for PCC.  We give examples to show the
  usefulness of this approach, including proofs of resource bounds on
  code resulting from compiling high-level functional programs.
"
}

@Article{HWU:CPE,
  author =   {Loidl, Hans-Wolfgang and Trinder, Phil W. and Hammond, Kevin and Junaidu, Sahalu B. and Morgan, Richard G. and {Peyton Jones}, Simon L.},
  title =    {{Engineering Parallel Symbolic Programs in GPH}},
  journal =      {Concurrency -- Practice and Experience},
  year =     1999,
  volume =       {11},
  issue =        {12},
  pages =        {701--752},
  url =          {http://www.cee.hw.ac.uk/\~{}dsg/gph/papers/ps/cpe-gph.ps.gz},
}


@InProceedings{HWU:DSM02,
  author = 	 {Loidl, H-W.},
  title = 	 {{The Virtual Shared Memory Performance of a Parallel Graph Reducer}},
  booktitle =  {{CCGrid/DSM 2002 --- Intl.\  Symp.\  on Cluster Computing and the Grid}},
  OPTeditor =     {Bal, H. and L{\"o}hr, K-P. and Reinefeld, A.},
  address =    {Berlin, Germany, May~21--24},
  OPTmonth =      may,
  year = 	 2002,
  publisher =  {IEEE Press},
  pages =      {311--318},
  OPTnote =	 {{Organised with CCGrid 2002 --- International Symposium on Cluster Computing and the Grid}},
  keywords =     {GpH, parallel Haskell},
  url =        {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/dsm02.ps.gz},
}

@InProceedings{SFP01-GUM,
 title={{Load Balancing in a Parallel Graph Reducer}},
 author={Loidl, H-W.},
 pages={63--74},
 booktitle =    {{SFP'01 --- Scottish Functional Programming Workshop}},
 series={Trends in Functional Programming},
 volume={3},
 editor={Hammond, K. and Curtis, S.},
 publisher = {Intellect},
 address={Bristol, UK},
 OPTaddress =  {Univ of Stirling, Scotland},
 year={2001},
 keywords =     {GpH, parallel Haskell, GUM},
 url={http://www.macs.hw.ac.uk/~dsg/gph/papers/drafts/sfp01-gum.ps.gz},
}

@InBook{LTHZB08,
  author =	 {H-W. Loidl and P.W. Trinder and K. Hammond, A.D. {Al Zain} and C. Baker-Finch},
  OPTeditor =	 {Michael Alexander and Bill Gardner},
  title = 	 {{Process Algebra for Parallel and Distributed Processing: Algebraic Languages in Specification-Based Software Development}},
  chapter = 	 {{Semi-Explicit Parallel Programming in a Purely Functional Style: GpH}},
  publisher = 	 {Chapman and Hall},
  year = 	 2008,
  keywords =     {GpH, parallel Haskell},
  abstract = "
Declarative programming languages can play an important role in the process
of designing and implementing parallel systems. They bridge the gap between
a high-level  specification, with proven properties of  the overall system,
and the execution  of the system on real  hardware.  Efficiently exploiting
parallelism  on a wide  range of  architectures is  a challenging  task and
should  in our  view be  handled  by a  sophisticated runtime  environment.
Based on  this design philosophy  we have developed and  formalised Glasgow
parallel Haskell (GpH), and implemented  it as a conservative extension of
the Glasgow Haskell Compiler.

%The latter can  be as
%diverse as  a computational Grid composed of  high-performance clusters and
% multi-core machines.   

The high-level nature of declarative languages eases the task of mapping an
algebraic specification down to  executable code.  In fact, the operational
components   of   the   specification   can  already   be   considered   an
implementation, with the associated  properties acting as assertions to the
code. Based on a formal model  of the declarative language, the validity of
these properties can be established by manual proof, which works on a level
of detail  similar to the  specification language itself.  Many operational
aspects, usually  complicating a  proof of an  implementation, do  not come
into   the  picture   at   this  level.    Most  importantly,   unnecessary
sequentialisation of the code is avoided.

However, the goal of implicit  parallelism has proven an elusive one. Often
the automatically  generated threads are too fine-grained  to be efficient.
In  other  cases the  data-dependencies  between  expressions prohibit  the
generation  of a  sufficient amount  of  parallelism.  Thus,  we employ  an
approach of semi-explicit parallelism, where only potential parallelism has
to be annotated in a program, and all aspects of coordination are delegated
to the runtime environment.  A corresponding formal model, in the form of a
structured  operational  semantics,  handling  pools  of  realised  and  of
potential parallelism,  is used  to establish the  correctness of  the code
employing  semi-explicit parallelism.   The runtime  environment  itself is
capable of synchronising parallel threads, using automatic blocking on data
under evaluation,  and by simulating virtual shared  memory across networks
of machines.  Being  embedded into the optimised runtime  environment for a
sequential  language,  we  achieve  efficient  execution  of  a  high-level
language, close  to the  original specification language,  while minimising
the  programmer effort  in parallelising  the  code and  being scalable  to
large-scale applications that can be executed on heterogeneous networks and
computational Grids.
"}

@InProceedings{LMJB09,
  author = 	 {H-W. Loidl and K. MacKenzie and S. Jost and L. Beringer},
  title = 	 {{A Proof-carrying-code Infrastructure for Resources}},
  booktitle =	 {{LADC'09 --- Latin-American Symposium on Dependable Computing}},
  year =	 2009,
  address =	 {João Pessoa, Brazil, Sep 1--4},
  keywords =     {PCC},
  url =          {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/PCC.pdf},
  abstract = "
  This paper tackles the issue of increasing dependability
  of distributed systems in the presence of mobile code.
  To this end we present a complete Proof-carrying-code (PCC) infrastructure for
  independent and automatic certification of resource bounds of mobile JVM programs.
  This includes a certifying compiler for a high-level language, which
  produces a certificate of bounded heap consumption, and independent
  certificate validation, realised via proof-checking, on the code-consumer
  side. Thus, we are now in a position to automatically infer linear upper bounds on
  the heap consumption of a strict, first-order functional language, generate a
  certificate encoding a formal proof of such bounded heap consumption and
  independently validate this certificate at the consumer side by checking the
  certificate. This prevents mobile code from exhausting resources on the local machine."
}

@Article{HWU:HOSC03,
  author = 	 {Loidl, H-W. and {Rubio Diez}, F.  and Scaife, N.R. and  Hammond, K. and Klusik, U. and  Loogen, R. and  Michaelson, G.J. and  Horiguchi, S.  and {Pena Mari}, R. and Priebe, S.M. and  {Rebon Portillo}, A.J.  and Trinder, P.W.},
  title = 	 {{Comparing Parallel Functional Languages: Programming and Performance}},
  journal = 	 {Higher-order and Symbolic Computation},
  year = 	 2003,
  volume =	 16,
  number =	 3,
  keywords =     {GpH, parallel Haskell, parallel applications},
  url =  {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/HOSC03.ps.gz},
}

%%% %$%cindex Our JFP survey paper

@Article{TLP01,
  author = 	 {Trinder, P.W. and Loidl, H-W. and Pointon, R.F.},
  title = 	 {{Parallel and Distributed Haskells}},
  journal = 	 {J.\ of Functional Programming},
  year = 	 2002,
  month =      jul,
  volume =     12,
  number =     {4\&5},
  pages =      {469--510},
  keywords =     {GpH, parallel Haskell, GdH, distributed Haskell},
  abstractURL = {http://www.dcs.glasgow.ac.uk/jfp/bibliography/References/trinderlp2002:469.html},
  url = {http://www.macs.hw.ac.uk/~dsg/gph/papers/ps/jfp01.ps.gz},
}

@InProceedings{HWU:CarbonCredits,
  author = 	 {S. Jost and H-W. Loidl and K. Hammond and N. Scaife and M. Hofmann},
  title = 	 {{``Carbon Credits'' for Resource-bounded Computations using Amortised Analysis}},
  booktitle =	 {{FM09 --- 16th International Symposium on  Formal Methods}},
  series =       {LNCS~5850},
  pages     =    {354--369},
  publisher =    S-V,
  year =	 2009,
  address =	 {Eindhoven, The Netherlands,  November 2--6},
  keywords =     {Resource analysis, Hume},
  url =          {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/AnalysisPaper.pdf},
  ALTurl =       {http://springerlink.com/content/617r14163768p85p/fulltext.pdf},
  abstract = "
Bounding resource usage is important for a number of areas, notably
real-time embedded systems and safety-critical systems. 
In this paper, we present a fully automatic static type-based analysis
for inferring upper bounds on resource usage for
programs involving general algebraic datatypes and full recursion.
Our method can easily be used to bound any countable resource,
without needing to revisit proofs.
We apply the analysis to the important metrics of worst-case
execution time, stack- and heap-space usage. Our results from
several realistic embedded control applications 
demonstrate good matches between our inferred bounds and
measured worst-case costs for heap and stack usage. For time usage
we infer good bounds for one application.  Where we obtain
less tight bounds, this is due to the use of software floating-point libraries.
"
}

@INPROCEEDINGS{HWU:SizedTime,
  author       = {A.J. Reb\'{o}n~Portillo and K. Hammond and H.-W. Loidl and P. Vasconcelos},
  title        = {A Sized Time System for a Parallel Functional Language },
  booktitle    = {IFL~'02},
  address      = {Madrid},
  publisher    = {Springer-Verlag},
  series       = {LNCS},
  volume       = {2670},
  pages        = {232--248},
  year         = {2003},
}

@INPROCEEDINGS{HWU:SizedTimeRecursion,
  title        = {{Inferring Costs for Recursive, Polymorphic and Higher-Order Functional Programs}},
  author       = {P.B. Vasconcelos and K. Hammond},
  booktitle    = {IFL~'03},
  publisher    = {LNCS},
  pages        = {86--101},
  volume       = {3145},
  address      = {Edinburgh},
  year         = {2004},
}

@InProceedings{HWU:BZL08,
  author = 	 {J. Berthold and A. {Al Zain} and H-W. Loidl},
  title = 	 {{Scheduling Light-weight Parallelism in ArTCoP}},
  booktitle =	 {{PADL'08: Symp. on Practical Aspects of Declarative Languages}},
  year =	 2008,
  series =       {LNCS~4902},
  address =	 {San Francisco, USA},
  month =	 jan,
  pages =        {214--229},
  doi =          {10.1007/978-3-540-77442-6_15},
  keywords =     {GpH, parallel Haskell},
  url = {http://www.tcs.informatik.uni-muenchen.de/~hwloidl/publications/PADL08.pdf},
  abstract = "
  We present the design and prototype implementation of the scheduling 
  component in ArTCoP (architecture transparent control
  of parallelism), a novel run-time environment (RTE) 
  for parallel execution of high-level languages.
  A key feature of ArTCoP is its support for deep process and memory
  hierarchies, shown in the scheduler by supporting light-weight threads.
  To realise a system with easily exchangeable components, the system
  defines a micro-kernel, providing basic infrastructure, such as 
  garbage collection. All complex RTE operations, including the handling of parallelism,
  are implemented at a separate system level.
  By choosing Concurrent Haskell as high-level system language,
  we obtain a prototype in the form of an executable specification
  that is easier to maintain and more flexible than conventional RTEs.
  We demonstrate the flexibility of this approach
  by presenting implementations of a scheduler for light-weight
  threads in ArTCoP, based on GHC Version 6.6."
}

@Misc{gph,
  key = 	 {GPH},
  title = 	 {{GpH Home Page}},
  howpublished = {Web page},
  note = 	 {\url{http://www.macs.hw.ac.uk/~dsg/gph}}}


@inproceedings{DBLP:dblp_conf/sfp/StewartTM12,
   author              = {Robert J. Stewart and 
                          Phil Trinder and 
                          Patrick Maier},
   title               = {Supervised Workpools for Reliable Massively Parallel Computing.},
   booktitle           = {Trends in Functional Programming},
   year                = {2012},
   pages               = {247-262},
   ee                  = {http://dx.doi.org/10.1007/978-3-642-40447-4_16},
   crossref            = {2012},
}

@inproceedings{DBLP:dblp_conf/haskell/MaierST14,
   author              = {Patrick Maier and 
                          Robert J. Stewart and 
                          Phil Trinder},
   title               = {{The HdpH DSLs for Scalable Reliable Computation}},
   booktitle           = {{Haskell'14: SIGPLAN Symposium on Haskell}},
   year                = {2014},
   pages               = {65--76},
   ee                  = {http://doi.acm.org/10.1145/2633357.2633363},
   OPTcrossref            = {2014},
}

@inproceedings{DBLP:dblp_journals/cl/MaierST14,
   author              = {Patrick Maier and 
                          Robert J. Stewart and 
                          Philip W. Trinder},
   title               = {{Reliable Scalable Symbolic Computation: the Design of SymGridPar2}},
   journal             = {Computer Languages, Systems \& Structures},
   year                = {2014},
   pages               = {19--35},
   ee                  = {http://dx.doi.org/10.1016/j.cl.2014.03.001},
}

@InProceedings{HWU:EuroPar14,
  author = 	 {Patrick Maier and Daria Livesey and Hans-Wolfgang Loidl and Phil Trinder},
  title = 	 {{High-Performance Computer Algebra --- A Parallel Hecke Algebra Case Study}},
  booktitle = {{EuroPar'14: Parallel Processing}},
  pages = 	 {415--426},
  year = 	 2014,
  series = 	 {LNCS~8632},
  address = 	 {Porto, Portugal},
  month = 	 aug,
  doi = {10.1007/978-3-319-09873-9_35},
  publisher = {Springer}}

%
% bib-file for JB's papers:
%
%  (own authorship and contributed papers)
%
%      sorted descending by year
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Eden Standard Reference, contributions by JB
@ARTICLE{Eden,
  author =       {R. Loogen and Y. Ortega-Mall\'{e}n and R. {Pe\~{n}a-Mar\'{\i}}},
  title =        {{Parallel Functional Programming in Eden}},
  journal =      {{Journal of Functional Programming}}, 
  xtitle  =       {{, Special Issue on
                   Functional Approaches to High-Performance Parallel Programming}},
  year =         {2005},
  volume =       {15},
  number =       {3},
  pages =        {431-475},
  Xmonth =        {},
  Xkey =          {},
  Xcrossref =     {},
  Xannote =       {},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% JB authorship:

@Article{TFP09HOSC,
  author = 	 { Aswad,, Mustafa and Trinder,, Phil and {Al Zain},, A. D. and Michaelson,, Greg and Berthold,, Jost },
  title = 	 {{Low Pain vs. No Pain Multicore Haskells}},
  journal =  {{Higher-Order and Symbolic Computation (HOSC)}},
  note= {Special issue featuring extended versions of TFP'09 contributions},
  year = 	 {2014},
  OPTvolume = {•},
  OPTnumber = {•},
  OPTpages = {},
}

@InProceedings{IFL12Iteration,
  author    = {Mischa Dieterle and Thomas Horstmeyer and Jost Berthold and Rita Loogen},
  title     = {{Iterating Skeletons -- Structured Parallelism by Composition}},
  booktitle = {{Implementation and Application of Functional Languages, 
  				24th Symposium (IFL 2012)}},
  year = {2013},
  editor = {Ralf Hinze and Andy Gill},
  pages = 	 {18--36},
  OPTvolume    = {8241},
  OPTseries    = {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 8241},
  OPTaddress   = {Berlin/Heidelberg},
  note = {},
}

@InProceedings{IFL12IterationDraft,
  author    = {Mischa Dieterle and Thomas Horstmeyer and Jost Berthold and Rita Loogen},
  title     = {{Iterating Skeletons -- Structured Parallelism by Composition}},
  booktitle = {{Implementation and Application of Functional Languages (IFL), Draft Proceedings}},
  year = {2012},
  editor = {Ralf Hinze},
  OPTvolume = {•},
OPTnumber = {•},
OPTseries = {•},
  address = {},
  month = {September},
OPTorganization = {•},
  publisher = {Dept. of Computer Science, University of Oxford},
  note = {\emph{Final version accepted for publication} (02/2013) in an LNCS volume},
OPTannote = {•}
}

@InProceedings{FHPC12HIPERFIT,
author = {Cosmin Oancea and Christian Andreetta and Jost Berthold and Alain Frisch and Fritz Henglein},
title = {{Financial Software on GPUs: Between Haskell and Fortran}},
booktitle = {{Functional High-Performance Computing (FHPC), 1$st$ ACM SIGPLAN workshop}, Proceedings},
OPTcrossref = {•},
OPTkey = {•},
OPTpages = {61--72},
year = {2012},
OPTeditor = {Clemens Grelck and Andrzej Filinski},
OPTvolume = {•},
OPTnumber = {•},
OPTseries = {•},
OPTaddress = {•},
OPTmonth = {•},
OPTorganization = {•},
publisher = {ACM},
OPTnote = {•},
OPTannote = {•}
}


@InProceedings{TFP11HIPERFIT,
  author = 	 {Jost Berthold and Andrzej Filinski and Fritz Henglein 
                  and {Ken Friis} Larsen and Mogens Steffensen 
                  and Brian Vinter},
  title = 	 {{Functional High Performance Financial IT 
                  -- The HIPERFIT Research Center in Copenhagen}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  OPTbooktitle = {Trends in Functional Programming (TFP'11) - 12th 
                 International Symposium, Madrid, Spain, May 16-18, 2011,
                 Revised Selected Papers},
  booktitle = {Trends in Functional Programming (TFP'11) --
               Revised Selected Papers},
  OPTbooktitle = {TFP'11},
  OPTlocation =  {Madrid, Spain},
  pages = 	 {98--113},
  year = 	 {2012},
  editor = 	 {{Pe\~{n}a-Mar\'{i}}, Ricardo and Page, Rex},
  OPTnumber = 	 {},
  OPTvolume = 	 {},
  series = 	 {LNCS 7193},
  OPTaddress = 	 {Berlin/Heidelberg},
  OPTmonth = 	 {},
  OPTorganization = {},
  publisher = {Springer},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

% MiG paper...
@InProceedings{ICA3PP2011MiG,
  author = 	 {Jost Berthold and Jonas Bardino and Brian Vinter},
  title = 	 {{A Principled Approach to Grid Middleware -- Status report on the Minimum intrusion Grid}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  OPTbooktitle = {ICA3PP 2011, Part 1},
  booktitle =    {11th Intl. Conference on Algorithms and Architectures for 
                 Parallel Processing (ICA3PP'11), Part 1},
  pages = 	 {410--419},
  location=      {Melbourne, Australia},
  year = 	 {2011},
  editor = 	 {},
  OPTvolume = 	 {7016},
  OPTseries = 	 {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 7016},
  OPTnumber = 	 {},
  OPTaddress = 	 {Berlin/Heidelberg},
  OPTmonth = 	 {October},
  OPTorganization = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@inproceedings{IFL10CASH,
  author    = {Chris Brown and Hans-Wolfgang Loidl 
               and Jost Berthold and Kevin Hammond},
  title     = {{Improve your CASH flow: The Computer Algebra SHell}},
  year      = {2011},
  note      = {},
  editor    = {Hage, Jurriaan and Marco Morazan},
  OPTbooktitle = {IFL 2010},
  booktitle = {IFL'10, 22nd Symposium on Implementation and Application of Functional Languages},
  pages     = {169--184},
  OPTvolume    = {6647},
  OPTseries    = {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 6647},
  OPTaddress   = {Berlin/Heidelberg},
}
@inproceedings{IFL10Serial,
  author    = {Jost Berthold},
  title     = {{Orthogonal Serialisation for Haskell}},
  note      = {},
  editor    = {Hage, Jurriaan and Marco Morazan},
  OPTbooktitle = {IFL 2010},
  booktitle = {IFL'10, 22nd Symposium on Implementation and Application of Functional Languages},
  pages     = {38--53},
  year      = {2011},
  OPTvolume    = {6647},
  OPTseries    = {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 6647},
  OPTaddress   = {Berlin/Heidelberg},
}

@inproceedings{IFL10CASHpre,
  author    = {Chris Brown and Hans-Wolfgang Loidl 
               and Jost Berthold and Kevin Hammond},
  title     = {{Improve your CASH flow: The Computer Algebra SHell}},
  OPTbooktitle = {IFL'10 (pre-proceedings)},
  year      = {2010},
  OPTpages     = {131-142},
  OPTcrossref  = {IFL10:UUCS2010020},
  note      = {Work in progress, submitted for refereeing},
  editor    = {Hage, Jurriaan},
  OPTyear = 2010,
  booktitle = {Preproceedings of the 22nd Symposium on Implementation and Application of Functional Languages (IFL 2010). Tech.Report UU-CS-2010-020, Utrecht University},
  OPTnumber = {UU-CS-2010-020},
  OPTinstitution = {Department of Information and Computing Sciences, Utrecht University},
  urlpdf = {{http://www.cs.uu.nl/research/techreps/repo/CS-2010/2010-020.pdf}},
  pubcat = {techreport}
}
@inproceedings{IFL10Serialpre,
  author    = {Jost Berthold},
  title     = {{Towards Orthogonal Haskell Data Serialisation}},
  OPTbooktitle = {IFL'10 (pre-proceedings)},
  year      = {2010},
  pages     = {329-338},
  OPTcrossref  = {IFL10:UUCS2010020},
  note      = {Work in progress, submitted for refereeing},
  editor    = {Hage, Jurriaan},
  OPTyear = 2010,
  booktitle = {Preproceedings of the 22nd Symposium on Implementation and Application of Functional Languages (IFL 2010). Tech.Report UU-CS-2010-020, Utrecht University},
  OPTnumber = {UU-CS-2010-020},
  OPTinstitution = {Department of Information and Computing Sciences, Utrecht University},
  urlpdf = {{http://www.cs.uu.nl/research/techreps/repo/CS-2010/2010-020.pdf}},
  pubcat = {techreport}
}
% IFL 2010 pre-proceedings
@TECHREPORT{IFL10:UUCS2010020,
author = {Hage, Jurriaan (editor)},
year = 2010,
title = {Preproceedings of the 22nd Symposium on Implementation and Application of Functional Languages (IFL 2010)},
number = {UU-CS-2010-020},
institution = {Department of Information and Computing Sciences, Utrecht University},
urlpdf = {{http://www.cs.uu.nl/research/techreps/repo/CS-2010/2010-020.pdf}},
pubcat = {techreport}
}


% Distributed Workpool:

@inproceedings{Eden:Flops10WP,
  author    = {Mischa Dieterle and Jost Berthold and Rita Loogen},
  title     = {{A Skeleton for Distributed Work Pools in Eden}},
  editor    = {Matthias Blume and
               Naoki Kobayashi and
               Germ{\'a}n Vidal},
  OPTbooktitle = {FLOPS 2010},
  booktitle = {FLOPS'10, 10th Fuji International Symposium on 
               Functional and Logic Programming.},
  location  = {Sendai, Japan},
  OPTaddress   = {Berlin/Heidelberg},
  OPTmonth     = {April},
  OPTpublisher = {Springer},
  OPTseries    = {LNCS},
  OPTvolume    = {6009},
  series =  {Springer LNCS 6009},
  pages     = {337-353},
  year      = {2010},
}


%TFP with Phil/Mustafa/Abyd:


% finally...:
@InProceedings{Eden:EUROPAR09GMR,
  author = 	 {Jost Berthold and Mischa Dieterle and Rita Loogen},
  title = 	 {{Implementing Parallel Google Map-Reduce in Eden}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  OPTbooktitle = {Euro-Par 2009},
  booktitle = {Euro-Par 2009, Parallel Processing},
  OPTpages = 	 {990-1002},
  year = 	 {2009},
  editor = 	 {H. Sips and D. Epema and {H.X.} Lin},
  OPTnumber = 	 {},
  OPTvolume = 	 {5704},
  OPTseries = 	 {LNCS},
  OPTpublisher = {Springer},
  series = 	 {Springer LNCS 5704},
  OPTaddress =   {Heidelberg},
  location = 	 {Delft, Netherlands},
  OPTmonth = 	 {August},
  OPTorganization = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@InProceedings{TFP09MCore,
  author = 	 { Aswad,, Mustafa and Trinder,, Phil and {Al Zain},, A. D. and Michaelson,, Greg and Berthold,, Jost },
  title = 	 {{Low Pain vs. No Pain Multicore Haskells}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {Trends in Functional Programming,  10th 
                 International Symposium, Kom\'arno, Slovakia, 2009,
                 Revised Selected Papers (TFP'09)},
  pages = 	 {49--64},
  year = 	 {2010},
  editor = 	 {Zolt\'an Horv\'ath and Vikt\'oria Zs\'ok and Peter Achten and Pieter Koopman},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  OPTaddress = 	 {},
  location =     {Kom\'arno, Slovakia},
  OPTmonth = 	 {June},
  OPTorganization = {},
  publisher = {Intellect},
  address = {Exeter},
  OPTnote = 	 {In print},
  OPTannote = 	 {}
}

@InProceedings{Eden:PACT09FFT,
  author = 	 {Oleg Lobachev and Jost Berthold 
                  and Mischa Dieterle and Rita Loogen},
  title = 	 {{Parallel FFT using Eden Skeletons}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle =    {PACT'09, 
                 10th Intl. Conference on Parallel Computing Technologies},
  pages = 	 {73--83},
  year = 	 {2009},
  OPTeditor = 	 {},
  OPTnumber = 	 {},
  OPTvolume = 	 {5698},
  OPTseries = 	 {LNCS},
  OPTpublisher = {Springer},
  series = 	 {Springer LNCS 5698},
  OPTaddress = 	 {Berlin/Heidelberg},
  location =     {Novosibirsk},
  OPTmonth = 	 {},
  OPTorganization = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}


@InProceedings{Eden:ARCS09,
  author = 	 {Jost Berthold and Mischa Dieterle 
                  and Oleg Lobachev and Rita Loogen},
  title = 	 {{Distributed Memory Programming on Many-Cores - A Case Study Using Eden Divide-\&-Conquer Skeletons}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {ARCS '09 - 22th International Conference on Architecture of Computing Systems 2009 - Workshop proceedings},
  OPTpages = 	 {47-55},
  year = 	 {2009},
  editor = 	 {Gro\ss{}pitsch, K.-E. and  Henkersdorf, A. and Uhrig, S. and Ungerer, T. and H\"ahner, J},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {Delft, NL},
  OPTmonth = 	 {March},
  OPTorganization = {},
  OPTpublisher = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

%rejected:
@Unpublished{ICPP09MCorerejected,
  author = 	 {Jost Berthold and Simon Marlow and Kevin Hammond and A.D. {Al Zain}},
  title = 	 {{Comparing and Optimising Parallel Haskell Implementations for Multicore Machines} },
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {International Conference on Parallel Processing (ICPP'09)},
  OPTpages = 	 {},
  year = 	 {2009},
  editor = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {Vienna, Austria},
  month = 	 {September},
  OPTorganization = {},
  OPTpublisher = {},
  note = 	 {{\bf REJECTED, DO NOT CITE}},
  OPTannote = 	 {}
}

% invited:
@InProceedings{ADPNA09MCore,
  author = 	 {Jost Berthold and Simon Marlow and Kevin Hammond and A.D. {Al Zain}},
  title = 	 {{Comparing and Optimising Parallel Haskell Implementations for Multicore Machines} },
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {3rd Int. Workshop on Advanced Distributed and Parallel Network Applications (ADPNA'09)},
  OPTpages = 	 {},
  year = 	 {2009},
  editor = 	 {{Tomoya Enokido et al.}},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  location = 	 {Vienna, Austria},
  OPTmonth = 	 {September},
  OPTorganization = {},
  publisher = {IEEE},
  address = {New York},
  OPTnote = 	 {by invitation :) },
  note =         {(previously presented at IFL'08)},
  OPTannote = 	 {}
}

%rejected:
@Unpublished{IFL08MCorerejected,
  author = 	 {Jost Berthold and Simon Marlow and {A.D.} {Al Zain} and Kevin Hammond},
  title = 	 {{Comparing and Optimising Parallel {Haskell} Implementations on Multicore }},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {IFL'08, 20th Symposium on Implementation and Application of Functional Languages},
  OPTpages = 	 {},
  year = 	 {2008},
  editor = 	 {Sven-Bodo Scholz (Chair)},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {Hertfordshire, UK},
  month = 	 {September},
  OPTorganization = {},
  OPTpublisher = {},
  note = 	 {Presented at the workshop, draft proceedings},
  OPTannote = 	 {}
}

% not submitted:
@unpublished{IFL08GMR-,
  author = 	 {Jost Berthold and Mischa Dieterle and Rita Loogen},
  title = 	 {{A Parallel Google Map-Reduce Skeleton in Eden}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {IFL'08, 20th Symposium on Implementation and Application of Functional Languages},
  OPTpages = 	 {},
  year = 	 {2008},
  editor = 	 {Sven-Bodo Scholz (Chair)},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {Hertfordshire, UK},
  month = 	 {September},
  OPTorganization = {},
  OPTpublisher = {},
  note = 	 {Work in progress, presented at the workshop, draft proceedings.},
  OPTannote = 	 {}
}


% rejected:
@unpublished{Eden:PPDP08rejected,
  author = 	 {Mischa Dieterle and Jost Berthold and Rita Loogen},
  title = 	 {{Implementing a Distributed Work Pool Skeleton 
                  in a Parallel Functional Language}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  OPTbooktitle = {ACM SIGPLAN conference on Principles and 
               Practice of Declarative Programming (PPDP'08)},
  OPTpages = 	 {},
  year = 	 {2008},
  OPTeditor = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  OPTaddress = 	 {Valencia, Spain},
  OPTmonth = 	 {July},
  OPTorganization = {},
  OPTpublisher = {},
  note = 	 {{\bf REJECTED, DO NOT CITE}},
  OPTannote = 	 {}
}


@InProceedings{DAMP09SymGrid-Par,
 author = {{Al Zain},, A. D. and Hammond,, Kevin and Berthold,, Jost and Trinder,, Phil and Michaelson,, Greg and Aswad,, Mustafa},
 title = {{Low-pain, high-gain multicore programming in Haskell: coordinating irregular symbolic computations on multicore architectures}},
 booktitle = {DAMP '09: Proceedings of the 4th workshop on Declarative aspects of multicore programming},
 year = {2009},
 OPTisbn = {978-1-60558-417-1},
 pages = {25--36},
 location = {Savannah, GA, USA},
 OPTdoi = {http://doi.acm.org/10.1145/1481839.1481843},
 publisher = {ACM},
 address = {New York},
 }

@inproceedings{ISPA08SymGridPar,
  author    = {A. D. {Al Zain} and
               Philip W. Trinder and
               Kevin Hammond and
               Alexander Konovalov and
               Steve Linton and
               Jost Berthold},
  title     = {{Parallelism without Pain: Orchestrating Computational Algebra
               Components into a High-Performance Parallel System}},
  OPTbooktitle = {ISPA},
  OPTbooktitle = {IEEE International Symposium on Parallel and Distributed
               Processing with Applications, ISPA 2008, Sydney, NSW, Australia,
               December 10-12, 2008},
  booktitle = {IEEE International Symposium on Parallel and Distributed
               Processing with Applications (ISPA'08)},
  year      = {2008},
  pages     = {99-112},
  OPTee        = {http://dx.doi.org/10.1109/ISPA.2008.19},
  OPTcrossref  = {DBLP:conf/ispa/2008},
  OPTbibsource = {DBLP, http://dblp.uni-trier.de}
}

@PhdThesis{JB2008PhD,
  author = 	 {Jost Berthold},
  title = 	 {{Explicit and implicit parallel functional programming: 
                   Concepts and implementation}},
  school = 	 {Philipps-Universit\"at Marburg, Germany},
  year = 	 {2008},
  OPTkey = 	 {},
  OPTtype = 	 {},
  OPTaddress = 	 {},
  month = 	 {June},
  note = 	 {\url{http://archiv.ub.uni-marburg.de/diss/z2008/0547/}},
  OPTannote = 	 {}
}

% Al Zain A. Berthold J. Hammond K. Trinder P.
% Orchestrating Production Computer Algebra Components into Portable Parallel Programs.
% Open Source Grid and Cluster Conference (May 2008). 

@InProceedings{SymGrid:Oakland08,
  author = 	 {A.D. {Al Zain} and Jost Berthold and Kevin Hammond and Phil Trinder},
  title = 	 {{Orchestrating Production Computer Algebra 
                  Components into Portable Parallel Programs}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {Open Source Grid and Cluster Conference},
  OPTpages = 	 {},
  year = 	 {2008},
  OPTeditor = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {Oakland(CA), USA},
  month = 	 {May},
  OPTorganization = {},
  OPTpublisher = {},
  note = 	 {},
  OPTannote = 	 {}
}

% PADL08, Work pools
@InProceedings{Eden:PADL08WP,
  author =       {Jost Berthold and Mischa Dieterle and Rita Loogen and Steffen Priebe},
  title =        {{Hierarchical Master-Worker Skeletons}},
  booktitle =    {PADL'08 --- Practical Aspects of Declarative Languages},
  OPTbooktitle =    {PADL'08},
  editor =       {Paul Hudak and David Warren},
  year =         {2008},
  location =      {San Francisco, USA},
  OPTmonth =        {January},
  pages =    {133--152},
  OPTseries =   {LNCS},
  OPTvolume =   {4902},
  OPTpublisher =    {Springer},
  series =   {Springer LNCS 4902},
  OPTaddress =      {Heidelberg},
  note =     {}
}

% TFP 07, rejected:
@Unpublished{TFP07WPrejected,
  author = 	 {Jost Berthold and Mischa Dieterle and Rita Loogen and Steffen Priebe},
  title = 	 {Hierarchical Master-Worker Skeletons},
  note = 	 {Presented at Workshop ``Trends in Functional Programming'' (TFP), New York, USA},
  OPTkey = 	 {},
  month = 	 {April},
  year = 	 {2007},
  OPTannote = 	 {}
}

@Unpublished{artcopDFG,
  author =   {Martin Hofmann and Rita Loogen},
  title =    {{Automatisierte modellgestützte Verwaltung von Parallelität 
              auf heterogenen Architekturen}},
  year =     {2008},
  howpublished = {DFG project application, under consideration},
  month =    {March},
  note =     {Contributions by Hans-Wolfgang Loidl and Jost Berthold}
}

%PADL08, GenRTE
@InProceedings{Eden:PADL08GenRTE,
  author = 	 {Jost Berthold and Hans-Wolfgang Loidl and A.D. {Al Zain}},
  title = 	 {{Scheduling Light-Weight Parallelism in {\sc ArTCoP}}},
  booktitle =    {PADL'08 --- Practical Aspects of Declarative Languages},
  OPTbooktitle =    {PADL'08},
  editor =       {Paul Hudak and David Warren},
  year =         {2008},
  location =      {San Francisco, USA},
  OPTmonth =        {January},
  pages =    {214--229},
  OPTseries =   {LNCS},
  OPTvolume =   { 4902},
  OPTpublisher =    {Springer},
  series =   {Springer LNCS 4902},
  OPTaddress =      {Heidelberg},
  note =     {}
}
% TFP 07, rejected:
@Unpublished{TFP07GenRTErejected,
  author = 	 {Jost Berthold and Hans-Wolfgang Loidl and A.D. {Al Zain}},
  title = 	 {{Adaptive High-Level Scheduling in a Generic Parallel Runtime Environment}},
  note = 	 {Presented at Workshop ``Trends in Functional Programming'' (TFP), New York, USA},
  OPTkey = 	 {},
  month = 	 {April},
  year = 	 {2007},
  OPTannote = 	 {}
}

% IFL 07, not submitted:
@Unpublished{IFL07WP-,
  author = 	 {Jost Berthold and Mischa Dieterle and Rita Loogen and Steffen Priebe},
  title = 	 {{Functional Master-Worker Skeletons}},
  note = 	 {Presented at the 19th International Symposium on Implementatoin and Application of Functional Languages (IFL'07), Freiburg, Germany},
  OPTkey = 	 {},
  month = 	 {September},
  year = 	 {2007},
  OPTannote = 	 {}
}

@InProceedings{ParCo07,
  author = 	 {Jost Berthold and Rita Loogen},
  title = 	 {{Visualizing Parallel Functional Program Executions: Case Studies with the Eden Trace Viewer}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  OPTbooktitle = {Parallel Computing: Architectures, Algorithms and Applications.
               Proceedings of the International Conference ParCo 2007},
  booktitle = {Proceedings of ParCo 2007},
  OPTpages = 	 {},
  publisher =	"Central Institute for Applied Mathematics, {J\"ulich, Germany}",
  year = 	 {2007},
  volume = 	 {38},
  OPTseries =	"NIC",
  series = "John von Neumann Institute for Computing Series",
  editor =    {G.R. Joubert and C. Bischof and F. Peters and T. Lippert and M. B\"ucker and P. Gibbon and B. Mohr},
  OPTeditor = 	 {C. Bischof et al.},
  OPTorganization = {},
  OPTannote = 	 {},
  note = 	 {},
}

% IFL06: Eden Implementation
@InProceedings{Eden:IFL06Edi,
  author = 	 {Jost Berthold and Rita Loogen},
  title     = {{Parallel Coordination Made Explicit in a Functional Setting}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  OPTbooktitle = {IFL'06},
  booktitle = {{IFL'06, 18th Symposium on Implementation and Application of 
                Functional Languages}},
  pages = 	 {73--90},
  year = 	 {2007},
  editor    = {Zolt\'an Horv\'ath and Vikt\'oria Zs\'ok},
  OPTvolume = 	 {4449},
  OPTseries = 	 {LNCS},
  OPTpublisher = {Springer},
  series = 	 {Springer LNCS 4449},
  OPTnumber = 	 {},
  OPTaddress = 	 {Heidelberg},
  OPTmonth = 	 {September},
  location = {Budapest, Hungary},
  OPTorganization = {},
  OPTannote = 	 {},
  OPTurl = {http://www.springeronline.com/3-540-74129-9???},
  OPTnote = 	 {(\textbf{awarded best paper} of IFL'06)},
}

@InProceedings{Eden:PARCO05,
  title =	{{Skeletons for Recursively Unfolding Process
		 Topologies}},
  author =	"Jost Berthold and Rita Loogen",
  OPTbibdate =	"2006-11-20",
  OPTbibsource =	"DBLP,
		 http://dblp.uni-trier.de/db/conf/parco/parco2005.html#BertholdL05",
  OPTbooktitle =	"PARCO",
  OPTbooktitle =	"Parallel Computing: Current \& Future Issues of
		 High-End Computing, Proceedings of the International
		 Conference ParCo 2005, 13-16 September 2005, Department
		 of Computer Architecture, University of Malaga, Spain",
  booktitle =	"Proceedings of ParCo 2005",
  publisher =	"Central Institute for Applied Mathematics, {J\"ulich, Germany}",
  year = 	"2005",
  volume =	"33",
  series = "John von Neumann Institute for Computing Series",
  OPTseries =	"NIC",
  editor =	"Gerhard R. Joubert and Wolfgang E. Nagel and Frans J.
		 Peters and Oscar G. Plata and P. Tirado and Emilio L.
		 Zapata",
  OPTeditor =	"G. R. Joubert et al.",
  OPTISBN = 	"3-00-017352-8",
  OPTpages =	"835ff",
}


@ARTICLE{Eden:HLPP05PPL,
  author = 	 {Jost Berthold and Rita Loogen},
  title = 	 {{The Impact of Dynamic Channels on Functional Topology Skeletons}},
  journal =      {Parallel Processing Letters (World Scientific Publishing
Company)},
  year =         {2008},
  volume =       {18},
  number =       {1},
  pages =        {101--115},
}

@InProceedings{Eden:HLPP05,
  author = 	 {Jost Berthold and Rita Loogen},
  title = 	 {{The Impact of Dynamic Channels on Functional Topology Skeletons}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {HLPP 2005 --- 3rd International Workshop on High-level Parallel Programming and Applications},
  OPTpages = 	 {},
  year = 	 {2005},
  editor = 	 {Alexander Tiskin and Frederic Loulergue},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {Coventry, UK},
  OPTmonth = 	 {},
  OPTorganization = {},
  publisher = {},
  OPTnote = 	 {Proceedings},
  OPTannote = 	 {}
}

@Unpublished{Eden:IFL04rejected,
  author = 	 {Jost Berthold and Rita Loogen},
  title = 	 {{Analysing Dynamic Channels for Topology Skeletons in Eden}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {IFL'04, 16th International Workshop on Implementation of Functional Languages},
  OPTpages = 	 {},
  year = 	 {2004},
  editor = 	 {Clemens Grelck and Frank Huch},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  address = 	 {L\ubeck, Germany},
  OPTmonth = 	 {},
  OPTorganization = {},
  publisher = {},
  note = 	 {Presented at the workshop, draft proceedings},
  OPTannote = 	 {}
}


@InProceedings{Eden:PAPP04,
  author =   {Jost Berthold},
  title =    {{Towards a Generalised Runtime Environment for Parallel Haskells}},
  OPTcrossref =  {},
  OPTkey =   {},
  booktitle =    {Computational Science --- ICCS'04},
  OPTpages =     {297ff},
  year =     {2004},
  editor =   {Marian Bubak and Geert Dick van Albada and Peter M. A.
		 Sloot and Jack J. Dongarra},
  OPTvolume =   {3038},
  OPTnumber =   {3},
  OPTseries = {LNCS},
  OPTpublisher = {Springer},
  series =   {Springer LNCS 3038, no.3},
  OPTaddress  = {Berlin/Heidelberg},
  location =      {Krakow, Poland},
  OPTmonth =     {},
  OPTorganization = {},
  note =     {{(Workshop on Practical Aspects of High-level Parallel Programming --- PAPP04)}},
  OPTannote =    {}
}

@ARTICLE{Eden:PPL03,
  AUTHOR =       "Kevin Hammond and Jost Berthold and Rita Loogen",
  TITLE =        {{Automatic Skeletons in Template Haskell}},
  journal =      {Parallel Processing Letters (World Scientific Publishing
Company)},
  year =         {2003},
  volume =       {13},
  number =       {3},
  pages =        {413--424}
}


@InProceedings{Eden:IFL03,
  author = 	 {Jost Berthold},
  title = 	 {{Dynamic Chunking in Eden}},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {IFL'03, Intl.\ Workshop on the 
               Implementation of Functional Languages},
  OPTpages = 	 {102ff},
  year = 	 {2003},
  editor = 	 {Phil Trinder and Greg Michaelson and Ricardo Pe{\~n}a},
  OPTvolume = 	 {3145},
  OPTnumber = 	 {},
  OPTseries =    {LNCS},
  OPTpublisher = {Springer},
  series = 	 {Springer LNCS 3145},
  location = 	 {Edinburgh, UK},
  OPTaddress =      {Berlin/Heidelberg},
  OPTmonth = 	 {},
  OPTorganization = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}


@InProceedings{Eden:EUROPAR03,
  author =   {Jost Berthold and Ulrike Klusik and Rita Loogen and Steffen Priebe and Nils Weskamp},
  title =    {{High-level Process Control in Eden}},
  OPTcrossref =  {},
  OPTkey =   {},
  booktitle =    {EuroPar 2003 -- Parallel Processing},
  OPTpages =     {},
  year =     {2003},
  editor =   {H. Kosch and L. B\"osz\"orm\'enyi 
              and H. Hellwagner},
  OPTvolume =   {2790},
  number =   {},
  OPTseries =   {LNCS},
  OPTpublisher = {Springer},
  series = {Springer LNCS 2790},
  OPTaddress =  {Heidelberg},
  location = {Klagenfurt, Austria},
}


@INPROCEEDINGS{Eden:HLPP03,
  AUTHOR =       "Kevin Hammond and Jost Berthold and Rita Loogen",
  TITLE =        {{Automatic Skeletons in Template Haskell}},
  XBOOKTITLE =    "{HLPP 2003. Paris, France}",
  Booktitle  =   "{HLPP 2003 --- 2nd International Workshop on High-level Parallel Programming and Applications}",
  YEAR =         "2003",
  editor =       "F. Loulergue",
  address =      "Paris, France",
  Xmonth =        "June",
}

% draft version, not submitted for final version
@Unpublished{EdenIFL02-,
  AUTHOR =       "Jost Berthold and Rita Loogen and Steffen Priebe and Nils Weskamp",
  TITLE =        {{Porting the Eden System to GHC 5.00.2}},
  BOOKTITLE =    "IFL'02, 14th Intl. Workshop 
                  on the Implementation of Functional Languages",
  YEAR =         "2002",
  month =        "Sept.",
  organization = "Univ. Complutense de Madrid",
  note =         {Workshop version only, not submitted}
}

@inproceedings{skeletons-patterns, 
   title = "{On Skeletons and Design Patterns}", 
   author = "M. Danelutto", 
   editor = {Joubert, Gerhard R. and Vanneschi, M. and Peters, F. J. and Murli, A.},
   booktitle = {Parallel Computing - Advances and Current Issues: Proceedings of the International Conference, Parco 2001},
   year = {2002},
   isbn = {1860943152},
   publisher = {Imperial College Press},
   address = {London, UK, UK}
}
@article{mdf:hplgpu:ppl:12,
	Abstract = {We propose a data flow based run time system as an efficient tool for supporting execution of parallel code on heterogeneous architectures hosting both multicore CPUs and GPUs. We discuss how the proposed run time system may be the target of both structured parallel applications developed using algorithmic skeletons/parallel design patterns and also more ``domain specific'' programming models. Experimental results demonstrating the feasibility of the approach are presented.},
	Annote = {Extended version of Intl. Workshop on High-level Programming for Heterogeneous and Hierarchical Parallel Systems (HLPGPU)},
	Author = {Marco Aldinucci and Marco Danelutto and Peter Kilpatrick and Massimo Torquati},
	Date-Added = {2012-04-25 13:20:40 +0000},
	Date-Modified = {2013-06-17 14:09:33 +0000},
	Doi = {10.1142/S0129626412400063},
	Issn = {0129-6264},
	Journal = {Parallel Processing Letters},
	Keywords = {fastflow, multicore},
	Month = jun,
	Number = {2},
	Title = {Targeting heterogeneous architectures via macro data flow},
	Url = {http://calvados.di.unipi.it/storage/paper_files/2012_mdf_PPL-hplgpu.pdf},
	Volume = {22},
	Year = {2012},
	Bdsk-Url-1 = {http://calvados.di.unipi.it/storage/paper_files/2012_mdf_PPL-hplgpu.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1142/S0129626412400063}}

@inproceedings{ff:acc:europar:11,
	Abstract = {FastFlow is a programming framework specifically targeting cache-coherent shared-memory multicores. It is implemented as a stack of C++ template libraries built on top of lock-free (and memory fence free) synchronization mechanisms. Its philosophy is to combine programmability with performance. In this paper a new FastFlow programming methodology aimed at supporting parallelization of existing sequential code via offloading onto a dynamically created software accelerator is presented. The new methodology has been validated using a set of simple micro-benchmarks and some real applications.},
	Address = {Bordeaux, France},
	Author = {Marco Aldinucci and Marco Danelutto and Peter Kilpatrick and Massimiliano Meneghin and Massimo Torquati},
	Booktitle = {Proc. of 17th Intl. Euro-Par 2011 Parallel Processing},
	Date-Added = {2012-06-04 18:35:57 +0200},
	Date-Modified = {2012-08-15 13:43:22 +0000},
	Doi = {10.1007/978-3-642-23397-5_17},
	Editor = {E. Jeannot and R. Namyst and J. Roman},
	Keywords = {fastflow},
	Month = {aug},
	Pages = {170--181},
	Publisher = {Springer},
	Series = {LNCS},
	Title = {Accelerating code on multi-cores with FastFlow},
	Volume = {6853},
	Year = {2011},
	Bdsk-Url-1 = {http://calvados.di.unipi.it/storage/paper_files/2011_fastflow_acc_europar.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-642-23397-5_17}}

@inproceedings{beske:ipdps:09,
	Abstract = {An approach to the management of non-functional concerns in massively parallel and/or distributed architectures that marries parallel programming patterns with autonomic computing is presented. The necessity and suitability of the adoption of autonomic techniques are evidenced. Issues arising in the implementation of autonomic managers taking care of multiple concerns and of coordination among hierarchies of such autonomic managers are discussed. Experimental results are presented that demonstrate the feasibility of the approach.},
	Address = {Rome, Italy},
	Author = {Marco Aldinucci and Marco Danelutto and Peter Kilpatrick},
	Booktitle = {Proc. of Intl. Parallel \& Distributed Processing Symposium (IPDPS)},
	Date-Added = {2008-12-09 18:58:37 +0100},
	Date-Modified = {2009-06-07 22:30:35 +0200},
	Doi = {10.1109/IPDPS.2009.5161034},
	Month = {may},
	Pages = {1--12},
	Publisher = {IEEE},
	Title = {Autonomic management of non-functional concerns in distributed and parallel application programming},
	Url = {http://calvados.di.unipi.it/storage/paper_files/2009_f_nf_IPDPS.pdf},
	Year = {2009},
	Bdsk-Url-1 = {http://calvados.di.unipi.it/storage/paper_files/2009_f_nf_IPDPS.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/IPDPS.2009.5161034}}

@article{DBLP:journals/procedia/BuonoDL10,
	Author = {Daniele Buono and Marco Danelutto and Silvia Lametti},
	Bibsource = {DBLP, http://dblp.uni-trier.de},
	Ee = {http://dx.doi.org/10.1016/j.procs.2010.04.234},
	Journal = {Procedia CS},
	Number = {1},
	Pages = {2095-2103},
	Title = {Map, reduce and mapreduce, the skeleton way},
	Volume = {1},
	Year = {2010}}


@inproceedings{ocamlp3l:98,
        Author = {Marco Danelutto and Roberto Di Cosmo and Xavier Leroy and Susanna Pelagatti},
        Booktitle = {{ACM} Sigplan Workshop on {ML}},
        Date-Added = {2008-05-05 23:25:08 +0200},
        Date-Modified = {2008-05-05 23:27:16 +0200},
        Organization = {ACM},
        Pages = {31--39},
        Title = {Parallel Functional Programming with Skeletons: the {OCAMLP3L} experiment},
        Year = {1998}}

@inproceedings{brown2014agricultural,
  title={{Agricultural Reform: More Efficient Farming Using Advanced Parallel Refactoring Tools}},
  author={Brown, Christopher and Janjic, Vladimir and Hammond, Kevin and Sch{\"o}ner, Holger and Idrees, Kamran and Glass, Colin},
  booktitle={Parallel, Distributed and Network-Based Processing (PDP), 2014 22nd Euromicro International Conference on},
  pages={36--43},
  year={2014},
  organization={IEEE}
}

@inproceedings{wieser2011gpu,
  title={{GPU-Based Image Processing Use Cases: A High-Level Approach.}},
  author={Wieser, Volkmar and Grelck, Clemens and Sch{\"o}ner, Holger and Haslinger, Peter and Bosa, Karoly and Moser, Bernhard},
  booktitle={PARCO},
  pages={199--206},
  year={2011}
}


@article{pecevski2009pcsim,
  title={{PCSIM: a parallel simulation environment for neural circuits fully integrated with Python}},
  author={Pecevski, Dejan and Natschl{\"a}ger, Thomas and Schuch, Klaus},
  journal={Frontiers in neuroinformatics},
  volume={3},
  year={2009},
  publisher={Frontiers Research Foundation}
}

@inproceedings{brown2013paraphrasing,
  title={{Paraphrasing: Generating Parallel Programs Using Refactoring}},
  author={Brown, Christopher and Hammond, Kevin and Danelutto, Marco and Kilpatrick, Peter and Sch{\"o}ner, Holger and Breddin, Tino},
  booktitle={Formal Methods for Components and Objects},
  pages={237--256},
  year={2013},
  organization={Springer}
}

@inproceedings{wieser2012statistical,
  title={{Statistical performance analysis with dynamic workload using S-NET}},
  author={Wieser, Volkmar and H{\"o}lzenspies, PK and Kirner, Raimund and Ro{\ss}bory, Michael},
  booktitle={Workshop on Feedback-Directed Compiler Optimization for Multi-Core Architectures, Paris, France},
  year={2012}
}
@INPROCEEDINGS{2014era..conf20201N,
   author = {{Nikolic}, B. and {SDP Consortium}, S.},
    title = "{Square Kilometre Array Science Data Processing}",
booktitle = {Exascale Radio Astronomy},
     year = 2014,
    month = apr,
    pages = {20201},
   adsurl = {http://adsabs.harvard.edu/abs/2014era..conf20201N},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}


@ARTICLE{2013A&A...552A.104N,
   author = {{Nikolic}, B. and {Bolton}, R.~C. and {Graves}, S.~F. and {Hills}, R.~E. and 
	{Richer}, J.~S.},
    title = "{Phase correction for ALMA with 183 GHz water vapour radiometers}",
  journal = {Astronomy and Astrophysics},
archivePrefix = "arXiv",
   eprint = {1302.6056},
 primaryClass = "astro-ph.IM",
 keywords = {atmospheric effects, instrumentation: high angular resolution, techniques: interferometric},
     year = 2013,
    month = apr,
   volume = 552,
      eid = {A104},
    pages = {A104},
      doi = {10.1051/0004-6361/201220987},
   adsurl = {http://adsabs.harvard.edu/abs/2013A%26A...552A.104N},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@MISC{2012ascl.soft07014N,
   author = {{Nikolic}, B. and {Graves}, S.~F. and {Bolton}, R.~C. and {Richer}, J.~S.
	},
    title = "{wvrgcal: Correction of atmospheric phase fluctuations in ALMA observations}",
     note = {Astrophysics Source Code Library},
     year = 2012,
archivePrefix = "ascl",
   eprint = {1207.014},
    month = jul,
   adsurl = {http://adsabs.harvard.edu/abs/2012ascl.soft07014N},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System},
     note = { \url{http://www.mrao.cam.ac.uk/~bn204/alma/wvrsoft.html} }
}


@ARTICLE{2007A&A...465..685N,
   author = {{Nikolic}, B. and {Prestage}, R.~M. and {Balser}, D.~S. and 
	{Chandler}, C.~J. and {Hills}, R.~E.},
    title = "{Out-of-focus holography at the Green Bank Telescope}",
  journal = {Astronomy and Astrophysics},
   eprint = {astro-ph/0612249},
 keywords = {telescopes},
     year = 2007,
    month = apr,
   volume = 465,
    pages = {685-693},
      doi = {10.1051/0004-6361:20065765},
   adsurl = {http://adsabs.harvard.edu/abs/2007A%26A...465..685N},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@INPROCEEDINGS{2012SPIE.8444E..3EM,
   author = {{Matsushita}, S. and {Morita}, K.-I. and {Barkats}, D. and {Hills}, R.~E. and 
	{Fomalont}, E.~B. and {Nikolic}, B.},
    title = "{ALMA temporal phase stability and the effectiveness of water vapor radiometer}",
booktitle = {Society of Photo-Optical Instrumentation Engineers (SPIE) Conference Series},
     year = 2012,
   series = {Society of Photo-Optical Instrumentation Engineers (SPIE) Conference Series},
   volume = 8444,
archivePrefix = "arXiv",
   eprint = {1210.5306},
 primaryClass = "astro-ph.IM",
    month = sep,
      eid = {84443E},
    pages = {3},
      doi = {10.1117/12.925872},
   adsurl = {http://adsabs.harvard.edu/abs/2012SPIE.8444E..3EM},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@article{DukeCKSNS:12,
  Author = {Duke, D. and Carr, H. and Knoll, A. and Schunck, N. and  Nam, H.A. and  Staszczak, A.},
  Journal = {Trans. on Visualization and Computer Graphics},
  Number = {12},
  Pages = {2033--2040},
  Publisher = {{IEEE} Computer Society},
  Title = {Visualizing Nuclear Scission through a Multifield Extension of Topological Analysis},
  Volume = {18},
  Year = {2012}
}
@article{CarrD:14,
  Author = {H. Carr and D.J. Duke},
  Journal = {Trans. on Visualization and Computer Graphics},
  Publisher = {{IEEE} Computer Society},
  Title = {Joint Contour Nets},
  Year = {2014}
}
@inproceedings{WortmannD:13,
 author = {Wortmann, Peter M. and Duke, David},
 title = {Causality of Optimized Haskell: What is burning our cycles?},
 booktitle = {Proc. of Haskell Symposium},
 year = {2013},
 pages = {141--152},
 publisher = {ACM}
} 
@article{SchunckDCK:14,
  author = {N. Schunck and D.J. Duke and  H. Carr and A. Knoll}, 
  title = {Description of Induced Nuclear Fission with {Skyrme} Energy Functionals: {I. S}tatic Potential Energy Surfaces and Fission Fragment Properties},
  journal = {Physical Review {C}},
  volume = {90},
  number = {5},
  year = {2014}
}
@inproceedings{DukeHC:14,
 author = {Duke, David J. and Hosseini, Fouzhan and Carr, Hamish},
 title = {Parallel Computation of Multifield Topology: Experience of Haskell in a Computational Science Application},
 booktitle = {Proc. of the 3rd ACM SIGPLAN Workshop on Functional High-performance Computing},
 series = {FHPC '14},
 year = {2014},
 isbn = {978-1-4503-3040-4},
 location = {Gothenburg, Sweden},
 pages = {11--21},
 publisher = {{ACM} Press} 
} 

@Article{CoLo12,
  author = 	 {Duncan Coutts and Andres L{\"o}h},
  title = 	 {Deterministic Parallel Programming with {Haskell}},
  journal = 	 {Computing in Science and Engineering},
  year = 	 2012,
  volume = 	 14,
  number = 	 6,
  pages = 	 {36--43}}

@misc{Threadscope,
  title = {{ThreadScope} -- A graphical tool for profiling parallel {Haskell} programs},
  note = {Available from \url{https://hackage.haskell.org/package/threadscope}}
}

@misc{ghceventsanalyze,
  title = {{ghc-events-analyze} -- Analyze and visualize {GHC} event logs},
  note = {Available from \url{https://hackage.haskell.org/package/ghc-events-analyze}}
}

@inproceedings{CoLeSt07,
  title={Stream fusion: From lists to streams to nothing at all},
  author={Coutts, Duncan and Leshchinskiy, Roman and Stewart, Don},
  booktitle = {Proceedings of the 12th ACM SIGPLAN International Conference on Functional Programming},
  series = {ICFP '07},
  year = {2007},
  pages = {315--326},
  publisher = {ACM},
}

@inproceedings{RoHoLoJe09,
  author = {{Rodriguez Yakushev}, Alexey and Holdermans, Stefan and L\"{o}h, Andres and Jeuring, Johan},
  title = {Generic Programming with Fixed Points for Mutually Recursive Datatypes},
  booktitle = {Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming},
  series = {ICFP '09},
  year = {2009},
  pages = {233--244},
  publisher = {ACM},
} 

@article{DBLP:journals/cai/BarwellBHTB16,
  author    = {Adam D. Barwell and
  Christopher Brown and
  Kevin Hammond and
  Wojciech Turek and
  Aleksander Byrski},
  title     = {Using Program Shaping and Algorithmic Skeletons to Parallelise
  an Evolutionary Multi-Agent System in Erlang},
  journal   = {Computing and Informatics},
  volume    = {35},
  number    = {4},
  pages     = {792--818},
  year      = {2016},
  url       = {http://www.cai.sk/ojs/index.php/cai/article/view/3378},
  timestamp = {Tue, 07 Mar 2017 18:00:52 +0100},
  biburl    = {http://dblp.dagstuhl.de/rec/bib/journals/cai/BarwellBHTB16},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}


@inproceedings{Barwell:2016:TSD,
 author = {Barwell, Adam D. and Brown, Christopher and Castro, David and Hammond, Kevin},
 title = {Towards Semi-automatic Data-type Translation for Parallelism in Erlang},
 booktitle = {Proceedings of the 15th International Workshop on Erlang},
 series = {Erlang 2016},
 year = {2016},
 isbn = {978-1-4503-4431-9},
 location = {Nara, Japan},
 pages = {60--61},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/2975969.2975978},
 doi = {10.1145/2975969.2975978},
 acmid = {2975978},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Erlang, Program Transformation, Refactoring},
}
